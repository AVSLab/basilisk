name: "Pull Request"

on:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pre-commit:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - id: file_changes
        uses: tj-actions/changed-files@v44
      - uses: pre-commit/action@v3.0.1
        with:
          extra_args: --files ${{ steps.file_changes.outputs.all_changed_files}}

  build-linux-3-8:
    name: Linux 20.04 python 3.8
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ["3.8"]
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache conan packages
        id: cache-conan
        uses: actions/cache@v4
        env:
          cache-name: cache-conan-packages-ubuntu-20-04
        with:
          # conan cache files are stored in `~/.conan` on Linux/macOS
          path: ~/.conan
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('conanfile.py') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Cache pip modules
        id: cache-pip
        uses: actions/cache@v4
        env:
          cache-name: cache-pip-modules
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: "Install swig and cmake"
        run: sudo apt-get update && sudo apt-get install build-essential swig cmake -y
      - name: "Install python packages"
        run: sudo apt-get install python3-setuptools python3-tk python3.9-venv
      - name: "Create virtual Environment"
        run: python3 -m venv .venv
      - name: "Install wheel and conan package"
        run: source .venv/bin/activate && pip3 install wheel 'conan<2.0' pytest datashader holoviews pytest-xdist
      - name: "Build basilisk"
        run: source .venv/bin/activate && python3 conanfile.py
      - name: "Run Python Tests"
        run: |
          source .venv/bin/activate
          cd src && pytest -n auto -m "not ciSkip" --junitxml=../junit/test-results-${{ matrix.python-version }}.xml
      - name: "Upload pytest test results"
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
      - name: "Run C/C++ Tests"
        working-directory: ./dist3
        run: ctest
        if: ${{ always() }}

  build-linux-3-9:
    name: Linux 20.04 python 3.9
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ["3.9"]
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache conan packages
        id: cache-conan
        uses: actions/cache@v4
        env:
          cache-name: cache-conan-packages-ubuntu-20-04
        with:
          # conan cache files are stored in `~/.conan` on Linux/macOS
          path: ~/.conan
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('conanfile.py') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Cache pip modules
        id: cache-pip
        uses: actions/cache@v4
        env:
          cache-name: cache-pip-modules
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: "Install swig and cmake"
        run: sudo apt-get update && sudo apt-get install build-essential swig cmake -y
      - name: "Install python packages"
        run: sudo apt-get install python3-setuptools python3-tk python3.9-venv
      - name: "Create virtual Environment"
        run: python3 -m venv .venv
      - name: "Install wheel and conan package"
        run: source .venv/bin/activate && pip3 install wheel 'conan<2.0' pytest pytest-xdist
      - name: "Build basilisk"
        run: source .venv/bin/activate && python3 conanfile.py
      - name: "Run Python Tests"
        run: |
          source .venv/bin/activate
          cd src && pytest -n auto -m "not ciSkip" --junitxml=../junit/test-results-${{ matrix.python-version }}.xml
      - name: "Upload pytest test results"
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
      - name: "Run C/C++ Tests"
        working-directory: ./dist3
        run: ctest
        if: ${{ always() }}

  build-linux-3-10:
    name: Linux 22.04 python 3.10
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ["3.10"]
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache conan packages
        id: cache-conan
        uses: actions/cache@v4
        env:
          cache-name: cache-conan-packages-ubuntu-22-04
        with:
          # conan cache files are stored in `~/.conan` on Linux/macOS
          path: ~/.conan
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('conanfile.py') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Cache pip modules
        id: cache-pip
        uses: actions/cache@v4
        env:
          cache-name: cache-pip-modules
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: "Install swig and cmake"
        run: sudo apt-get update && sudo apt-get install build-essential swig cmake -y
      - name: "Install python packages"
        run: sudo apt-get install python3-setuptools python3-tk python3.10-venv
      - name: "Create virtual Environment"
        run: python3 -m venv .venv
      - name: "Install wheel and conan package"
        run: source .venv/bin/activate && pip3 install wheel 'conan<2.0.0' pytest pytest-xdist
      - name: "Build basilisk"
        run: source .venv/bin/activate && python3 conanfile.py
      - name: "Run Python Tests"
        run: |
          source .venv/bin/activate
          cd src && pytest -n auto -m "not ciSkip" --junitxml=../junit/test-results-${{ matrix.python-version }}.xml
      - name: "Upload pytest test results"
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
      - name: "Run C/C++ Tests"
        working-directory: ./dist3
        run: ctest
        if: ${{ always() }}


  build-linux-3-11:
    name: Linux 22.04 python 3.11
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ["3.11"]
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache conan packages
        id: cache-conan
        uses: actions/cache@v4
        env:
          cache-name: cache-conan-packages-ubuntu-22-04
        with:
          # conan cache files are stored in `~/.conan` on Linux/macOS
          path: ~/.conan
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('conanfile.py') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Cache pip modules
        id: cache-pip
        uses: actions/cache@v4
        env:
          cache-name: cache-pip-modules
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: "Install swig and cmake"
        run: sudo apt-get update && sudo apt-get install build-essential swig cmake -y
      - name: "Install python packages"
        run: sudo apt-get install python3-setuptools python3-tk python3.11-venv
      - name: "Create virtual Environment"
        run: python3 -m venv .venv
      - name: "Install wheel and conan package"
        run: source .venv/bin/activate && pip3 install wheel 'conan<2.0.0'
      - name: "Build basilisk"
        run: source .venv/bin/activate && python3 conanfile.py
      - name: "Run Python Tests"
        run: |
          source .venv/bin/activate
          cd src && pytest -n auto -m "not ciSkip" --junitxml=../junit/test-results-${{ matrix.python-version }}.xml
      - name: "Upload pytest test results"
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
      - name: "Run C/C++ Tests"
        working-directory: ./dist3
        run: ctest
        if: ${{ always() }}

  build-linux-3-11-pip:
    name: Linux 22.04 python 3.11 pip
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ["3.11"]
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache conan packages
        id: cache-conan
        uses: actions/cache@v4
        env:
          cache-name: cache-conan-packages-ubuntu-22-04
        with:
          # conan cache files are stored in `~/.conan` on Linux/macOS
          path: ~/.conan
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('conanfile.py') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Cache pip modules
        id: cache-pip
        uses: actions/cache@v4
        env:
          cache-name: cache-pip-modules
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: "Install swig and cmake"
        run: sudo apt-get update && sudo apt-get install build-essential swig cmake -y
      - name: "Install python packages"
        run: sudo apt-get install python3-setuptools python3-tk python3.11-venv
      - name: "Create virtual Environment"
        run: python3 -m venv .venv
      - name: "Build basilisk"
        run: |
          source .venv/bin/activate
          pip install . -v
      - name: "Run Python Tests"
        run: |
          source .venv/bin/activate
          cd src && pytest -n auto -m "not ciSkip" --junitxml=../junit/test-results-${{ matrix.python-version }}-pip.xml
      - name: "Upload pytest test results"
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-pip-x${{ matrix.python-version }}
          path: junit/test-results-pip-${{ matrix.python-version }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

  build-windows:
    name: Build Windows
    runs-on: windows-2019
    strategy:
      matrix:
        python-version: ["3.11"]
    permissions:
      actions: read
      contents: read
      security-events: write
    env:
      MPLBACKEND: agg
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: '**/requirements.txt'
      - name: Choco help
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: -h
      - name: "Install swig and cmake"
        shell: pwsh
        run: choco install swig cmake -y
      - name: "Create python virtual env"
        shell: pwsh
        run: python -m venv venv
      - name: "Install wheel and conan package"
        shell: pwsh
        run: |
            venv\Scripts\activate
            pip install wheel 'conan<2.0' six pytest-xdist
      - name: "Add basilisk and cmake path to env path"
        shell: pwsh
        run: |
          $oldpath = (Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH).path
          $newpath = “$oldpath;${{ env.GITHUB_WORKSPACE }}\dist3\Basilisk;C:\Program Files\CMake\bin”
          Set-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH -Value $newPath
      - name: "Build basilisk"
        shell: pwsh
        run: |
          venv\Scripts\activate
          python conanfile.py
      - name: "Run Python Tests"
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name MPLBACKEND -Value ${MPLBACKEND}
          venv\Scripts\activate
          cd src
          pytest -n auto -m "not ciSkip"
          if(($LastExitCode -ne 0) -and ($LastExitCode -ne 5)) {exit 1}
      - name: "C/C++ Tests"
        shell: pwsh
        run: |
          cd dist3
          ctest
          if(($LastExitCode -ne 0) -and ($LastExitCode -ne 5)) {exit 1}

  build-macOS:
    name: Build macOS
    runs-on: macos-14
    strategy:
      matrix:
        python-version: [ "3.11" ]
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Homebrew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew install swig doxygen

      - name: "Create virtual Environment"
        run: python3 -m venv .venv
      - name: "Install wheel and conan package"
        run: |
          source .venv/bin/activate
          pip3 install wheel 'conan<2.0' cmake

      - name: "Build basilisk with OpNav"
        run: source .venv/bin/activate && python3 conanfile.py --opNav True --allOptPkg

      - name: "Run Python Tests"
        run: |
          source .venv/bin/activate
          cd src
          pytest -n auto -m "not ciSkip" --junitxml=../junit/test-results-${{ matrix.python-version }}.xml
        if: ${{ always() }}
      - name: "Run C/C++ Tests"
        working-directory: ./dist3
        run: ctest -C Release
        if: ${{ always() }}

      - name: "Build Documentation"
        run: |
          source .venv/bin/activate
          cd docs
          make html SPHINXOPTS="-W"
        if: ${{ always() }}

  build-macOS-no-vizInterface:
    name: Build macOS no vizInterface
    runs-on: macos-14
    strategy:
      matrix:
        python-version: [ "3.11" ]
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Homebrew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew install swig

      - name: "Create virtual Environment"
        run: python3 -m venv .venv
      - name: "Install wheel and conan package"
        run: |
          source .venv/bin/activate
          pip3 install wheel 'conan<2.0' cmake

      - name: "Build basilisk without vizInterface"
        run: source .venv/bin/activate && python3 conanfile.py --vizInterface False
      - name: "Run Python Tests"
        run: |
          source .venv/bin/activate
          cd src
          pytest -n auto -m "not ciSkip" --junitxml=../junit/test-results-${{ matrix.python-version }}.xml

        if: ${{ always() }}
