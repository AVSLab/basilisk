/* @MSG_AUTOSOURCE_LICENSE@ */


/* Implementation generated automatically through CMake.
 * See architecture/messaging/cMsgCInterface/CMakeLists.txt
*/

#include "@MSG_AUTOSOURCE_TYPE@_C.h"
#include "architecture/messaging/messaging.h"
#include "architecture/utilities/bsk_Print.h"
#include<string.h>

//! C interface to subscribe to a message
void @MSG_AUTOSOURCE_TYPE@_C_subscribe(@MSG_AUTOSOURCE_TYPE@_C *subscriber, @MSG_AUTOSOURCE_TYPE@_C *source) {
    subscriber->payloadPointer = &(source->payload);
    subscriber->headerPointer = &(source->header);
    subscriber->header.isLinked = 1;            // set input message as linked
    subscriber->headerPointer->isLinked = 1;        // set output message as linked
};

//! C interface to check if subscriber is indeed subscribed to a message (1: subscribed, 0: not subscribed)
int8_t @MSG_AUTOSOURCE_TYPE@_C_isSubscribedTo(@MSG_AUTOSOURCE_TYPE@_C *subscriber, @MSG_AUTOSOURCE_TYPE@_C *source) {

    return ((subscriber->payloadPointer == &(source->payload))&&(subscriber->headerPointer == &(source->header)));

};

//! C interface to claim authorship to a message
void @MSG_AUTOSOURCE_TYPE@_C_addAuthor(@MSG_AUTOSOURCE_TYPE@_C *coownerMsg, @MSG_AUTOSOURCE_TYPE@_C *targetMsg) {
    coownerMsg->payloadPointer = &(targetMsg->payload);
    coownerMsg->headerPointer = &(targetMsg->header);
};

//! C interface to initialize the module output message
void @MSG_AUTOSOURCE_TYPE@_C_init(@MSG_AUTOSOURCE_TYPE@_C *owner) {
    //! check if the msg pointer is not assigned already.  If not, then connect message to itself.
    if (owner->payloadPointer == 0) {
        @MSG_AUTOSOURCE_TYPE@_C_addAuthor(owner, owner);
    }
};

//! C interface to write to a message
void @MSG_AUTOSOURCE_TYPE@_C_write(@MSG_AUTOSOURCE_TYPE@Payload *data, @MSG_AUTOSOURCE_TYPE@_C *destination, int64_t moduleID, uint64_t callTime) {
    *destination->payloadPointer = *data;
    destination->headerPointer->isWritten = 1;
    destination->headerPointer->timeWritten = callTime;
    destination->headerPointer->moduleID = moduleID;
    return;
};

//! C interface to return a zero'd copy of the message payload
@MSG_AUTOSOURCE_TYPE@Payload @MSG_AUTOSOURCE_TYPE@_C_zeroMsgPayload() {
    @MSG_AUTOSOURCE_TYPE@Payload zeroMsg;
    memset(&zeroMsg, 0x0, sizeof(@MSG_AUTOSOURCE_TYPE@Payload));
    return zeroMsg;
};


//! C interface to read to a message
@MSG_AUTOSOURCE_TYPE@Payload @MSG_AUTOSOURCE_TYPE@_C_read(@MSG_AUTOSOURCE_TYPE@_C *source) {
    if (!source->headerPointer->isWritten) {
        BSK_PRINT(MSG_ERROR,"In C input msg, you are trying to read an un-written message of type @MSG_AUTOSOURCE_TYPE@.");
    }
    //! ensure the current message container has a copy of a subscribed message.
    //! Does nothing if the message is writing to itself
    source->payload = *source->payloadPointer;

    return *source->payloadPointer;
};

//! C interface to see if this message container has been subscribed to
int @MSG_AUTOSOURCE_TYPE@_C_isLinked(@MSG_AUTOSOURCE_TYPE@_C *data) {
    return (int) data->header.isLinked;
};

//! C interface to see if this message container ever been written to
int @MSG_AUTOSOURCE_TYPE@_C_isWritten(@MSG_AUTOSOURCE_TYPE@_C *data) {
    if (data->header.isLinked) {
        return (int) data->headerPointer->isWritten;
    }
    BSK_PRINT(MSG_ERROR,"In C input msg, you are checking if an unconnected msg of type @MSG_AUTOSOURCE_TYPE@ is written.");
    return 0;
};

//! C interface to see if this message container ever been written to
uint64_t @MSG_AUTOSOURCE_TYPE@_C_timeWritten(@MSG_AUTOSOURCE_TYPE@_C *data) {
    if (data->header.isLinked) {
        return data->headerPointer->timeWritten;
    }
    BSK_PRINT(MSG_ERROR,"In C input msg, you are requesting the write time of an unconnected msg of type @MSG_AUTOSOURCE_TYPE@.");
    return 0;
};

//! C interface to get the moduleID of who wrote the message
int64_t @MSG_AUTOSOURCE_TYPE@_C_moduleID(@MSG_AUTOSOURCE_TYPE@_C *data) {
    if (!data->header.isLinked) {
        BSK_PRINT(MSG_ERROR,"In C input msg, you are requesting moduleID of an unconnected msg of type @MSG_AUTOSOURCE_TYPE@.");
        return 0;
    }
    if (!data->headerPointer->isWritten) {
        BSK_PRINT(MSG_ERROR,"In C input msg, you are requesting moduleID of an unwritten msg of type @MSG_AUTOSOURCE_TYPE@.");
        return 0;
    }
    return data->headerPointer->moduleID;
};

//! method description
void @MSG_AUTOSOURCE_TYPE@_cpp_subscribe(@MSG_AUTOSOURCE_TYPE@_C *subscriber, void* source){
    Message<@MSG_AUTOSOURCE_TYPE@Payload>* source_t = (Message<@MSG_AUTOSOURCE_TYPE@Payload>*) source;
    MsgHeader *msgPtr;
    subscriber->payloadPointer = source_t->subscribeRaw(&(msgPtr));
    subscriber->headerPointer = msgPtr;
    subscriber->header.isLinked = 1;    // set input message as linked
    subscriber->headerPointer->isLinked = 1;    // set output message as linked
};

//! This method takes an address location as an integer, reinterprets it to be an object, and calls the CPP subscribe method from there
void @MSG_AUTOSOURCE_TYPE@_addr_subscribe(@MSG_AUTOSOURCE_TYPE@_C *subscriber, uint64_t sourceAddr){
    void *source = reinterpret_cast<void *> (sourceAddr);
    @MSG_AUTOSOURCE_TYPE@_cpp_subscribe(subscriber, source);
};

//! Cpp interface to check if subscriber is indeed subscribed to a message (1: subscribed, 0: not subscribed)
int8_t @MSG_AUTOSOURCE_TYPE@_cpp_isSubscribedTo(@MSG_AUTOSOURCE_TYPE@_C *subscriber, void* source) {

    MsgHeader *dummyMsgPtr;
    Message<@MSG_AUTOSOURCE_TYPE@Payload>* source_t = (Message<@MSG_AUTOSOURCE_TYPE@Payload>*) source;
    int8_t firstCheck = (subscriber->payloadPointer == source_t->getMsgPointers(&(dummyMsgPtr)));
    int8_t secondCheck = (subscriber->headerPointer == dummyMsgPtr);

    return (firstCheck && secondCheck);

};

//! Cpp interface to check if subscriber is indeed subscribed to a message-address (1: subscribed, 0: not subscribed)
int8_t @MSG_AUTOSOURCE_TYPE@_cpp_isSubscribedToAddr(@MSG_AUTOSOURCE_TYPE@_C *subscriber, uint64_t sourceAddr) {

    void *source = reinterpret_cast<void*> (sourceAddr);
    return (@MSG_AUTOSOURCE_TYPE@_cpp_isSubscribedTo(subscriber, source));

};
