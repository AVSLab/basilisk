// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vizMessage.proto

#include "vizMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace vizProtobufferMessage {
class VizMessage_TimeStampDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_TimeStamp>
      _instance;
} _VizMessage_TimeStamp_default_instance_;
class VizMessage_CelestialBodyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_CelestialBody>
      _instance;
} _VizMessage_CelestialBody_default_instance_;
class VizMessage_SpacecraftDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_Spacecraft>
      _instance;
} _VizMessage_Spacecraft_default_instance_;
class VizMessage_ReactionWheelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_ReactionWheel>
      _instance;
} _VizMessage_ReactionWheel_default_instance_;
class VizMessage_ThrusterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_Thruster>
      _instance;
} _VizMessage_Thruster_default_instance_;
class VizMessage_CoarseSunSensorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_CoarseSunSensor>
      _instance;
} _VizMessage_CoarseSunSensor_default_instance_;
class VizMessage_StarTrackerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_StarTracker>
      _instance;
} _VizMessage_StarTracker_default_instance_;
class VizMessage_CameraConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_CameraConfig>
      _instance;
} _VizMessage_CameraConfig_default_instance_;
class VizMessage_CameraImageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_CameraImage>
      _instance;
} _VizMessage_CameraImage_default_instance_;
class VizMessage_ImageRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_ImageRequest>
      _instance;
} _VizMessage_ImageRequest_default_instance_;
class VizMessage_VizSettingsPbDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_VizSettingsPb>
      _instance;
} _VizMessage_VizSettingsPb_default_instance_;
class VizMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage>
      _instance;
} _VizMessage_default_instance_;
}  // namespace vizProtobufferMessage
namespace protobuf_vizMessage_2eproto {
void InitDefaultsVizMessage_TimeStampImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_TimeStamp_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_TimeStamp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_TimeStamp::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_TimeStamp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_TimeStampImpl);
}

void InitDefaultsVizMessage_CelestialBodyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_CelestialBody_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_CelestialBody();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_CelestialBody::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_CelestialBody() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_CelestialBodyImpl);
}

void InitDefaultsVizMessage_SpacecraftImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_ReactionWheel();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_Thruster();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CoarseSunSensor();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_StarTracker();
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_Spacecraft_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_Spacecraft();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_Spacecraft::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_Spacecraft() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_SpacecraftImpl);
}

void InitDefaultsVizMessage_ReactionWheelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_ReactionWheel_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_ReactionWheel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_ReactionWheel::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_ReactionWheel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_ReactionWheelImpl);
}

void InitDefaultsVizMessage_ThrusterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_Thruster_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_Thruster();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_Thruster::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_Thruster() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_ThrusterImpl);
}

void InitDefaultsVizMessage_CoarseSunSensorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_CoarseSunSensor_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_CoarseSunSensor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_CoarseSunSensor::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_CoarseSunSensor() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_CoarseSunSensorImpl);
}

void InitDefaultsVizMessage_StarTrackerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_StarTracker_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_StarTracker();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_StarTracker::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_StarTracker() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_StarTrackerImpl);
}

void InitDefaultsVizMessage_CameraConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_CameraConfig_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_CameraConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_CameraConfig::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_CameraConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_CameraConfigImpl);
}

void InitDefaultsVizMessage_CameraImageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_CameraImage_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_CameraImage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_CameraImage::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_CameraImage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_CameraImageImpl);
}

void InitDefaultsVizMessage_ImageRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_ImageRequest_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_ImageRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_ImageRequest::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_ImageRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_ImageRequestImpl);
}

void InitDefaultsVizMessage_VizSettingsPbImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_VizSettingsPb_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_VizSettingsPb();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_VizSettingsPb::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_VizSettingsPb() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_VizSettingsPbImpl);
}

void InitDefaultsVizMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_TimeStamp();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CelestialBody();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_Spacecraft();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CameraConfig();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CameraImage();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_ImageRequest();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_VizSettingsPb();
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage::InitAsDefaultInstance();
}

void InitDefaultsVizMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessageImpl);
}

::google::protobuf::Metadata file_level_metadata[12];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_TimeStamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_TimeStamp, framenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_TimeStamp, simtimeelapsed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CelestialBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CelestialBody, bodyname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CelestialBody, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CelestialBody, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CelestialBody, rotation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, spacecraftname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, reactionwheels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, thrusters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, css_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, startrackers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ReactionWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ReactionWheel, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ReactionWheel, spinaxisvector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ReactionWheel, wheelspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ReactionWheel, wheeltorque_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Thruster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Thruster, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Thruster, thrustvector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Thruster, currentthrust_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Thruster, maxthrust_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Thruster, thrustergroupid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CoarseSunSensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CoarseSunSensor, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CoarseSunSensor, normalvector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CoarseSunSensor, currentmsmt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CoarseSunSensor, cssgroupid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StarTracker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StarTracker, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StarTracker, rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StarTracker, fieldofviewheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StarTracker, fieldofviewwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StarTracker, startrackergroupid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, cameraid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, parentname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, fieldofview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, focallength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, sensorsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, camerapos_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, cameradir_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, renderrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, skyboxfilepath_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraImage, cameraid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraImage, timetag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraImage, imagefilename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraImage, imagefile_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ImageRequest, cameraid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ImageRequest, timetag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, ambient_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, currenttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, celestialbodies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, spacecraft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, cameras_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, cameraimages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, imagerequests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, settings_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vizProtobufferMessage::VizMessage_TimeStamp)},
  { 7, -1, sizeof(::vizProtobufferMessage::VizMessage_CelestialBody)},
  { 16, -1, sizeof(::vizProtobufferMessage::VizMessage_Spacecraft)},
  { 29, -1, sizeof(::vizProtobufferMessage::VizMessage_ReactionWheel)},
  { 38, -1, sizeof(::vizProtobufferMessage::VizMessage_Thruster)},
  { 48, -1, sizeof(::vizProtobufferMessage::VizMessage_CoarseSunSensor)},
  { 57, -1, sizeof(::vizProtobufferMessage::VizMessage_StarTracker)},
  { 67, -1, sizeof(::vizProtobufferMessage::VizMessage_CameraConfig)},
  { 82, -1, sizeof(::vizProtobufferMessage::VizMessage_CameraImage)},
  { 91, -1, sizeof(::vizProtobufferMessage::VizMessage_ImageRequest)},
  { 98, -1, sizeof(::vizProtobufferMessage::VizMessage_VizSettingsPb)},
  { 104, -1, sizeof(::vizProtobufferMessage::VizMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_TimeStamp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_CelestialBody_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_Spacecraft_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_ReactionWheel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_Thruster_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_CoarseSunSensor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_StarTracker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_CameraConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_CameraImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_ImageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_VizSettingsPb_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "vizMessage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020vizMessage.proto\022\025vizProtobufferMessag"
      "e\"\273\016\n\nVizMessage\022@\n\013currentTime\030\001 \001(\0132+."
      "vizProtobufferMessage.VizMessage.TimeSta"
      "mp\022H\n\017celestialBodies\030\002 \003(\0132/.vizProtobu"
      "fferMessage.VizMessage.CelestialBody\022@\n\n"
      "spacecraft\030\003 \003(\0132,.vizProtobufferMessage"
      ".VizMessage.Spacecraft\022\?\n\007cameras\030\004 \003(\0132"
      "..vizProtobufferMessage.VizMessage.Camer"
      "aConfig\022C\n\014cameraImages\030\005 \003(\0132-.vizProto"
      "bufferMessage.VizMessage.CameraImage\022E\n\r"
      "imageRequests\030\006 \003(\0132..vizProtobufferMess"
      "age.VizMessage.ImageRequest\022A\n\010settings\030"
      "\007 \001(\0132/.vizProtobufferMessage.VizMessage"
      ".VizSettingsPb\0328\n\tTimeStamp\022\023\n\013frameNumb"
      "er\030\001 \001(\003\022\026\n\016simTimeElapsed\030\002 \001(\001\032W\n\rCele"
      "stialBody\022\020\n\010bodyName\030\001 \001(\t\022\020\n\010position\030"
      "\002 \003(\001\022\020\n\010velocity\030\003 \003(\001\022\020\n\010rotation\030\004 \003("
      "\001\032\347\002\n\nSpacecraft\022\026\n\016spacecraftName\030\001 \001(\t"
      "\022\020\n\010position\030\002 \003(\001\022\020\n\010velocity\030\003 \003(\001\022\020\n\010"
      "rotation\030\004 \003(\001\022G\n\016reactionWheels\030\005 \003(\0132/"
      ".vizProtobufferMessage.VizMessage.Reacti"
      "onWheel\022=\n\tthrusters\030\006 \003(\0132*.vizProtobuf"
      "ferMessage.VizMessage.Thruster\022>\n\003CSS\030\007 "
      "\003(\01321.vizProtobufferMessage.VizMessage.C"
      "oarseSunSensor\022C\n\014starTrackers\030\010 \003(\0132-.v"
      "izProtobufferMessage.VizMessage.StarTrac"
      "ker\032b\n\rReactionWheel\022\020\n\010position\030\002 \003(\001\022\026"
      "\n\016spinAxisVector\030\004 \003(\001\022\022\n\nwheelSpeed\030\005 \001"
      "(\001\022\023\n\013wheelTorque\030\006 \001(\001\032u\n\010Thruster\022\020\n\010p"
      "osition\030\002 \003(\001\022\024\n\014thrustVector\030\004 \003(\001\022\025\n\rc"
      "urrentThrust\030\005 \001(\001\022\021\n\tmaxThrust\030\006 \001(\001\022\027\n"
      "\017thrusterGroupID\030\007 \001(\005\032b\n\017CoarseSunSenso"
      "r\022\020\n\010position\030\002 \003(\001\022\024\n\014normalVector\030\004 \003("
      "\001\022\023\n\013currentMsmt\030\005 \001(\001\022\022\n\nCSSGroupID\030\007 \001"
      "(\005\032\202\001\n\013StarTracker\022\020\n\010position\030\002 \003(\001\022\020\n\010"
      "rotation\030\004 \003(\001\022\031\n\021fieldOfViewHeight\030\005 \001("
      "\001\022\030\n\020fieldOfViewWidth\030\006 \001(\001\022\032\n\022starTrack"
      "erGroupID\030\007 \001(\005\032\334\001\n\014CameraConfig\022\020\n\010came"
      "raID\030\001 \001(\003\022\022\n\nparentName\030\002 \001(\t\022\023\n\013fieldO"
      "fView\030\003 \001(\001\022\022\n\nresolution\030\004 \003(\003\022\023\n\013focal"
      "Length\030\005 \001(\001\022\022\n\nsensorSize\030\006 \003(\001\022\023\n\013came"
      "raPos_B\030\007 \003(\001\022\023\n\013cameraDir_B\030\010 \003(\001\022\022\n\nre"
      "nderRate\030\t \001(\004\022\026\n\016skyBoxFilepath\030\n \001(\t\032Z"
      "\n\013CameraImage\022\020\n\010cameraID\030\001 \001(\003\022\017\n\007timeT"
      "ag\030\002 \001(\001\022\025\n\rimageFileName\030\003 \001(\t\022\021\n\timage"
      "File\030\004 \003(\r\0321\n\014ImageRequest\022\020\n\010cameraID\030\001"
      " \001(\003\022\017\n\007timeTag\030\002 \001(\001\032 \n\rVizSettingsPb\022\017"
      "\n\007ambient\030\001 \001(\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1903);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vizMessage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_vizMessage_2eproto
namespace vizProtobufferMessage {

// ===================================================================

void VizMessage_TimeStamp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_TimeStamp::kFrameNumberFieldNumber;
const int VizMessage_TimeStamp::kSimTimeElapsedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_TimeStamp::VizMessage_TimeStamp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_TimeStamp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.TimeStamp)
}
VizMessage_TimeStamp::VizMessage_TimeStamp(const VizMessage_TimeStamp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&framenumber_, &from.framenumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&simtimeelapsed_) -
    reinterpret_cast<char*>(&framenumber_)) + sizeof(simtimeelapsed_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.TimeStamp)
}

void VizMessage_TimeStamp::SharedCtor() {
  ::memset(&framenumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&simtimeelapsed_) -
      reinterpret_cast<char*>(&framenumber_)) + sizeof(simtimeelapsed_));
  _cached_size_ = 0;
}

VizMessage_TimeStamp::~VizMessage_TimeStamp() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.TimeStamp)
  SharedDtor();
}

void VizMessage_TimeStamp::SharedDtor() {
}

void VizMessage_TimeStamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_TimeStamp::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_TimeStamp& VizMessage_TimeStamp::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_TimeStamp();
  return *internal_default_instance();
}

VizMessage_TimeStamp* VizMessage_TimeStamp::New(::google::protobuf::Arena* arena) const {
  VizMessage_TimeStamp* n = new VizMessage_TimeStamp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_TimeStamp::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.TimeStamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&framenumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&simtimeelapsed_) -
      reinterpret_cast<char*>(&framenumber_)) + sizeof(simtimeelapsed_));
  _internal_metadata_.Clear();
}

bool VizMessage_TimeStamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.TimeStamp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 frameNumber = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &framenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double simTimeElapsed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &simtimeelapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.TimeStamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.TimeStamp)
  return false;
#undef DO_
}

void VizMessage_TimeStamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.TimeStamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frameNumber = 1;
  if (this->framenumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->framenumber(), output);
  }

  // double simTimeElapsed = 2;
  if (this->simtimeelapsed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->simtimeelapsed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.TimeStamp)
}

::google::protobuf::uint8* VizMessage_TimeStamp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.TimeStamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frameNumber = 1;
  if (this->framenumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->framenumber(), target);
  }

  // double simTimeElapsed = 2;
  if (this->simtimeelapsed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->simtimeelapsed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.TimeStamp)
  return target;
}

size_t VizMessage_TimeStamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.TimeStamp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 frameNumber = 1;
  if (this->framenumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->framenumber());
  }

  // double simTimeElapsed = 2;
  if (this->simtimeelapsed() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_TimeStamp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_TimeStamp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_TimeStamp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.TimeStamp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.TimeStamp)
    MergeFrom(*source);
  }
}

void VizMessage_TimeStamp::MergeFrom(const VizMessage_TimeStamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.framenumber() != 0) {
    set_framenumber(from.framenumber());
  }
  if (from.simtimeelapsed() != 0) {
    set_simtimeelapsed(from.simtimeelapsed());
  }
}

void VizMessage_TimeStamp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_TimeStamp::CopyFrom(const VizMessage_TimeStamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_TimeStamp::IsInitialized() const {
  return true;
}

void VizMessage_TimeStamp::Swap(VizMessage_TimeStamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_TimeStamp::InternalSwap(VizMessage_TimeStamp* other) {
  using std::swap;
  swap(framenumber_, other->framenumber_);
  swap(simtimeelapsed_, other->simtimeelapsed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_TimeStamp::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_CelestialBody::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_CelestialBody::kBodyNameFieldNumber;
const int VizMessage_CelestialBody::kPositionFieldNumber;
const int VizMessage_CelestialBody::kVelocityFieldNumber;
const int VizMessage_CelestialBody::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_CelestialBody::VizMessage_CelestialBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CelestialBody();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.CelestialBody)
}
VizMessage_CelestialBody::VizMessage_CelestialBody(const VizMessage_CelestialBody& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      position_(from.position_),
      velocity_(from.velocity_),
      rotation_(from.rotation_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bodyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bodyname().size() > 0) {
    bodyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bodyname_);
  }
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.CelestialBody)
}

void VizMessage_CelestialBody::SharedCtor() {
  bodyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

VizMessage_CelestialBody::~VizMessage_CelestialBody() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.CelestialBody)
  SharedDtor();
}

void VizMessage_CelestialBody::SharedDtor() {
  bodyname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_CelestialBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_CelestialBody::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_CelestialBody& VizMessage_CelestialBody::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CelestialBody();
  return *internal_default_instance();
}

VizMessage_CelestialBody* VizMessage_CelestialBody::New(::google::protobuf::Arena* arena) const {
  VizMessage_CelestialBody* n = new VizMessage_CelestialBody;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_CelestialBody::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.CelestialBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  velocity_.Clear();
  rotation_.Clear();
  bodyname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool VizMessage_CelestialBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.CelestialBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bodyName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bodyname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bodyname().data(), static_cast<int>(this->bodyname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.CelestialBody.bodyName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_velocity())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_velocity())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double rotation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_rotation())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_rotation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.CelestialBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.CelestialBody)
  return false;
#undef DO_
}

void VizMessage_CelestialBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.CelestialBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bodyName = 1;
  if (this->bodyname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bodyname().data(), static_cast<int>(this->bodyname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CelestialBody.bodyName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bodyname(), output);
  }

  // repeated double position = 2;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _position_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->position().data(), this->position_size(), output);
  }

  // repeated double velocity = 3;
  if (this->velocity_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _velocity_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->velocity().data(), this->velocity_size(), output);
  }

  // repeated double rotation = 4;
  if (this->rotation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _rotation_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->rotation().data(), this->rotation_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.CelestialBody)
}

::google::protobuf::uint8* VizMessage_CelestialBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.CelestialBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bodyName = 1;
  if (this->bodyname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bodyname().data(), static_cast<int>(this->bodyname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CelestialBody.bodyName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bodyname(), target);
  }

  // repeated double position = 2;
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _position_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position_, target);
  }

  // repeated double velocity = 3;
  if (this->velocity_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _velocity_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->velocity_, target);
  }

  // repeated double rotation = 4;
  if (this->rotation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _rotation_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->rotation_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.CelestialBody)
  return target;
}

size_t VizMessage_CelestialBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.CelestialBody)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double velocity = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->velocity_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _velocity_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double rotation = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->rotation_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rotation_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string bodyName = 1;
  if (this->bodyname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bodyname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_CelestialBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.CelestialBody)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_CelestialBody* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_CelestialBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.CelestialBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.CelestialBody)
    MergeFrom(*source);
  }
}

void VizMessage_CelestialBody::MergeFrom(const VizMessage_CelestialBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.CelestialBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  velocity_.MergeFrom(from.velocity_);
  rotation_.MergeFrom(from.rotation_);
  if (from.bodyname().size() > 0) {

    bodyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bodyname_);
  }
}

void VizMessage_CelestialBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.CelestialBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_CelestialBody::CopyFrom(const VizMessage_CelestialBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.CelestialBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_CelestialBody::IsInitialized() const {
  return true;
}

void VizMessage_CelestialBody::Swap(VizMessage_CelestialBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_CelestialBody::InternalSwap(VizMessage_CelestialBody* other) {
  using std::swap;
  position_.InternalSwap(&other->position_);
  velocity_.InternalSwap(&other->velocity_);
  rotation_.InternalSwap(&other->rotation_);
  bodyname_.Swap(&other->bodyname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_CelestialBody::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_Spacecraft::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_Spacecraft::kSpacecraftNameFieldNumber;
const int VizMessage_Spacecraft::kPositionFieldNumber;
const int VizMessage_Spacecraft::kVelocityFieldNumber;
const int VizMessage_Spacecraft::kRotationFieldNumber;
const int VizMessage_Spacecraft::kReactionWheelsFieldNumber;
const int VizMessage_Spacecraft::kThrustersFieldNumber;
const int VizMessage_Spacecraft::kCSSFieldNumber;
const int VizMessage_Spacecraft::kStarTrackersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_Spacecraft::VizMessage_Spacecraft()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_Spacecraft();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.Spacecraft)
}
VizMessage_Spacecraft::VizMessage_Spacecraft(const VizMessage_Spacecraft& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      position_(from.position_),
      velocity_(from.velocity_),
      rotation_(from.rotation_),
      reactionwheels_(from.reactionwheels_),
      thrusters_(from.thrusters_),
      css_(from.css_),
      startrackers_(from.startrackers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spacecraftname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.spacecraftname().size() > 0) {
    spacecraftname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spacecraftname_);
  }
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.Spacecraft)
}

void VizMessage_Spacecraft::SharedCtor() {
  spacecraftname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

VizMessage_Spacecraft::~VizMessage_Spacecraft() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.Spacecraft)
  SharedDtor();
}

void VizMessage_Spacecraft::SharedDtor() {
  spacecraftname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_Spacecraft::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_Spacecraft::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_Spacecraft& VizMessage_Spacecraft::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_Spacecraft();
  return *internal_default_instance();
}

VizMessage_Spacecraft* VizMessage_Spacecraft::New(::google::protobuf::Arena* arena) const {
  VizMessage_Spacecraft* n = new VizMessage_Spacecraft;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_Spacecraft::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.Spacecraft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  velocity_.Clear();
  rotation_.Clear();
  reactionwheels_.Clear();
  thrusters_.Clear();
  css_.Clear();
  startrackers_.Clear();
  spacecraftname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool VizMessage_Spacecraft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.Spacecraft)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string spacecraftName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spacecraftname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->spacecraftname().data(), static_cast<int>(this->spacecraftname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_velocity())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_velocity())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double rotation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_rotation())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_rotation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vizProtobufferMessage.VizMessage.ReactionWheel reactionWheels = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_reactionwheels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vizProtobufferMessage.VizMessage.Thruster thrusters = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_thrusters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vizProtobufferMessage.VizMessage.CoarseSunSensor CSS = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_css()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vizProtobufferMessage.VizMessage.StarTracker starTrackers = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_startrackers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.Spacecraft)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.Spacecraft)
  return false;
#undef DO_
}

void VizMessage_Spacecraft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.Spacecraft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spacecraftName = 1;
  if (this->spacecraftname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spacecraftname().data(), static_cast<int>(this->spacecraftname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->spacecraftname(), output);
  }

  // repeated double position = 2;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _position_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->position().data(), this->position_size(), output);
  }

  // repeated double velocity = 3;
  if (this->velocity_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _velocity_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->velocity().data(), this->velocity_size(), output);
  }

  // repeated double rotation = 4;
  if (this->rotation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _rotation_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->rotation().data(), this->rotation_size(), output);
  }

  // repeated .vizProtobufferMessage.VizMessage.ReactionWheel reactionWheels = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reactionwheels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reactionwheels(static_cast<int>(i)), output);
  }

  // repeated .vizProtobufferMessage.VizMessage.Thruster thrusters = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->thrusters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->thrusters(static_cast<int>(i)), output);
  }

  // repeated .vizProtobufferMessage.VizMessage.CoarseSunSensor CSS = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->css_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->css(static_cast<int>(i)), output);
  }

  // repeated .vizProtobufferMessage.VizMessage.StarTracker starTrackers = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->startrackers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->startrackers(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.Spacecraft)
}

::google::protobuf::uint8* VizMessage_Spacecraft::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.Spacecraft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spacecraftName = 1;
  if (this->spacecraftname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spacecraftname().data(), static_cast<int>(this->spacecraftname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->spacecraftname(), target);
  }

  // repeated double position = 2;
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _position_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position_, target);
  }

  // repeated double velocity = 3;
  if (this->velocity_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _velocity_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->velocity_, target);
  }

  // repeated double rotation = 4;
  if (this->rotation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _rotation_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->rotation_, target);
  }

  // repeated .vizProtobufferMessage.VizMessage.ReactionWheel reactionWheels = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reactionwheels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->reactionwheels(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vizProtobufferMessage.VizMessage.Thruster thrusters = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->thrusters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->thrusters(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vizProtobufferMessage.VizMessage.CoarseSunSensor CSS = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->css_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->css(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vizProtobufferMessage.VizMessage.StarTracker starTrackers = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->startrackers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->startrackers(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.Spacecraft)
  return target;
}

size_t VizMessage_Spacecraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.Spacecraft)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double velocity = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->velocity_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _velocity_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double rotation = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->rotation_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rotation_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .vizProtobufferMessage.VizMessage.ReactionWheel reactionWheels = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->reactionwheels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->reactionwheels(static_cast<int>(i)));
    }
  }

  // repeated .vizProtobufferMessage.VizMessage.Thruster thrusters = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->thrusters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->thrusters(static_cast<int>(i)));
    }
  }

  // repeated .vizProtobufferMessage.VizMessage.CoarseSunSensor CSS = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->css_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->css(static_cast<int>(i)));
    }
  }

  // repeated .vizProtobufferMessage.VizMessage.StarTracker starTrackers = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->startrackers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->startrackers(static_cast<int>(i)));
    }
  }

  // string spacecraftName = 1;
  if (this->spacecraftname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->spacecraftname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_Spacecraft::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.Spacecraft)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_Spacecraft* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_Spacecraft>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.Spacecraft)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.Spacecraft)
    MergeFrom(*source);
  }
}

void VizMessage_Spacecraft::MergeFrom(const VizMessage_Spacecraft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.Spacecraft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  velocity_.MergeFrom(from.velocity_);
  rotation_.MergeFrom(from.rotation_);
  reactionwheels_.MergeFrom(from.reactionwheels_);
  thrusters_.MergeFrom(from.thrusters_);
  css_.MergeFrom(from.css_);
  startrackers_.MergeFrom(from.startrackers_);
  if (from.spacecraftname().size() > 0) {

    spacecraftname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spacecraftname_);
  }
}

void VizMessage_Spacecraft::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.Spacecraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_Spacecraft::CopyFrom(const VizMessage_Spacecraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.Spacecraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_Spacecraft::IsInitialized() const {
  return true;
}

void VizMessage_Spacecraft::Swap(VizMessage_Spacecraft* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_Spacecraft::InternalSwap(VizMessage_Spacecraft* other) {
  using std::swap;
  position_.InternalSwap(&other->position_);
  velocity_.InternalSwap(&other->velocity_);
  rotation_.InternalSwap(&other->rotation_);
  reactionwheels_.InternalSwap(&other->reactionwheels_);
  thrusters_.InternalSwap(&other->thrusters_);
  css_.InternalSwap(&other->css_);
  startrackers_.InternalSwap(&other->startrackers_);
  spacecraftname_.Swap(&other->spacecraftname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_Spacecraft::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_ReactionWheel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_ReactionWheel::kPositionFieldNumber;
const int VizMessage_ReactionWheel::kSpinAxisVectorFieldNumber;
const int VizMessage_ReactionWheel::kWheelSpeedFieldNumber;
const int VizMessage_ReactionWheel::kWheelTorqueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_ReactionWheel::VizMessage_ReactionWheel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_ReactionWheel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.ReactionWheel)
}
VizMessage_ReactionWheel::VizMessage_ReactionWheel(const VizMessage_ReactionWheel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      position_(from.position_),
      spinaxisvector_(from.spinaxisvector_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wheelspeed_, &from.wheelspeed_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheeltorque_) -
    reinterpret_cast<char*>(&wheelspeed_)) + sizeof(wheeltorque_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.ReactionWheel)
}

void VizMessage_ReactionWheel::SharedCtor() {
  ::memset(&wheelspeed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheeltorque_) -
      reinterpret_cast<char*>(&wheelspeed_)) + sizeof(wheeltorque_));
  _cached_size_ = 0;
}

VizMessage_ReactionWheel::~VizMessage_ReactionWheel() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.ReactionWheel)
  SharedDtor();
}

void VizMessage_ReactionWheel::SharedDtor() {
}

void VizMessage_ReactionWheel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_ReactionWheel::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_ReactionWheel& VizMessage_ReactionWheel::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_ReactionWheel();
  return *internal_default_instance();
}

VizMessage_ReactionWheel* VizMessage_ReactionWheel::New(::google::protobuf::Arena* arena) const {
  VizMessage_ReactionWheel* n = new VizMessage_ReactionWheel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_ReactionWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  spinaxisvector_.Clear();
  ::memset(&wheelspeed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheeltorque_) -
      reinterpret_cast<char*>(&wheelspeed_)) + sizeof(wheeltorque_));
  _internal_metadata_.Clear();
}

bool VizMessage_ReactionWheel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double spinAxisVector = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_spinaxisvector())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_spinaxisvector())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wheelSpeed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheelspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wheelTorque = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheeltorque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.ReactionWheel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.ReactionWheel)
  return false;
#undef DO_
}

void VizMessage_ReactionWheel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _position_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->position().data(), this->position_size(), output);
  }

  // repeated double spinAxisVector = 4;
  if (this->spinaxisvector_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _spinaxisvector_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->spinaxisvector().data(), this->spinaxisvector_size(), output);
  }

  // double wheelSpeed = 5;
  if (this->wheelspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->wheelspeed(), output);
  }

  // double wheelTorque = 6;
  if (this->wheeltorque() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->wheeltorque(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.ReactionWheel)
}

::google::protobuf::uint8* VizMessage_ReactionWheel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _position_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position_, target);
  }

  // repeated double spinAxisVector = 4;
  if (this->spinaxisvector_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _spinaxisvector_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->spinaxisvector_, target);
  }

  // double wheelSpeed = 5;
  if (this->wheelspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->wheelspeed(), target);
  }

  // double wheelTorque = 6;
  if (this->wheeltorque() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->wheeltorque(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.ReactionWheel)
  return target;
}

size_t VizMessage_ReactionWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double spinAxisVector = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->spinaxisvector_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _spinaxisvector_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // double wheelSpeed = 5;
  if (this->wheelspeed() != 0) {
    total_size += 1 + 8;
  }

  // double wheelTorque = 6;
  if (this->wheeltorque() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_ReactionWheel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_ReactionWheel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_ReactionWheel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.ReactionWheel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.ReactionWheel)
    MergeFrom(*source);
  }
}

void VizMessage_ReactionWheel::MergeFrom(const VizMessage_ReactionWheel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  spinaxisvector_.MergeFrom(from.spinaxisvector_);
  if (from.wheelspeed() != 0) {
    set_wheelspeed(from.wheelspeed());
  }
  if (from.wheeltorque() != 0) {
    set_wheeltorque(from.wheeltorque());
  }
}

void VizMessage_ReactionWheel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_ReactionWheel::CopyFrom(const VizMessage_ReactionWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_ReactionWheel::IsInitialized() const {
  return true;
}

void VizMessage_ReactionWheel::Swap(VizMessage_ReactionWheel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_ReactionWheel::InternalSwap(VizMessage_ReactionWheel* other) {
  using std::swap;
  position_.InternalSwap(&other->position_);
  spinaxisvector_.InternalSwap(&other->spinaxisvector_);
  swap(wheelspeed_, other->wheelspeed_);
  swap(wheeltorque_, other->wheeltorque_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_ReactionWheel::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_Thruster::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_Thruster::kPositionFieldNumber;
const int VizMessage_Thruster::kThrustVectorFieldNumber;
const int VizMessage_Thruster::kCurrentThrustFieldNumber;
const int VizMessage_Thruster::kMaxThrustFieldNumber;
const int VizMessage_Thruster::kThrusterGroupIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_Thruster::VizMessage_Thruster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_Thruster();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.Thruster)
}
VizMessage_Thruster::VizMessage_Thruster(const VizMessage_Thruster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      position_(from.position_),
      thrustvector_(from.thrustvector_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&currentthrust_, &from.currentthrust_,
    static_cast<size_t>(reinterpret_cast<char*>(&thrustergroupid_) -
    reinterpret_cast<char*>(&currentthrust_)) + sizeof(thrustergroupid_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.Thruster)
}

void VizMessage_Thruster::SharedCtor() {
  ::memset(&currentthrust_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thrustergroupid_) -
      reinterpret_cast<char*>(&currentthrust_)) + sizeof(thrustergroupid_));
  _cached_size_ = 0;
}

VizMessage_Thruster::~VizMessage_Thruster() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.Thruster)
  SharedDtor();
}

void VizMessage_Thruster::SharedDtor() {
}

void VizMessage_Thruster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_Thruster::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_Thruster& VizMessage_Thruster::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_Thruster();
  return *internal_default_instance();
}

VizMessage_Thruster* VizMessage_Thruster::New(::google::protobuf::Arena* arena) const {
  VizMessage_Thruster* n = new VizMessage_Thruster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_Thruster::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.Thruster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  thrustvector_.Clear();
  ::memset(&currentthrust_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thrustergroupid_) -
      reinterpret_cast<char*>(&currentthrust_)) + sizeof(thrustergroupid_));
  _internal_metadata_.Clear();
}

bool VizMessage_Thruster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.Thruster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double thrustVector = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_thrustvector())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_thrustvector())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double currentThrust = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currentthrust_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double maxThrust = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxthrust_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 thrusterGroupID = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thrustergroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.Thruster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.Thruster)
  return false;
#undef DO_
}

void VizMessage_Thruster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.Thruster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _position_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->position().data(), this->position_size(), output);
  }

  // repeated double thrustVector = 4;
  if (this->thrustvector_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _thrustvector_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->thrustvector().data(), this->thrustvector_size(), output);
  }

  // double currentThrust = 5;
  if (this->currentthrust() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->currentthrust(), output);
  }

  // double maxThrust = 6;
  if (this->maxthrust() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->maxthrust(), output);
  }

  // int32 thrusterGroupID = 7;
  if (this->thrustergroupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->thrustergroupid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.Thruster)
}

::google::protobuf::uint8* VizMessage_Thruster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.Thruster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _position_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position_, target);
  }

  // repeated double thrustVector = 4;
  if (this->thrustvector_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _thrustvector_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->thrustvector_, target);
  }

  // double currentThrust = 5;
  if (this->currentthrust() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->currentthrust(), target);
  }

  // double maxThrust = 6;
  if (this->maxthrust() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->maxthrust(), target);
  }

  // int32 thrusterGroupID = 7;
  if (this->thrustergroupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->thrustergroupid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.Thruster)
  return target;
}

size_t VizMessage_Thruster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.Thruster)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double thrustVector = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->thrustvector_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _thrustvector_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // double currentThrust = 5;
  if (this->currentthrust() != 0) {
    total_size += 1 + 8;
  }

  // double maxThrust = 6;
  if (this->maxthrust() != 0) {
    total_size += 1 + 8;
  }

  // int32 thrusterGroupID = 7;
  if (this->thrustergroupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thrustergroupid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_Thruster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.Thruster)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_Thruster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_Thruster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.Thruster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.Thruster)
    MergeFrom(*source);
  }
}

void VizMessage_Thruster::MergeFrom(const VizMessage_Thruster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.Thruster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  thrustvector_.MergeFrom(from.thrustvector_);
  if (from.currentthrust() != 0) {
    set_currentthrust(from.currentthrust());
  }
  if (from.maxthrust() != 0) {
    set_maxthrust(from.maxthrust());
  }
  if (from.thrustergroupid() != 0) {
    set_thrustergroupid(from.thrustergroupid());
  }
}

void VizMessage_Thruster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.Thruster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_Thruster::CopyFrom(const VizMessage_Thruster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.Thruster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_Thruster::IsInitialized() const {
  return true;
}

void VizMessage_Thruster::Swap(VizMessage_Thruster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_Thruster::InternalSwap(VizMessage_Thruster* other) {
  using std::swap;
  position_.InternalSwap(&other->position_);
  thrustvector_.InternalSwap(&other->thrustvector_);
  swap(currentthrust_, other->currentthrust_);
  swap(maxthrust_, other->maxthrust_);
  swap(thrustergroupid_, other->thrustergroupid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_Thruster::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_CoarseSunSensor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_CoarseSunSensor::kPositionFieldNumber;
const int VizMessage_CoarseSunSensor::kNormalVectorFieldNumber;
const int VizMessage_CoarseSunSensor::kCurrentMsmtFieldNumber;
const int VizMessage_CoarseSunSensor::kCSSGroupIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_CoarseSunSensor::VizMessage_CoarseSunSensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CoarseSunSensor();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.CoarseSunSensor)
}
VizMessage_CoarseSunSensor::VizMessage_CoarseSunSensor(const VizMessage_CoarseSunSensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      position_(from.position_),
      normalvector_(from.normalvector_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&currentmsmt_, &from.currentmsmt_,
    static_cast<size_t>(reinterpret_cast<char*>(&cssgroupid_) -
    reinterpret_cast<char*>(&currentmsmt_)) + sizeof(cssgroupid_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.CoarseSunSensor)
}

void VizMessage_CoarseSunSensor::SharedCtor() {
  ::memset(&currentmsmt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cssgroupid_) -
      reinterpret_cast<char*>(&currentmsmt_)) + sizeof(cssgroupid_));
  _cached_size_ = 0;
}

VizMessage_CoarseSunSensor::~VizMessage_CoarseSunSensor() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  SharedDtor();
}

void VizMessage_CoarseSunSensor::SharedDtor() {
}

void VizMessage_CoarseSunSensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_CoarseSunSensor::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_CoarseSunSensor& VizMessage_CoarseSunSensor::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CoarseSunSensor();
  return *internal_default_instance();
}

VizMessage_CoarseSunSensor* VizMessage_CoarseSunSensor::New(::google::protobuf::Arena* arena) const {
  VizMessage_CoarseSunSensor* n = new VizMessage_CoarseSunSensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_CoarseSunSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  normalvector_.Clear();
  ::memset(&currentmsmt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cssgroupid_) -
      reinterpret_cast<char*>(&currentmsmt_)) + sizeof(cssgroupid_));
  _internal_metadata_.Clear();
}

bool VizMessage_CoarseSunSensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double normalVector = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_normalvector())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_normalvector())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double currentMsmt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currentmsmt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CSSGroupID = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cssgroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  return false;
#undef DO_
}

void VizMessage_CoarseSunSensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _position_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->position().data(), this->position_size(), output);
  }

  // repeated double normalVector = 4;
  if (this->normalvector_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _normalvector_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->normalvector().data(), this->normalvector_size(), output);
  }

  // double currentMsmt = 5;
  if (this->currentmsmt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->currentmsmt(), output);
  }

  // int32 CSSGroupID = 7;
  if (this->cssgroupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cssgroupid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.CoarseSunSensor)
}

::google::protobuf::uint8* VizMessage_CoarseSunSensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _position_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position_, target);
  }

  // repeated double normalVector = 4;
  if (this->normalvector_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _normalvector_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->normalvector_, target);
  }

  // double currentMsmt = 5;
  if (this->currentmsmt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->currentmsmt(), target);
  }

  // int32 CSSGroupID = 7;
  if (this->cssgroupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cssgroupid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  return target;
}

size_t VizMessage_CoarseSunSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double normalVector = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->normalvector_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _normalvector_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // double currentMsmt = 5;
  if (this->currentmsmt() != 0) {
    total_size += 1 + 8;
  }

  // int32 CSSGroupID = 7;
  if (this->cssgroupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cssgroupid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_CoarseSunSensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_CoarseSunSensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_CoarseSunSensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.CoarseSunSensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.CoarseSunSensor)
    MergeFrom(*source);
  }
}

void VizMessage_CoarseSunSensor::MergeFrom(const VizMessage_CoarseSunSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  normalvector_.MergeFrom(from.normalvector_);
  if (from.currentmsmt() != 0) {
    set_currentmsmt(from.currentmsmt());
  }
  if (from.cssgroupid() != 0) {
    set_cssgroupid(from.cssgroupid());
  }
}

void VizMessage_CoarseSunSensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_CoarseSunSensor::CopyFrom(const VizMessage_CoarseSunSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_CoarseSunSensor::IsInitialized() const {
  return true;
}

void VizMessage_CoarseSunSensor::Swap(VizMessage_CoarseSunSensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_CoarseSunSensor::InternalSwap(VizMessage_CoarseSunSensor* other) {
  using std::swap;
  position_.InternalSwap(&other->position_);
  normalvector_.InternalSwap(&other->normalvector_);
  swap(currentmsmt_, other->currentmsmt_);
  swap(cssgroupid_, other->cssgroupid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_CoarseSunSensor::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_StarTracker::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_StarTracker::kPositionFieldNumber;
const int VizMessage_StarTracker::kRotationFieldNumber;
const int VizMessage_StarTracker::kFieldOfViewHeightFieldNumber;
const int VizMessage_StarTracker::kFieldOfViewWidthFieldNumber;
const int VizMessage_StarTracker::kStarTrackerGroupIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_StarTracker::VizMessage_StarTracker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_StarTracker();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.StarTracker)
}
VizMessage_StarTracker::VizMessage_StarTracker(const VizMessage_StarTracker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      position_(from.position_),
      rotation_(from.rotation_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fieldofviewheight_, &from.fieldofviewheight_,
    static_cast<size_t>(reinterpret_cast<char*>(&startrackergroupid_) -
    reinterpret_cast<char*>(&fieldofviewheight_)) + sizeof(startrackergroupid_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.StarTracker)
}

void VizMessage_StarTracker::SharedCtor() {
  ::memset(&fieldofviewheight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startrackergroupid_) -
      reinterpret_cast<char*>(&fieldofviewheight_)) + sizeof(startrackergroupid_));
  _cached_size_ = 0;
}

VizMessage_StarTracker::~VizMessage_StarTracker() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.StarTracker)
  SharedDtor();
}

void VizMessage_StarTracker::SharedDtor() {
}

void VizMessage_StarTracker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_StarTracker::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_StarTracker& VizMessage_StarTracker::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_StarTracker();
  return *internal_default_instance();
}

VizMessage_StarTracker* VizMessage_StarTracker::New(::google::protobuf::Arena* arena) const {
  VizMessage_StarTracker* n = new VizMessage_StarTracker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_StarTracker::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.StarTracker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  rotation_.Clear();
  ::memset(&fieldofviewheight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startrackergroupid_) -
      reinterpret_cast<char*>(&fieldofviewheight_)) + sizeof(startrackergroupid_));
  _internal_metadata_.Clear();
}

bool VizMessage_StarTracker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.StarTracker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double rotation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_rotation())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_rotation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fieldOfViewHeight = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fieldofviewheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fieldOfViewWidth = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fieldofviewwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 starTrackerGroupID = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startrackergroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.StarTracker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.StarTracker)
  return false;
#undef DO_
}

void VizMessage_StarTracker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.StarTracker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _position_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->position().data(), this->position_size(), output);
  }

  // repeated double rotation = 4;
  if (this->rotation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _rotation_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->rotation().data(), this->rotation_size(), output);
  }

  // double fieldOfViewHeight = 5;
  if (this->fieldofviewheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->fieldofviewheight(), output);
  }

  // double fieldOfViewWidth = 6;
  if (this->fieldofviewwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->fieldofviewwidth(), output);
  }

  // int32 starTrackerGroupID = 7;
  if (this->startrackergroupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->startrackergroupid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.StarTracker)
}

::google::protobuf::uint8* VizMessage_StarTracker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.StarTracker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _position_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position_, target);
  }

  // repeated double rotation = 4;
  if (this->rotation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _rotation_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->rotation_, target);
  }

  // double fieldOfViewHeight = 5;
  if (this->fieldofviewheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->fieldofviewheight(), target);
  }

  // double fieldOfViewWidth = 6;
  if (this->fieldofviewwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->fieldofviewwidth(), target);
  }

  // int32 starTrackerGroupID = 7;
  if (this->startrackergroupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->startrackergroupid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.StarTracker)
  return target;
}

size_t VizMessage_StarTracker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.StarTracker)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double rotation = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->rotation_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rotation_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // double fieldOfViewHeight = 5;
  if (this->fieldofviewheight() != 0) {
    total_size += 1 + 8;
  }

  // double fieldOfViewWidth = 6;
  if (this->fieldofviewwidth() != 0) {
    total_size += 1 + 8;
  }

  // int32 starTrackerGroupID = 7;
  if (this->startrackergroupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startrackergroupid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_StarTracker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.StarTracker)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_StarTracker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_StarTracker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.StarTracker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.StarTracker)
    MergeFrom(*source);
  }
}

void VizMessage_StarTracker::MergeFrom(const VizMessage_StarTracker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.StarTracker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  rotation_.MergeFrom(from.rotation_);
  if (from.fieldofviewheight() != 0) {
    set_fieldofviewheight(from.fieldofviewheight());
  }
  if (from.fieldofviewwidth() != 0) {
    set_fieldofviewwidth(from.fieldofviewwidth());
  }
  if (from.startrackergroupid() != 0) {
    set_startrackergroupid(from.startrackergroupid());
  }
}

void VizMessage_StarTracker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.StarTracker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_StarTracker::CopyFrom(const VizMessage_StarTracker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.StarTracker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_StarTracker::IsInitialized() const {
  return true;
}

void VizMessage_StarTracker::Swap(VizMessage_StarTracker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_StarTracker::InternalSwap(VizMessage_StarTracker* other) {
  using std::swap;
  position_.InternalSwap(&other->position_);
  rotation_.InternalSwap(&other->rotation_);
  swap(fieldofviewheight_, other->fieldofviewheight_);
  swap(fieldofviewwidth_, other->fieldofviewwidth_);
  swap(startrackergroupid_, other->startrackergroupid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_StarTracker::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_CameraConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_CameraConfig::kCameraIDFieldNumber;
const int VizMessage_CameraConfig::kParentNameFieldNumber;
const int VizMessage_CameraConfig::kFieldOfViewFieldNumber;
const int VizMessage_CameraConfig::kResolutionFieldNumber;
const int VizMessage_CameraConfig::kFocalLengthFieldNumber;
const int VizMessage_CameraConfig::kSensorSizeFieldNumber;
const int VizMessage_CameraConfig::kCameraPosBFieldNumber;
const int VizMessage_CameraConfig::kCameraDirBFieldNumber;
const int VizMessage_CameraConfig::kRenderRateFieldNumber;
const int VizMessage_CameraConfig::kSkyBoxFilepathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_CameraConfig::VizMessage_CameraConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CameraConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.CameraConfig)
}
VizMessage_CameraConfig::VizMessage_CameraConfig(const VizMessage_CameraConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      resolution_(from.resolution_),
      sensorsize_(from.sensorsize_),
      camerapos_b_(from.camerapos_b_),
      cameradir_b_(from.cameradir_b_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parentname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parentname().size() > 0) {
    parentname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parentname_);
  }
  skyboxfilepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.skyboxfilepath().size() > 0) {
    skyboxfilepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skyboxfilepath_);
  }
  ::memcpy(&cameraid_, &from.cameraid_,
    static_cast<size_t>(reinterpret_cast<char*>(&renderrate_) -
    reinterpret_cast<char*>(&cameraid_)) + sizeof(renderrate_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.CameraConfig)
}

void VizMessage_CameraConfig::SharedCtor() {
  parentname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skyboxfilepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cameraid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&renderrate_) -
      reinterpret_cast<char*>(&cameraid_)) + sizeof(renderrate_));
  _cached_size_ = 0;
}

VizMessage_CameraConfig::~VizMessage_CameraConfig() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.CameraConfig)
  SharedDtor();
}

void VizMessage_CameraConfig::SharedDtor() {
  parentname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skyboxfilepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_CameraConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_CameraConfig::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_CameraConfig& VizMessage_CameraConfig::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CameraConfig();
  return *internal_default_instance();
}

VizMessage_CameraConfig* VizMessage_CameraConfig::New(::google::protobuf::Arena* arena) const {
  VizMessage_CameraConfig* n = new VizMessage_CameraConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_CameraConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.CameraConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resolution_.Clear();
  sensorsize_.Clear();
  camerapos_b_.Clear();
  cameradir_b_.Clear();
  parentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skyboxfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cameraid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&renderrate_) -
      reinterpret_cast<char*>(&cameraid_)) + sizeof(renderrate_));
  _internal_metadata_.Clear();
}

bool VizMessage_CameraConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.CameraConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 cameraID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cameraid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string parentName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parentname().data(), static_cast<int>(this->parentname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.CameraConfig.parentName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fieldOfView = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fieldofview_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 resolution = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_resolution())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 34u, input, this->mutable_resolution())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double focalLength = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &focallength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double sensorSize = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_sensorsize())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50u, input, this->mutable_sensorsize())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double cameraPos_B = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_camerapos_b())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 58u, input, this->mutable_camerapos_b())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double cameraDir_B = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_cameradir_b())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 66u, input, this->mutable_cameradir_b())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 renderRate = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &renderrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string skyBoxFilepath = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skyboxfilepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->skyboxfilepath().data(), static_cast<int>(this->skyboxfilepath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.CameraConfig.skyBoxFilepath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.CameraConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.CameraConfig)
  return false;
#undef DO_
}

void VizMessage_CameraConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.CameraConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cameraID = 1;
  if (this->cameraid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cameraid(), output);
  }

  // string parentName = 2;
  if (this->parentname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parentname().data(), static_cast<int>(this->parentname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CameraConfig.parentName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->parentname(), output);
  }

  // double fieldOfView = 3;
  if (this->fieldofview() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fieldofview(), output);
  }

  // repeated int64 resolution = 4;
  if (this->resolution_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _resolution_cached_byte_size_));
  }
  for (int i = 0, n = this->resolution_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->resolution(i), output);
  }

  // double focalLength = 5;
  if (this->focallength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->focallength(), output);
  }

  // repeated double sensorSize = 6;
  if (this->sensorsize_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _sensorsize_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->sensorsize().data(), this->sensorsize_size(), output);
  }

  // repeated double cameraPos_B = 7;
  if (this->camerapos_b_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _camerapos_b_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->camerapos_b().data(), this->camerapos_b_size(), output);
  }

  // repeated double cameraDir_B = 8;
  if (this->cameradir_b_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _cameradir_b_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->cameradir_b().data(), this->cameradir_b_size(), output);
  }

  // uint64 renderRate = 9;
  if (this->renderrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->renderrate(), output);
  }

  // string skyBoxFilepath = 10;
  if (this->skyboxfilepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->skyboxfilepath().data(), static_cast<int>(this->skyboxfilepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CameraConfig.skyBoxFilepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->skyboxfilepath(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.CameraConfig)
}

::google::protobuf::uint8* VizMessage_CameraConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.CameraConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cameraID = 1;
  if (this->cameraid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cameraid(), target);
  }

  // string parentName = 2;
  if (this->parentname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parentname().data(), static_cast<int>(this->parentname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CameraConfig.parentName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->parentname(), target);
  }

  // double fieldOfView = 3;
  if (this->fieldofview() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->fieldofview(), target);
  }

  // repeated int64 resolution = 4;
  if (this->resolution_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _resolution_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->resolution_, target);
  }

  // double focalLength = 5;
  if (this->focallength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->focallength(), target);
  }

  // repeated double sensorSize = 6;
  if (this->sensorsize_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _sensorsize_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->sensorsize_, target);
  }

  // repeated double cameraPos_B = 7;
  if (this->camerapos_b_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _camerapos_b_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->camerapos_b_, target);
  }

  // repeated double cameraDir_B = 8;
  if (this->cameradir_b_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _cameradir_b_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->cameradir_b_, target);
  }

  // uint64 renderRate = 9;
  if (this->renderrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->renderrate(), target);
  }

  // string skyBoxFilepath = 10;
  if (this->skyboxfilepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->skyboxfilepath().data(), static_cast<int>(this->skyboxfilepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CameraConfig.skyBoxFilepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->skyboxfilepath(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.CameraConfig)
  return target;
}

size_t VizMessage_CameraConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.CameraConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int64 resolution = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->resolution_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _resolution_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double sensorSize = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->sensorsize_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sensorsize_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double cameraPos_B = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->camerapos_b_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _camerapos_b_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double cameraDir_B = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->cameradir_b_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cameradir_b_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string parentName = 2;
  if (this->parentname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parentname());
  }

  // string skyBoxFilepath = 10;
  if (this->skyboxfilepath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->skyboxfilepath());
  }

  // int64 cameraID = 1;
  if (this->cameraid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cameraid());
  }

  // double fieldOfView = 3;
  if (this->fieldofview() != 0) {
    total_size += 1 + 8;
  }

  // double focalLength = 5;
  if (this->focallength() != 0) {
    total_size += 1 + 8;
  }

  // uint64 renderRate = 9;
  if (this->renderrate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->renderrate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_CameraConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.CameraConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_CameraConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_CameraConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.CameraConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.CameraConfig)
    MergeFrom(*source);
  }
}

void VizMessage_CameraConfig::MergeFrom(const VizMessage_CameraConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.CameraConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resolution_.MergeFrom(from.resolution_);
  sensorsize_.MergeFrom(from.sensorsize_);
  camerapos_b_.MergeFrom(from.camerapos_b_);
  cameradir_b_.MergeFrom(from.cameradir_b_);
  if (from.parentname().size() > 0) {

    parentname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parentname_);
  }
  if (from.skyboxfilepath().size() > 0) {

    skyboxfilepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skyboxfilepath_);
  }
  if (from.cameraid() != 0) {
    set_cameraid(from.cameraid());
  }
  if (from.fieldofview() != 0) {
    set_fieldofview(from.fieldofview());
  }
  if (from.focallength() != 0) {
    set_focallength(from.focallength());
  }
  if (from.renderrate() != 0) {
    set_renderrate(from.renderrate());
  }
}

void VizMessage_CameraConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.CameraConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_CameraConfig::CopyFrom(const VizMessage_CameraConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.CameraConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_CameraConfig::IsInitialized() const {
  return true;
}

void VizMessage_CameraConfig::Swap(VizMessage_CameraConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_CameraConfig::InternalSwap(VizMessage_CameraConfig* other) {
  using std::swap;
  resolution_.InternalSwap(&other->resolution_);
  sensorsize_.InternalSwap(&other->sensorsize_);
  camerapos_b_.InternalSwap(&other->camerapos_b_);
  cameradir_b_.InternalSwap(&other->cameradir_b_);
  parentname_.Swap(&other->parentname_);
  skyboxfilepath_.Swap(&other->skyboxfilepath_);
  swap(cameraid_, other->cameraid_);
  swap(fieldofview_, other->fieldofview_);
  swap(focallength_, other->focallength_);
  swap(renderrate_, other->renderrate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_CameraConfig::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_CameraImage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_CameraImage::kCameraIDFieldNumber;
const int VizMessage_CameraImage::kTimeTagFieldNumber;
const int VizMessage_CameraImage::kImageFileNameFieldNumber;
const int VizMessage_CameraImage::kImageFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_CameraImage::VizMessage_CameraImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CameraImage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.CameraImage)
}
VizMessage_CameraImage::VizMessage_CameraImage(const VizMessage_CameraImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      imagefile_(from.imagefile_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imagefilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.imagefilename().size() > 0) {
    imagefilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imagefilename_);
  }
  ::memcpy(&cameraid_, &from.cameraid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timetag_) -
    reinterpret_cast<char*>(&cameraid_)) + sizeof(timetag_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.CameraImage)
}

void VizMessage_CameraImage::SharedCtor() {
  imagefilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cameraid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timetag_) -
      reinterpret_cast<char*>(&cameraid_)) + sizeof(timetag_));
  _cached_size_ = 0;
}

VizMessage_CameraImage::~VizMessage_CameraImage() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.CameraImage)
  SharedDtor();
}

void VizMessage_CameraImage::SharedDtor() {
  imagefilename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_CameraImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_CameraImage::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_CameraImage& VizMessage_CameraImage::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CameraImage();
  return *internal_default_instance();
}

VizMessage_CameraImage* VizMessage_CameraImage::New(::google::protobuf::Arena* arena) const {
  VizMessage_CameraImage* n = new VizMessage_CameraImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_CameraImage::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.CameraImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imagefile_.Clear();
  imagefilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cameraid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timetag_) -
      reinterpret_cast<char*>(&cameraid_)) + sizeof(timetag_));
  _internal_metadata_.Clear();
}

bool VizMessage_CameraImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.CameraImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 cameraID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cameraid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double timeTag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timetag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string imageFileName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagefilename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->imagefilename().data(), static_cast<int>(this->imagefilename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.CameraImage.imageFileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 imageFile = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_imagefile())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_imagefile())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.CameraImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.CameraImage)
  return false;
#undef DO_
}

void VizMessage_CameraImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.CameraImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cameraID = 1;
  if (this->cameraid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cameraid(), output);
  }

  // double timeTag = 2;
  if (this->timetag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timetag(), output);
  }

  // string imageFileName = 3;
  if (this->imagefilename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->imagefilename().data(), static_cast<int>(this->imagefilename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CameraImage.imageFileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->imagefilename(), output);
  }

  // repeated uint32 imageFile = 4;
  if (this->imagefile_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _imagefile_cached_byte_size_));
  }
  for (int i = 0, n = this->imagefile_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->imagefile(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.CameraImage)
}

::google::protobuf::uint8* VizMessage_CameraImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.CameraImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cameraID = 1;
  if (this->cameraid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cameraid(), target);
  }

  // double timeTag = 2;
  if (this->timetag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timetag(), target);
  }

  // string imageFileName = 3;
  if (this->imagefilename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->imagefilename().data(), static_cast<int>(this->imagefilename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CameraImage.imageFileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->imagefilename(), target);
  }

  // repeated uint32 imageFile = 4;
  if (this->imagefile_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _imagefile_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->imagefile_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.CameraImage)
  return target;
}

size_t VizMessage_CameraImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.CameraImage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 imageFile = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->imagefile_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _imagefile_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string imageFileName = 3;
  if (this->imagefilename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->imagefilename());
  }

  // int64 cameraID = 1;
  if (this->cameraid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cameraid());
  }

  // double timeTag = 2;
  if (this->timetag() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_CameraImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.CameraImage)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_CameraImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_CameraImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.CameraImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.CameraImage)
    MergeFrom(*source);
  }
}

void VizMessage_CameraImage::MergeFrom(const VizMessage_CameraImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.CameraImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  imagefile_.MergeFrom(from.imagefile_);
  if (from.imagefilename().size() > 0) {

    imagefilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imagefilename_);
  }
  if (from.cameraid() != 0) {
    set_cameraid(from.cameraid());
  }
  if (from.timetag() != 0) {
    set_timetag(from.timetag());
  }
}

void VizMessage_CameraImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.CameraImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_CameraImage::CopyFrom(const VizMessage_CameraImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.CameraImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_CameraImage::IsInitialized() const {
  return true;
}

void VizMessage_CameraImage::Swap(VizMessage_CameraImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_CameraImage::InternalSwap(VizMessage_CameraImage* other) {
  using std::swap;
  imagefile_.InternalSwap(&other->imagefile_);
  imagefilename_.Swap(&other->imagefilename_);
  swap(cameraid_, other->cameraid_);
  swap(timetag_, other->timetag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_CameraImage::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_ImageRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_ImageRequest::kCameraIDFieldNumber;
const int VizMessage_ImageRequest::kTimeTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_ImageRequest::VizMessage_ImageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_ImageRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.ImageRequest)
}
VizMessage_ImageRequest::VizMessage_ImageRequest(const VizMessage_ImageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cameraid_, &from.cameraid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timetag_) -
    reinterpret_cast<char*>(&cameraid_)) + sizeof(timetag_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.ImageRequest)
}

void VizMessage_ImageRequest::SharedCtor() {
  ::memset(&cameraid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timetag_) -
      reinterpret_cast<char*>(&cameraid_)) + sizeof(timetag_));
  _cached_size_ = 0;
}

VizMessage_ImageRequest::~VizMessage_ImageRequest() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.ImageRequest)
  SharedDtor();
}

void VizMessage_ImageRequest::SharedDtor() {
}

void VizMessage_ImageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_ImageRequest::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_ImageRequest& VizMessage_ImageRequest::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_ImageRequest();
  return *internal_default_instance();
}

VizMessage_ImageRequest* VizMessage_ImageRequest::New(::google::protobuf::Arena* arena) const {
  VizMessage_ImageRequest* n = new VizMessage_ImageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_ImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.ImageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cameraid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timetag_) -
      reinterpret_cast<char*>(&cameraid_)) + sizeof(timetag_));
  _internal_metadata_.Clear();
}

bool VizMessage_ImageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.ImageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 cameraID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cameraid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double timeTag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timetag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.ImageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.ImageRequest)
  return false;
#undef DO_
}

void VizMessage_ImageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.ImageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cameraID = 1;
  if (this->cameraid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cameraid(), output);
  }

  // double timeTag = 2;
  if (this->timetag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timetag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.ImageRequest)
}

::google::protobuf::uint8* VizMessage_ImageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.ImageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cameraID = 1;
  if (this->cameraid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cameraid(), target);
  }

  // double timeTag = 2;
  if (this->timetag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timetag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.ImageRequest)
  return target;
}

size_t VizMessage_ImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.ImageRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 cameraID = 1;
  if (this->cameraid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cameraid());
  }

  // double timeTag = 2;
  if (this->timetag() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_ImageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.ImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_ImageRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_ImageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.ImageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.ImageRequest)
    MergeFrom(*source);
  }
}

void VizMessage_ImageRequest::MergeFrom(const VizMessage_ImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.ImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cameraid() != 0) {
    set_cameraid(from.cameraid());
  }
  if (from.timetag() != 0) {
    set_timetag(from.timetag());
  }
}

void VizMessage_ImageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.ImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_ImageRequest::CopyFrom(const VizMessage_ImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.ImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_ImageRequest::IsInitialized() const {
  return true;
}

void VizMessage_ImageRequest::Swap(VizMessage_ImageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_ImageRequest::InternalSwap(VizMessage_ImageRequest* other) {
  using std::swap;
  swap(cameraid_, other->cameraid_);
  swap(timetag_, other->timetag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_ImageRequest::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_VizSettingsPb::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_VizSettingsPb::kAmbientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_VizSettingsPb::VizMessage_VizSettingsPb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_VizSettingsPb();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.VizSettingsPb)
}
VizMessage_VizSettingsPb::VizMessage_VizSettingsPb(const VizMessage_VizSettingsPb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ambient_ = from.ambient_;
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.VizSettingsPb)
}

void VizMessage_VizSettingsPb::SharedCtor() {
  ambient_ = 0;
  _cached_size_ = 0;
}

VizMessage_VizSettingsPb::~VizMessage_VizSettingsPb() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.VizSettingsPb)
  SharedDtor();
}

void VizMessage_VizSettingsPb::SharedDtor() {
}

void VizMessage_VizSettingsPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_VizSettingsPb::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_VizSettingsPb& VizMessage_VizSettingsPb::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_VizSettingsPb();
  return *internal_default_instance();
}

VizMessage_VizSettingsPb* VizMessage_VizSettingsPb::New(::google::protobuf::Arena* arena) const {
  VizMessage_VizSettingsPb* n = new VizMessage_VizSettingsPb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_VizSettingsPb::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ambient_ = 0;
  _internal_metadata_.Clear();
}

bool VizMessage_VizSettingsPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double ambient = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ambient_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.VizSettingsPb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.VizSettingsPb)
  return false;
#undef DO_
}

void VizMessage_VizSettingsPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double ambient = 1;
  if (this->ambient() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ambient(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.VizSettingsPb)
}

::google::protobuf::uint8* VizMessage_VizSettingsPb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double ambient = 1;
  if (this->ambient() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ambient(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.VizSettingsPb)
  return target;
}

size_t VizMessage_VizSettingsPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double ambient = 1;
  if (this->ambient() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_VizSettingsPb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_VizSettingsPb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_VizSettingsPb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.VizSettingsPb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.VizSettingsPb)
    MergeFrom(*source);
  }
}

void VizMessage_VizSettingsPb::MergeFrom(const VizMessage_VizSettingsPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ambient() != 0) {
    set_ambient(from.ambient());
  }
}

void VizMessage_VizSettingsPb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_VizSettingsPb::CopyFrom(const VizMessage_VizSettingsPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_VizSettingsPb::IsInitialized() const {
  return true;
}

void VizMessage_VizSettingsPb::Swap(VizMessage_VizSettingsPb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_VizSettingsPb::InternalSwap(VizMessage_VizSettingsPb* other) {
  using std::swap;
  swap(ambient_, other->ambient_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_VizSettingsPb::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage::InitAsDefaultInstance() {
  ::vizProtobufferMessage::_VizMessage_default_instance_._instance.get_mutable()->currenttime_ = const_cast< ::vizProtobufferMessage::VizMessage_TimeStamp*>(
      ::vizProtobufferMessage::VizMessage_TimeStamp::internal_default_instance());
  ::vizProtobufferMessage::_VizMessage_default_instance_._instance.get_mutable()->settings_ = const_cast< ::vizProtobufferMessage::VizMessage_VizSettingsPb*>(
      ::vizProtobufferMessage::VizMessage_VizSettingsPb::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage::kCurrentTimeFieldNumber;
const int VizMessage::kCelestialBodiesFieldNumber;
const int VizMessage::kSpacecraftFieldNumber;
const int VizMessage::kCamerasFieldNumber;
const int VizMessage::kCameraImagesFieldNumber;
const int VizMessage::kImageRequestsFieldNumber;
const int VizMessage::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage::VizMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage)
}
VizMessage::VizMessage(const VizMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      celestialbodies_(from.celestialbodies_),
      spacecraft_(from.spacecraft_),
      cameras_(from.cameras_),
      cameraimages_(from.cameraimages_),
      imagerequests_(from.imagerequests_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_currenttime()) {
    currenttime_ = new ::vizProtobufferMessage::VizMessage_TimeStamp(*from.currenttime_);
  } else {
    currenttime_ = NULL;
  }
  if (from.has_settings()) {
    settings_ = new ::vizProtobufferMessage::VizMessage_VizSettingsPb(*from.settings_);
  } else {
    settings_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage)
}

void VizMessage::SharedCtor() {
  ::memset(&currenttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settings_) -
      reinterpret_cast<char*>(&currenttime_)) + sizeof(settings_));
  _cached_size_ = 0;
}

VizMessage::~VizMessage() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage)
  SharedDtor();
}

void VizMessage::SharedDtor() {
  if (this != internal_default_instance()) delete currenttime_;
  if (this != internal_default_instance()) delete settings_;
}

void VizMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage& VizMessage::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage();
  return *internal_default_instance();
}

VizMessage* VizMessage::New(::google::protobuf::Arena* arena) const {
  VizMessage* n = new VizMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  celestialbodies_.Clear();
  spacecraft_.Clear();
  cameras_.Clear();
  cameraimages_.Clear();
  imagerequests_.Clear();
  if (GetArenaNoVirtual() == NULL && currenttime_ != NULL) {
    delete currenttime_;
  }
  currenttime_ = NULL;
  if (GetArenaNoVirtual() == NULL && settings_ != NULL) {
    delete settings_;
  }
  settings_ = NULL;
  _internal_metadata_.Clear();
}

bool VizMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vizProtobufferMessage.VizMessage.TimeStamp currentTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_currenttime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vizProtobufferMessage.VizMessage.CelestialBody celestialBodies = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_celestialbodies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vizProtobufferMessage.VizMessage.Spacecraft spacecraft = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_spacecraft()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vizProtobufferMessage.VizMessage.CameraConfig cameras = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_cameras()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vizProtobufferMessage.VizMessage.CameraImage cameraImages = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_cameraimages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vizProtobufferMessage.VizMessage.ImageRequest imageRequests = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_imagerequests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vizProtobufferMessage.VizMessage.VizSettingsPb settings = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage)
  return false;
#undef DO_
}

void VizMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vizProtobufferMessage.VizMessage.TimeStamp currentTime = 1;
  if (this->has_currenttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->currenttime_, output);
  }

  // repeated .vizProtobufferMessage.VizMessage.CelestialBody celestialBodies = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->celestialbodies_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->celestialbodies(static_cast<int>(i)), output);
  }

  // repeated .vizProtobufferMessage.VizMessage.Spacecraft spacecraft = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spacecraft_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->spacecraft(static_cast<int>(i)), output);
  }

  // repeated .vizProtobufferMessage.VizMessage.CameraConfig cameras = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cameras_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cameras(static_cast<int>(i)), output);
  }

  // repeated .vizProtobufferMessage.VizMessage.CameraImage cameraImages = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cameraimages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cameraimages(static_cast<int>(i)), output);
  }

  // repeated .vizProtobufferMessage.VizMessage.ImageRequest imageRequests = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->imagerequests_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->imagerequests(static_cast<int>(i)), output);
  }

  // .vizProtobufferMessage.VizMessage.VizSettingsPb settings = 7;
  if (this->has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->settings_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage)
}

::google::protobuf::uint8* VizMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vizProtobufferMessage.VizMessage.TimeStamp currentTime = 1;
  if (this->has_currenttime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->currenttime_, deterministic, target);
  }

  // repeated .vizProtobufferMessage.VizMessage.CelestialBody celestialBodies = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->celestialbodies_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->celestialbodies(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vizProtobufferMessage.VizMessage.Spacecraft spacecraft = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spacecraft_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->spacecraft(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vizProtobufferMessage.VizMessage.CameraConfig cameras = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cameras_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->cameras(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vizProtobufferMessage.VizMessage.CameraImage cameraImages = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cameraimages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->cameraimages(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vizProtobufferMessage.VizMessage.ImageRequest imageRequests = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->imagerequests_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->imagerequests(static_cast<int>(i)), deterministic, target);
  }

  // .vizProtobufferMessage.VizMessage.VizSettingsPb settings = 7;
  if (this->has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->settings_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage)
  return target;
}

size_t VizMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vizProtobufferMessage.VizMessage.CelestialBody celestialBodies = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->celestialbodies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->celestialbodies(static_cast<int>(i)));
    }
  }

  // repeated .vizProtobufferMessage.VizMessage.Spacecraft spacecraft = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->spacecraft_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->spacecraft(static_cast<int>(i)));
    }
  }

  // repeated .vizProtobufferMessage.VizMessage.CameraConfig cameras = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->cameras_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cameras(static_cast<int>(i)));
    }
  }

  // repeated .vizProtobufferMessage.VizMessage.CameraImage cameraImages = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->cameraimages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cameraimages(static_cast<int>(i)));
    }
  }

  // repeated .vizProtobufferMessage.VizMessage.ImageRequest imageRequests = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->imagerequests_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->imagerequests(static_cast<int>(i)));
    }
  }

  // .vizProtobufferMessage.VizMessage.TimeStamp currentTime = 1;
  if (this->has_currenttime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->currenttime_);
  }

  // .vizProtobufferMessage.VizMessage.VizSettingsPb settings = 7;
  if (this->has_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->settings_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage)
    MergeFrom(*source);
  }
}

void VizMessage::MergeFrom(const VizMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  celestialbodies_.MergeFrom(from.celestialbodies_);
  spacecraft_.MergeFrom(from.spacecraft_);
  cameras_.MergeFrom(from.cameras_);
  cameraimages_.MergeFrom(from.cameraimages_);
  imagerequests_.MergeFrom(from.imagerequests_);
  if (from.has_currenttime()) {
    mutable_currenttime()->::vizProtobufferMessage::VizMessage_TimeStamp::MergeFrom(from.currenttime());
  }
  if (from.has_settings()) {
    mutable_settings()->::vizProtobufferMessage::VizMessage_VizSettingsPb::MergeFrom(from.settings());
  }
}

void VizMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage::CopyFrom(const VizMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage::IsInitialized() const {
  return true;
}

void VizMessage::Swap(VizMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage::InternalSwap(VizMessage* other) {
  using std::swap;
  celestialbodies_.InternalSwap(&other->celestialbodies_);
  spacecraft_.InternalSwap(&other->spacecraft_);
  cameras_.InternalSwap(&other->cameras_);
  cameraimages_.InternalSwap(&other->cameraimages_);
  imagerequests_.InternalSwap(&other->imagerequests_);
  swap(currenttime_, other->currenttime_);
  swap(settings_, other->settings_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vizProtobufferMessage

// @@protoc_insertion_point(global_scope)
