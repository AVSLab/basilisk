// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vizMessage.proto

#include "vizMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace vizProtobufferMessage {
class VizMessage_TimeStampDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_TimeStamp>
      _instance;
} _VizMessage_TimeStamp_default_instance_;
class VizMessage_CelestialBodyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_CelestialBody>
      _instance;
} _VizMessage_CelestialBody_default_instance_;
class VizMessage_SpacecraftDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_Spacecraft>
      _instance;
} _VizMessage_Spacecraft_default_instance_;
class VizMessage_ReactionWheelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_ReactionWheel>
      _instance;
} _VizMessage_ReactionWheel_default_instance_;
class VizMessage_ThrusterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_Thruster>
      _instance;
} _VizMessage_Thruster_default_instance_;
class VizMessage_CoarseSunSensorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_CoarseSunSensor>
      _instance;
} _VizMessage_CoarseSunSensor_default_instance_;
class VizMessage_StarTrackerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_StarTracker>
      _instance;
} _VizMessage_StarTracker_default_instance_;
class VizMessage_CameraConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_CameraConfig>
      _instance;
} _VizMessage_CameraConfig_default_instance_;
class VizMessage_PointLineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_PointLine>
      _instance;
} _VizMessage_PointLine_default_instance_;
class VizMessage_KeepOutInConeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_KeepOutInCone>
      _instance;
} _VizMessage_KeepOutInCone_default_instance_;
class VizMessage_CameraOneSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_CameraOneSettings>
      _instance;
} _VizMessage_CameraOneSettings_default_instance_;
class VizMessage_CameraTwoSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_CameraTwoSettings>
      _instance;
} _VizMessage_CameraTwoSettings_default_instance_;
class VizMessage_PlanetCameraSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_PlanetCameraSettings>
      _instance;
} _VizMessage_PlanetCameraSettings_default_instance_;
class VizMessage_ActuatorSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_ActuatorSettings>
      _instance;
} _VizMessage_ActuatorSettings_default_instance_;
class VizMessage_CustomModelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_CustomModel>
      _instance;
} _VizMessage_CustomModel_default_instance_;
class VizMessage_VizSettingsPbDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage_VizSettingsPb>
      _instance;
} _VizMessage_VizSettingsPb_default_instance_;
class VizMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VizMessage>
      _instance;
} _VizMessage_default_instance_;
}  // namespace vizProtobufferMessage
namespace protobuf_vizMessage_2eproto {
void InitDefaultsVizMessage_TimeStampImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_TimeStamp_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_TimeStamp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_TimeStamp::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_TimeStamp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_TimeStampImpl);
}

void InitDefaultsVizMessage_CelestialBodyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_CelestialBody_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_CelestialBody();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_CelestialBody::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_CelestialBody() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_CelestialBodyImpl);
}

void InitDefaultsVizMessage_SpacecraftImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_ReactionWheel();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_Thruster();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CoarseSunSensor();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_StarTracker();
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_Spacecraft_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_Spacecraft();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_Spacecraft::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_Spacecraft() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_SpacecraftImpl);
}

void InitDefaultsVizMessage_ReactionWheelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_ReactionWheel_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_ReactionWheel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_ReactionWheel::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_ReactionWheel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_ReactionWheelImpl);
}

void InitDefaultsVizMessage_ThrusterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_Thruster_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_Thruster();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_Thruster::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_Thruster() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_ThrusterImpl);
}

void InitDefaultsVizMessage_CoarseSunSensorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_CoarseSunSensor_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_CoarseSunSensor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_CoarseSunSensor::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_CoarseSunSensor() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_CoarseSunSensorImpl);
}

void InitDefaultsVizMessage_StarTrackerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_StarTracker_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_StarTracker();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_StarTracker::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_StarTracker() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_StarTrackerImpl);
}

void InitDefaultsVizMessage_CameraConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_CameraConfig_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_CameraConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_CameraConfig::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_CameraConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_CameraConfigImpl);
}

void InitDefaultsVizMessage_PointLineImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_PointLine_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_PointLine();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_PointLine::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_PointLine() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_PointLineImpl);
}

void InitDefaultsVizMessage_KeepOutInConeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_KeepOutInCone_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_KeepOutInCone();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_KeepOutInCone::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_KeepOutInCone() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_KeepOutInConeImpl);
}

void InitDefaultsVizMessage_CameraOneSettingsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_CameraOneSettings_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_CameraOneSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_CameraOneSettings::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_CameraOneSettings() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_CameraOneSettingsImpl);
}

void InitDefaultsVizMessage_CameraTwoSettingsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_CameraTwoSettings_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_CameraTwoSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_CameraTwoSettings::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_CameraTwoSettings() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_CameraTwoSettingsImpl);
}

void InitDefaultsVizMessage_PlanetCameraSettingsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_PlanetCameraSettings_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_PlanetCameraSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_PlanetCameraSettings::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_PlanetCameraSettings() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_PlanetCameraSettingsImpl);
}

void InitDefaultsVizMessage_ActuatorSettingsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_ActuatorSettings_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_ActuatorSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_ActuatorSettings::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_ActuatorSettings() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_ActuatorSettingsImpl);
}

void InitDefaultsVizMessage_CustomModelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_CustomModel_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_CustomModel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_CustomModel::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_CustomModel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_CustomModelImpl);
}

void InitDefaultsVizMessage_VizSettingsPbImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_PointLine();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_KeepOutInCone();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CameraOneSettings();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CameraTwoSettings();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_PlanetCameraSettings();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_ActuatorSettings();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CustomModel();
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_VizSettingsPb_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage_VizSettingsPb();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage_VizSettingsPb::InitAsDefaultInstance();
}

void InitDefaultsVizMessage_VizSettingsPb() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessage_VizSettingsPbImpl);
}

void InitDefaultsVizMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_TimeStamp();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CelestialBody();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_Spacecraft();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CameraConfig();
  protobuf_vizMessage_2eproto::InitDefaultsVizMessage_VizSettingsPb();
  {
    void* ptr = &::vizProtobufferMessage::_VizMessage_default_instance_;
    new (ptr) ::vizProtobufferMessage::VizMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vizProtobufferMessage::VizMessage::InitAsDefaultInstance();
}

void InitDefaultsVizMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVizMessageImpl);
}

::google::protobuf::Metadata file_level_metadata[17];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_TimeStamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_TimeStamp, framenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_TimeStamp, simtimeelapsed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CelestialBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CelestialBody, bodyname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CelestialBody, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CelestialBody, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CelestialBody, rotation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, spacecraftname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, reactionwheels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, thrusters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, css_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, startrackers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ReactionWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ReactionWheel, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ReactionWheel, spinaxisvector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ReactionWheel, wheelspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ReactionWheel, wheeltorque_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Thruster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Thruster, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Thruster, thrustvector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Thruster, currentthrust_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Thruster, maxthrust_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Thruster, thrustergroupid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CoarseSunSensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CoarseSunSensor, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CoarseSunSensor, normalvector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CoarseSunSensor, currentmsmt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CoarseSunSensor, cssgroupid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StarTracker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StarTracker, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StarTracker, rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StarTracker, fieldofviewheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StarTracker, fieldofviewwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StarTracker, startrackergroupid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, cameraid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, parentname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, fieldofview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, focallength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, sensorsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, camerapos_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, cameradir_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, renderrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, skybox_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_PointLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_PointLine, frombodyname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_PointLine, tobodyname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_PointLine, linecolor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_KeepOutInCone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_KeepOutInCone, iskeepin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_KeepOutInCone, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_KeepOutInCone, normalvector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_KeepOutInCone, incidenceangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_KeepOutInCone, coneheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_KeepOutInCone, frombodyname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_KeepOutInCone, tobodyname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_KeepOutInCone, conecolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_KeepOutInCone, conename_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraOneSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraOneSettings, spacecraftname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraOneSettings, viewpanel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraOneSettings, setview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraOneSettings, spacecraftvisible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraOneSettings, fieldofview_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraTwoSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraTwoSettings, spacecraftname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraTwoSettings, viewpanel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraTwoSettings, setview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraTwoSettings, spacecraftvisible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraTwoSettings, fieldofview_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_PlanetCameraSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_PlanetCameraSettings, spacecraftname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_PlanetCameraSettings, viewpanel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_PlanetCameraSettings, setview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_PlanetCameraSettings, spacecraftvisible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_PlanetCameraSettings, fieldofview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_PlanetCameraSettings, targetbodyname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ActuatorSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ActuatorSettings, spacecraftname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ActuatorSettings, viewthrusterpanel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ActuatorSettings, viewthrusterhud_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ActuatorSettings, viewrwpanel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ActuatorSettings, viewrwhud_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CustomModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CustomModel, modeltouse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CustomModel, simbodiestomodify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CustomModel, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CustomModel, rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CustomModel, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CustomModel, customtexture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CustomModel, normalmap_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, ambient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, orbitlineson_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, spacecraftcson_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, planetcson_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, pointlines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, keepoutincones_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, cameraone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, cameratwo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, planetcamera_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, actuatorsettings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, skybox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, custommodels_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, currenttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, celestialbodies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, spacecraft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, cameras_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, settings_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vizProtobufferMessage::VizMessage_TimeStamp)},
  { 7, -1, sizeof(::vizProtobufferMessage::VizMessage_CelestialBody)},
  { 16, -1, sizeof(::vizProtobufferMessage::VizMessage_Spacecraft)},
  { 29, -1, sizeof(::vizProtobufferMessage::VizMessage_ReactionWheel)},
  { 38, -1, sizeof(::vizProtobufferMessage::VizMessage_Thruster)},
  { 48, -1, sizeof(::vizProtobufferMessage::VizMessage_CoarseSunSensor)},
  { 57, -1, sizeof(::vizProtobufferMessage::VizMessage_StarTracker)},
  { 67, -1, sizeof(::vizProtobufferMessage::VizMessage_CameraConfig)},
  { 82, -1, sizeof(::vizProtobufferMessage::VizMessage_PointLine)},
  { 90, -1, sizeof(::vizProtobufferMessage::VizMessage_KeepOutInCone)},
  { 104, -1, sizeof(::vizProtobufferMessage::VizMessage_CameraOneSettings)},
  { 114, -1, sizeof(::vizProtobufferMessage::VizMessage_CameraTwoSettings)},
  { 124, -1, sizeof(::vizProtobufferMessage::VizMessage_PlanetCameraSettings)},
  { 135, -1, sizeof(::vizProtobufferMessage::VizMessage_ActuatorSettings)},
  { 145, -1, sizeof(::vizProtobufferMessage::VizMessage_CustomModel)},
  { 157, -1, sizeof(::vizProtobufferMessage::VizMessage_VizSettingsPb)},
  { 174, -1, sizeof(::vizProtobufferMessage::VizMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_TimeStamp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_CelestialBody_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_Spacecraft_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_ReactionWheel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_Thruster_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_CoarseSunSensor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_StarTracker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_CameraConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_PointLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_KeepOutInCone_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_CameraOneSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_CameraTwoSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_PlanetCameraSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_ActuatorSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_CustomModel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_VizSettingsPb_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vizProtobufferMessage::_VizMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "vizMessage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020vizMessage.proto\022\025vizProtobufferMessag"
      "e\"\271\030\n\nVizMessage\022@\n\013currentTime\030\001 \001(\0132+."
      "vizProtobufferMessage.VizMessage.TimeSta"
      "mp\022H\n\017celestialBodies\030\002 \003(\0132/.vizProtobu"
      "fferMessage.VizMessage.CelestialBody\022@\n\n"
      "spacecraft\030\003 \003(\0132,.vizProtobufferMessage"
      ".VizMessage.Spacecraft\022\?\n\007cameras\030\004 \003(\0132"
      "..vizProtobufferMessage.VizMessage.Camer"
      "aConfig\022A\n\010settings\030\007 \001(\0132/.vizProtobuff"
      "erMessage.VizMessage.VizSettingsPb\0328\n\tTi"
      "meStamp\022\023\n\013frameNumber\030\001 \001(\003\022\026\n\016simTimeE"
      "lapsed\030\002 \001(\001\032W\n\rCelestialBody\022\020\n\010bodyNam"
      "e\030\001 \001(\t\022\020\n\010position\030\002 \003(\001\022\020\n\010velocity\030\003 "
      "\003(\001\022\020\n\010rotation\030\004 \003(\001\032\347\002\n\nSpacecraft\022\026\n\016"
      "spacecraftName\030\001 \001(\t\022\020\n\010position\030\002 \003(\001\022\020"
      "\n\010velocity\030\003 \003(\001\022\020\n\010rotation\030\004 \003(\001\022G\n\016re"
      "actionWheels\030\005 \003(\0132/.vizProtobufferMessa"
      "ge.VizMessage.ReactionWheel\022=\n\tthrusters"
      "\030\006 \003(\0132*.vizProtobufferMessage.VizMessag"
      "e.Thruster\022>\n\003CSS\030\007 \003(\01321.vizProtobuffer"
      "Message.VizMessage.CoarseSunSensor\022C\n\014st"
      "arTrackers\030\010 \003(\0132-.vizProtobufferMessage"
      ".VizMessage.StarTracker\032b\n\rReactionWheel"
      "\022\020\n\010position\030\002 \003(\001\022\026\n\016spinAxisVector\030\004 \003"
      "(\001\022\022\n\nwheelSpeed\030\005 \001(\001\022\023\n\013wheelTorque\030\006 "
      "\001(\001\032u\n\010Thruster\022\020\n\010position\030\002 \003(\001\022\024\n\014thr"
      "ustVector\030\004 \003(\001\022\025\n\rcurrentThrust\030\005 \001(\001\022\021"
      "\n\tmaxThrust\030\006 \001(\001\022\027\n\017thrusterGroupID\030\007 \001"
      "(\005\032b\n\017CoarseSunSensor\022\020\n\010position\030\002 \003(\001\022"
      "\024\n\014normalVector\030\004 \003(\001\022\023\n\013currentMsmt\030\005 \001"
      "(\001\022\022\n\nCSSGroupID\030\007 \001(\005\032\202\001\n\013StarTracker\022\020"
      "\n\010position\030\002 \003(\001\022\020\n\010rotation\030\004 \003(\001\022\031\n\021fi"
      "eldOfViewHeight\030\005 \001(\001\022\030\n\020fieldOfViewWidt"
      "h\030\006 \001(\001\022\032\n\022starTrackerGroupID\030\007 \001(\005\032\324\001\n\014"
      "CameraConfig\022\020\n\010cameraID\030\001 \001(\003\022\022\n\nparent"
      "Name\030\002 \001(\t\022\023\n\013fieldOfView\030\003 \001(\001\022\022\n\nresol"
      "ution\030\004 \003(\003\022\023\n\013focalLength\030\005 \001(\001\022\022\n\nsens"
      "orSize\030\006 \003(\001\022\023\n\013cameraPos_B\030\007 \003(\001\022\023\n\013cam"
      "eraDir_B\030\010 \003(\001\022\022\n\nrenderRate\030\t \001(\004\022\016\n\006sk"
      "ybox\030\n \001(\t\032H\n\tPointLine\022\024\n\014fromBodyName\030"
      "\001 \001(\t\022\022\n\ntoBodyName\030\002 \001(\t\022\021\n\tlineColor\030\003"
      " \003(\005\032\304\001\n\rKeepOutInCone\022\020\n\010isKeepIn\030\001 \001(\010"
      "\022\020\n\010position\030\002 \003(\001\022\024\n\014normalVector\030\003 \003(\001"
      "\022\026\n\016incidenceAngle\030\004 \001(\001\022\022\n\nconeHeight\030\005"
      " \001(\001\022\024\n\014fromBodyName\030\006 \001(\t\022\022\n\ntoBodyName"
      "\030\007 \001(\t\022\021\n\tconeColor\030\010 \003(\003\022\020\n\010coneName\030\t "
      "\001(\t\032\177\n\021CameraOneSettings\022\026\n\016spacecraftNa"
      "me\030\001 \001(\t\022\021\n\tviewPanel\030\002 \001(\010\022\017\n\007setView\030\003"
      " \001(\005\022\031\n\021spacecraftVisible\030\004 \001(\010\022\023\n\013field"
      "OfView\030\005 \001(\001\032\177\n\021CameraTwoSettings\022\026\n\016spa"
      "cecraftName\030\001 \001(\t\022\021\n\tviewPanel\030\002 \001(\010\022\017\n\007"
      "setView\030\003 \001(\005\022\031\n\021spacecraftVisible\030\004 \001(\010"
      "\022\023\n\013fieldOfView\030\005 \001(\001\032\232\001\n\024PlanetCameraSe"
      "ttings\022\026\n\016spacecraftName\030\001 \001(\t\022\021\n\tviewPa"
      "nel\030\002 \001(\010\022\017\n\007setView\030\003 \001(\005\022\031\n\021spacecraft"
      "Visible\030\004 \001(\010\022\023\n\013fieldOfView\030\005 \001(\001\022\026\n\016ta"
      "rgetBodyName\030\006 \001(\t\032\206\001\n\020ActuatorSettings\022"
      "\026\n\016spacecraftName\030\001 \001(\t\022\031\n\021viewThrusterP"
      "anel\030\002 \001(\005\022\027\n\017viewThrusterHUD\030\003 \001(\005\022\023\n\013v"
      "iewRWPanel\030\004 \001(\005\022\021\n\tviewRWHUD\030\005 \001(\005\032\227\001\n\013"
      "CustomModel\022\022\n\nmodelToUse\030\001 \001(\t\022\031\n\021simBo"
      "diesToModify\030\002 \003(\t\022\016\n\006offset\030\003 \003(\001\022\020\n\010ro"
      "tation\030\004 \003(\001\022\r\n\005scale\030\005 \003(\001\022\025\n\rcustomTex"
      "ture\030\006 \001(\t\022\021\n\tnormalMap\030\007 \001(\t\032\355\004\n\rVizSet"
      "tingsPb\022\017\n\007ambient\030\001 \001(\001\022\024\n\014orbitLinesOn"
      "\030\002 \001(\005\022\026\n\016spacecraftCSon\030\003 \001(\005\022\022\n\nplanet"
      "CSon\030\004 \001(\005\022\?\n\npointLines\030\005 \003(\0132+.vizProt"
      "obufferMessage.VizMessage.PointLine\022G\n\016k"
      "eepOutInCones\030\006 \003(\0132/.vizProtobufferMess"
      "age.VizMessage.KeepOutInCone\022F\n\tcameraOn"
      "e\030\007 \001(\01323.vizProtobufferMessage.VizMessa"
      "ge.CameraOneSettings\022F\n\tcameraTwo\030\010 \001(\0132"
      "3.vizProtobufferMessage.VizMessage.Camer"
      "aTwoSettings\022L\n\014planetCamera\030\t \001(\01326.viz"
      "ProtobufferMessage.VizMessage.PlanetCame"
      "raSettings\022L\n\020actuatorSettings\030\n \003(\01322.v"
      "izProtobufferMessage.VizMessage.Actuator"
      "Settings\022\016\n\006skybox\030\013 \001(\t\022C\n\014customModels"
      "\030\014 \003(\0132-.vizProtobufferMessage.VizMessag"
      "e.CustomModelb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3181);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vizMessage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_vizMessage_2eproto
namespace vizProtobufferMessage {

// ===================================================================

void VizMessage_TimeStamp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_TimeStamp::kFrameNumberFieldNumber;
const int VizMessage_TimeStamp::kSimTimeElapsedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_TimeStamp::VizMessage_TimeStamp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_TimeStamp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.TimeStamp)
}
VizMessage_TimeStamp::VizMessage_TimeStamp(const VizMessage_TimeStamp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&framenumber_, &from.framenumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&simtimeelapsed_) -
    reinterpret_cast<char*>(&framenumber_)) + sizeof(simtimeelapsed_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.TimeStamp)
}

void VizMessage_TimeStamp::SharedCtor() {
  ::memset(&framenumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&simtimeelapsed_) -
      reinterpret_cast<char*>(&framenumber_)) + sizeof(simtimeelapsed_));
  _cached_size_ = 0;
}

VizMessage_TimeStamp::~VizMessage_TimeStamp() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.TimeStamp)
  SharedDtor();
}

void VizMessage_TimeStamp::SharedDtor() {
}

void VizMessage_TimeStamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_TimeStamp::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_TimeStamp& VizMessage_TimeStamp::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_TimeStamp();
  return *internal_default_instance();
}

VizMessage_TimeStamp* VizMessage_TimeStamp::New(::google::protobuf::Arena* arena) const {
  VizMessage_TimeStamp* n = new VizMessage_TimeStamp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_TimeStamp::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.TimeStamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&framenumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&simtimeelapsed_) -
      reinterpret_cast<char*>(&framenumber_)) + sizeof(simtimeelapsed_));
  _internal_metadata_.Clear();
}

bool VizMessage_TimeStamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.TimeStamp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 frameNumber = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &framenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double simTimeElapsed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &simtimeelapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.TimeStamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.TimeStamp)
  return false;
#undef DO_
}

void VizMessage_TimeStamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.TimeStamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frameNumber = 1;
  if (this->framenumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->framenumber(), output);
  }

  // double simTimeElapsed = 2;
  if (this->simtimeelapsed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->simtimeelapsed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.TimeStamp)
}

::google::protobuf::uint8* VizMessage_TimeStamp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.TimeStamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frameNumber = 1;
  if (this->framenumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->framenumber(), target);
  }

  // double simTimeElapsed = 2;
  if (this->simtimeelapsed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->simtimeelapsed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.TimeStamp)
  return target;
}

size_t VizMessage_TimeStamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.TimeStamp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 frameNumber = 1;
  if (this->framenumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->framenumber());
  }

  // double simTimeElapsed = 2;
  if (this->simtimeelapsed() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_TimeStamp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_TimeStamp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_TimeStamp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.TimeStamp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.TimeStamp)
    MergeFrom(*source);
  }
}

void VizMessage_TimeStamp::MergeFrom(const VizMessage_TimeStamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.framenumber() != 0) {
    set_framenumber(from.framenumber());
  }
  if (from.simtimeelapsed() != 0) {
    set_simtimeelapsed(from.simtimeelapsed());
  }
}

void VizMessage_TimeStamp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_TimeStamp::CopyFrom(const VizMessage_TimeStamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_TimeStamp::IsInitialized() const {
  return true;
}

void VizMessage_TimeStamp::Swap(VizMessage_TimeStamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_TimeStamp::InternalSwap(VizMessage_TimeStamp* other) {
  using std::swap;
  swap(framenumber_, other->framenumber_);
  swap(simtimeelapsed_, other->simtimeelapsed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_TimeStamp::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_CelestialBody::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_CelestialBody::kBodyNameFieldNumber;
const int VizMessage_CelestialBody::kPositionFieldNumber;
const int VizMessage_CelestialBody::kVelocityFieldNumber;
const int VizMessage_CelestialBody::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_CelestialBody::VizMessage_CelestialBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CelestialBody();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.CelestialBody)
}
VizMessage_CelestialBody::VizMessage_CelestialBody(const VizMessage_CelestialBody& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      position_(from.position_),
      velocity_(from.velocity_),
      rotation_(from.rotation_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bodyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bodyname().size() > 0) {
    bodyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bodyname_);
  }
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.CelestialBody)
}

void VizMessage_CelestialBody::SharedCtor() {
  bodyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

VizMessage_CelestialBody::~VizMessage_CelestialBody() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.CelestialBody)
  SharedDtor();
}

void VizMessage_CelestialBody::SharedDtor() {
  bodyname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_CelestialBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_CelestialBody::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_CelestialBody& VizMessage_CelestialBody::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CelestialBody();
  return *internal_default_instance();
}

VizMessage_CelestialBody* VizMessage_CelestialBody::New(::google::protobuf::Arena* arena) const {
  VizMessage_CelestialBody* n = new VizMessage_CelestialBody;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_CelestialBody::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.CelestialBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  velocity_.Clear();
  rotation_.Clear();
  bodyname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool VizMessage_CelestialBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.CelestialBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bodyName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bodyname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bodyname().data(), static_cast<int>(this->bodyname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.CelestialBody.bodyName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_velocity())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_velocity())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double rotation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_rotation())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_rotation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.CelestialBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.CelestialBody)
  return false;
#undef DO_
}

void VizMessage_CelestialBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.CelestialBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bodyName = 1;
  if (this->bodyname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bodyname().data(), static_cast<int>(this->bodyname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CelestialBody.bodyName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bodyname(), output);
  }

  // repeated double position = 2;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _position_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->position().data(), this->position_size(), output);
  }

  // repeated double velocity = 3;
  if (this->velocity_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _velocity_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->velocity().data(), this->velocity_size(), output);
  }

  // repeated double rotation = 4;
  if (this->rotation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _rotation_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->rotation().data(), this->rotation_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.CelestialBody)
}

::google::protobuf::uint8* VizMessage_CelestialBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.CelestialBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bodyName = 1;
  if (this->bodyname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bodyname().data(), static_cast<int>(this->bodyname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CelestialBody.bodyName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bodyname(), target);
  }

  // repeated double position = 2;
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _position_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position_, target);
  }

  // repeated double velocity = 3;
  if (this->velocity_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _velocity_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->velocity_, target);
  }

  // repeated double rotation = 4;
  if (this->rotation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _rotation_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->rotation_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.CelestialBody)
  return target;
}

size_t VizMessage_CelestialBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.CelestialBody)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double velocity = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->velocity_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _velocity_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double rotation = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->rotation_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rotation_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string bodyName = 1;
  if (this->bodyname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bodyname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_CelestialBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.CelestialBody)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_CelestialBody* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_CelestialBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.CelestialBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.CelestialBody)
    MergeFrom(*source);
  }
}

void VizMessage_CelestialBody::MergeFrom(const VizMessage_CelestialBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.CelestialBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  velocity_.MergeFrom(from.velocity_);
  rotation_.MergeFrom(from.rotation_);
  if (from.bodyname().size() > 0) {

    bodyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bodyname_);
  }
}

void VizMessage_CelestialBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.CelestialBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_CelestialBody::CopyFrom(const VizMessage_CelestialBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.CelestialBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_CelestialBody::IsInitialized() const {
  return true;
}

void VizMessage_CelestialBody::Swap(VizMessage_CelestialBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_CelestialBody::InternalSwap(VizMessage_CelestialBody* other) {
  using std::swap;
  position_.InternalSwap(&other->position_);
  velocity_.InternalSwap(&other->velocity_);
  rotation_.InternalSwap(&other->rotation_);
  bodyname_.Swap(&other->bodyname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_CelestialBody::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_Spacecraft::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_Spacecraft::kSpacecraftNameFieldNumber;
const int VizMessage_Spacecraft::kPositionFieldNumber;
const int VizMessage_Spacecraft::kVelocityFieldNumber;
const int VizMessage_Spacecraft::kRotationFieldNumber;
const int VizMessage_Spacecraft::kReactionWheelsFieldNumber;
const int VizMessage_Spacecraft::kThrustersFieldNumber;
const int VizMessage_Spacecraft::kCSSFieldNumber;
const int VizMessage_Spacecraft::kStarTrackersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_Spacecraft::VizMessage_Spacecraft()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_Spacecraft();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.Spacecraft)
}
VizMessage_Spacecraft::VizMessage_Spacecraft(const VizMessage_Spacecraft& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      position_(from.position_),
      velocity_(from.velocity_),
      rotation_(from.rotation_),
      reactionwheels_(from.reactionwheels_),
      thrusters_(from.thrusters_),
      css_(from.css_),
      startrackers_(from.startrackers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spacecraftname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.spacecraftname().size() > 0) {
    spacecraftname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spacecraftname_);
  }
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.Spacecraft)
}

void VizMessage_Spacecraft::SharedCtor() {
  spacecraftname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

VizMessage_Spacecraft::~VizMessage_Spacecraft() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.Spacecraft)
  SharedDtor();
}

void VizMessage_Spacecraft::SharedDtor() {
  spacecraftname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_Spacecraft::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_Spacecraft::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_Spacecraft& VizMessage_Spacecraft::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_Spacecraft();
  return *internal_default_instance();
}

VizMessage_Spacecraft* VizMessage_Spacecraft::New(::google::protobuf::Arena* arena) const {
  VizMessage_Spacecraft* n = new VizMessage_Spacecraft;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_Spacecraft::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.Spacecraft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  velocity_.Clear();
  rotation_.Clear();
  reactionwheels_.Clear();
  thrusters_.Clear();
  css_.Clear();
  startrackers_.Clear();
  spacecraftname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool VizMessage_Spacecraft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.Spacecraft)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string spacecraftName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spacecraftname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->spacecraftname().data(), static_cast<int>(this->spacecraftname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_velocity())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_velocity())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double rotation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_rotation())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_rotation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vizProtobufferMessage.VizMessage.ReactionWheel reactionWheels = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_reactionwheels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vizProtobufferMessage.VizMessage.Thruster thrusters = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_thrusters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vizProtobufferMessage.VizMessage.CoarseSunSensor CSS = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_css()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vizProtobufferMessage.VizMessage.StarTracker starTrackers = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_startrackers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.Spacecraft)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.Spacecraft)
  return false;
#undef DO_
}

void VizMessage_Spacecraft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.Spacecraft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spacecraftName = 1;
  if (this->spacecraftname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spacecraftname().data(), static_cast<int>(this->spacecraftname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->spacecraftname(), output);
  }

  // repeated double position = 2;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _position_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->position().data(), this->position_size(), output);
  }

  // repeated double velocity = 3;
  if (this->velocity_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _velocity_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->velocity().data(), this->velocity_size(), output);
  }

  // repeated double rotation = 4;
  if (this->rotation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _rotation_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->rotation().data(), this->rotation_size(), output);
  }

  // repeated .vizProtobufferMessage.VizMessage.ReactionWheel reactionWheels = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reactionwheels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reactionwheels(static_cast<int>(i)), output);
  }

  // repeated .vizProtobufferMessage.VizMessage.Thruster thrusters = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->thrusters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->thrusters(static_cast<int>(i)), output);
  }

  // repeated .vizProtobufferMessage.VizMessage.CoarseSunSensor CSS = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->css_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->css(static_cast<int>(i)), output);
  }

  // repeated .vizProtobufferMessage.VizMessage.StarTracker starTrackers = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->startrackers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->startrackers(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.Spacecraft)
}

::google::protobuf::uint8* VizMessage_Spacecraft::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.Spacecraft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spacecraftName = 1;
  if (this->spacecraftname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spacecraftname().data(), static_cast<int>(this->spacecraftname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->spacecraftname(), target);
  }

  // repeated double position = 2;
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _position_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position_, target);
  }

  // repeated double velocity = 3;
  if (this->velocity_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _velocity_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->velocity_, target);
  }

  // repeated double rotation = 4;
  if (this->rotation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _rotation_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->rotation_, target);
  }

  // repeated .vizProtobufferMessage.VizMessage.ReactionWheel reactionWheels = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reactionwheels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->reactionwheels(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vizProtobufferMessage.VizMessage.Thruster thrusters = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->thrusters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->thrusters(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vizProtobufferMessage.VizMessage.CoarseSunSensor CSS = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->css_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->css(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vizProtobufferMessage.VizMessage.StarTracker starTrackers = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->startrackers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->startrackers(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.Spacecraft)
  return target;
}

size_t VizMessage_Spacecraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.Spacecraft)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double velocity = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->velocity_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _velocity_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double rotation = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->rotation_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rotation_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .vizProtobufferMessage.VizMessage.ReactionWheel reactionWheels = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->reactionwheels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->reactionwheels(static_cast<int>(i)));
    }
  }

  // repeated .vizProtobufferMessage.VizMessage.Thruster thrusters = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->thrusters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->thrusters(static_cast<int>(i)));
    }
  }

  // repeated .vizProtobufferMessage.VizMessage.CoarseSunSensor CSS = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->css_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->css(static_cast<int>(i)));
    }
  }

  // repeated .vizProtobufferMessage.VizMessage.StarTracker starTrackers = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->startrackers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->startrackers(static_cast<int>(i)));
    }
  }

  // string spacecraftName = 1;
  if (this->spacecraftname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->spacecraftname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_Spacecraft::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.Spacecraft)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_Spacecraft* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_Spacecraft>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.Spacecraft)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.Spacecraft)
    MergeFrom(*source);
  }
}

void VizMessage_Spacecraft::MergeFrom(const VizMessage_Spacecraft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.Spacecraft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  velocity_.MergeFrom(from.velocity_);
  rotation_.MergeFrom(from.rotation_);
  reactionwheels_.MergeFrom(from.reactionwheels_);
  thrusters_.MergeFrom(from.thrusters_);
  css_.MergeFrom(from.css_);
  startrackers_.MergeFrom(from.startrackers_);
  if (from.spacecraftname().size() > 0) {

    spacecraftname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spacecraftname_);
  }
}

void VizMessage_Spacecraft::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.Spacecraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_Spacecraft::CopyFrom(const VizMessage_Spacecraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.Spacecraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_Spacecraft::IsInitialized() const {
  return true;
}

void VizMessage_Spacecraft::Swap(VizMessage_Spacecraft* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_Spacecraft::InternalSwap(VizMessage_Spacecraft* other) {
  using std::swap;
  position_.InternalSwap(&other->position_);
  velocity_.InternalSwap(&other->velocity_);
  rotation_.InternalSwap(&other->rotation_);
  reactionwheels_.InternalSwap(&other->reactionwheels_);
  thrusters_.InternalSwap(&other->thrusters_);
  css_.InternalSwap(&other->css_);
  startrackers_.InternalSwap(&other->startrackers_);
  spacecraftname_.Swap(&other->spacecraftname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_Spacecraft::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_ReactionWheel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_ReactionWheel::kPositionFieldNumber;
const int VizMessage_ReactionWheel::kSpinAxisVectorFieldNumber;
const int VizMessage_ReactionWheel::kWheelSpeedFieldNumber;
const int VizMessage_ReactionWheel::kWheelTorqueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_ReactionWheel::VizMessage_ReactionWheel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_ReactionWheel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.ReactionWheel)
}
VizMessage_ReactionWheel::VizMessage_ReactionWheel(const VizMessage_ReactionWheel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      position_(from.position_),
      spinaxisvector_(from.spinaxisvector_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wheelspeed_, &from.wheelspeed_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheeltorque_) -
    reinterpret_cast<char*>(&wheelspeed_)) + sizeof(wheeltorque_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.ReactionWheel)
}

void VizMessage_ReactionWheel::SharedCtor() {
  ::memset(&wheelspeed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheeltorque_) -
      reinterpret_cast<char*>(&wheelspeed_)) + sizeof(wheeltorque_));
  _cached_size_ = 0;
}

VizMessage_ReactionWheel::~VizMessage_ReactionWheel() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.ReactionWheel)
  SharedDtor();
}

void VizMessage_ReactionWheel::SharedDtor() {
}

void VizMessage_ReactionWheel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_ReactionWheel::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_ReactionWheel& VizMessage_ReactionWheel::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_ReactionWheel();
  return *internal_default_instance();
}

VizMessage_ReactionWheel* VizMessage_ReactionWheel::New(::google::protobuf::Arena* arena) const {
  VizMessage_ReactionWheel* n = new VizMessage_ReactionWheel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_ReactionWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  spinaxisvector_.Clear();
  ::memset(&wheelspeed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheeltorque_) -
      reinterpret_cast<char*>(&wheelspeed_)) + sizeof(wheeltorque_));
  _internal_metadata_.Clear();
}

bool VizMessage_ReactionWheel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double spinAxisVector = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_spinaxisvector())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_spinaxisvector())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wheelSpeed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheelspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wheelTorque = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheeltorque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.ReactionWheel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.ReactionWheel)
  return false;
#undef DO_
}

void VizMessage_ReactionWheel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _position_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->position().data(), this->position_size(), output);
  }

  // repeated double spinAxisVector = 4;
  if (this->spinaxisvector_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _spinaxisvector_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->spinaxisvector().data(), this->spinaxisvector_size(), output);
  }

  // double wheelSpeed = 5;
  if (this->wheelspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->wheelspeed(), output);
  }

  // double wheelTorque = 6;
  if (this->wheeltorque() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->wheeltorque(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.ReactionWheel)
}

::google::protobuf::uint8* VizMessage_ReactionWheel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _position_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position_, target);
  }

  // repeated double spinAxisVector = 4;
  if (this->spinaxisvector_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _spinaxisvector_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->spinaxisvector_, target);
  }

  // double wheelSpeed = 5;
  if (this->wheelspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->wheelspeed(), target);
  }

  // double wheelTorque = 6;
  if (this->wheeltorque() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->wheeltorque(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.ReactionWheel)
  return target;
}

size_t VizMessage_ReactionWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double spinAxisVector = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->spinaxisvector_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _spinaxisvector_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // double wheelSpeed = 5;
  if (this->wheelspeed() != 0) {
    total_size += 1 + 8;
  }

  // double wheelTorque = 6;
  if (this->wheeltorque() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_ReactionWheel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_ReactionWheel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_ReactionWheel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.ReactionWheel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.ReactionWheel)
    MergeFrom(*source);
  }
}

void VizMessage_ReactionWheel::MergeFrom(const VizMessage_ReactionWheel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  spinaxisvector_.MergeFrom(from.spinaxisvector_);
  if (from.wheelspeed() != 0) {
    set_wheelspeed(from.wheelspeed());
  }
  if (from.wheeltorque() != 0) {
    set_wheeltorque(from.wheeltorque());
  }
}

void VizMessage_ReactionWheel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_ReactionWheel::CopyFrom(const VizMessage_ReactionWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_ReactionWheel::IsInitialized() const {
  return true;
}

void VizMessage_ReactionWheel::Swap(VizMessage_ReactionWheel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_ReactionWheel::InternalSwap(VizMessage_ReactionWheel* other) {
  using std::swap;
  position_.InternalSwap(&other->position_);
  spinaxisvector_.InternalSwap(&other->spinaxisvector_);
  swap(wheelspeed_, other->wheelspeed_);
  swap(wheeltorque_, other->wheeltorque_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_ReactionWheel::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_Thruster::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_Thruster::kPositionFieldNumber;
const int VizMessage_Thruster::kThrustVectorFieldNumber;
const int VizMessage_Thruster::kCurrentThrustFieldNumber;
const int VizMessage_Thruster::kMaxThrustFieldNumber;
const int VizMessage_Thruster::kThrusterGroupIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_Thruster::VizMessage_Thruster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_Thruster();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.Thruster)
}
VizMessage_Thruster::VizMessage_Thruster(const VizMessage_Thruster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      position_(from.position_),
      thrustvector_(from.thrustvector_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&currentthrust_, &from.currentthrust_,
    static_cast<size_t>(reinterpret_cast<char*>(&thrustergroupid_) -
    reinterpret_cast<char*>(&currentthrust_)) + sizeof(thrustergroupid_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.Thruster)
}

void VizMessage_Thruster::SharedCtor() {
  ::memset(&currentthrust_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thrustergroupid_) -
      reinterpret_cast<char*>(&currentthrust_)) + sizeof(thrustergroupid_));
  _cached_size_ = 0;
}

VizMessage_Thruster::~VizMessage_Thruster() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.Thruster)
  SharedDtor();
}

void VizMessage_Thruster::SharedDtor() {
}

void VizMessage_Thruster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_Thruster::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_Thruster& VizMessage_Thruster::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_Thruster();
  return *internal_default_instance();
}

VizMessage_Thruster* VizMessage_Thruster::New(::google::protobuf::Arena* arena) const {
  VizMessage_Thruster* n = new VizMessage_Thruster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_Thruster::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.Thruster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  thrustvector_.Clear();
  ::memset(&currentthrust_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thrustergroupid_) -
      reinterpret_cast<char*>(&currentthrust_)) + sizeof(thrustergroupid_));
  _internal_metadata_.Clear();
}

bool VizMessage_Thruster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.Thruster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double thrustVector = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_thrustvector())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_thrustvector())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double currentThrust = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currentthrust_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double maxThrust = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxthrust_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 thrusterGroupID = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thrustergroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.Thruster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.Thruster)
  return false;
#undef DO_
}

void VizMessage_Thruster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.Thruster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _position_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->position().data(), this->position_size(), output);
  }

  // repeated double thrustVector = 4;
  if (this->thrustvector_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _thrustvector_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->thrustvector().data(), this->thrustvector_size(), output);
  }

  // double currentThrust = 5;
  if (this->currentthrust() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->currentthrust(), output);
  }

  // double maxThrust = 6;
  if (this->maxthrust() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->maxthrust(), output);
  }

  // int32 thrusterGroupID = 7;
  if (this->thrustergroupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->thrustergroupid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.Thruster)
}

::google::protobuf::uint8* VizMessage_Thruster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.Thruster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _position_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position_, target);
  }

  // repeated double thrustVector = 4;
  if (this->thrustvector_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _thrustvector_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->thrustvector_, target);
  }

  // double currentThrust = 5;
  if (this->currentthrust() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->currentthrust(), target);
  }

  // double maxThrust = 6;
  if (this->maxthrust() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->maxthrust(), target);
  }

  // int32 thrusterGroupID = 7;
  if (this->thrustergroupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->thrustergroupid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.Thruster)
  return target;
}

size_t VizMessage_Thruster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.Thruster)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double thrustVector = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->thrustvector_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _thrustvector_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // double currentThrust = 5;
  if (this->currentthrust() != 0) {
    total_size += 1 + 8;
  }

  // double maxThrust = 6;
  if (this->maxthrust() != 0) {
    total_size += 1 + 8;
  }

  // int32 thrusterGroupID = 7;
  if (this->thrustergroupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thrustergroupid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_Thruster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.Thruster)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_Thruster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_Thruster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.Thruster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.Thruster)
    MergeFrom(*source);
  }
}

void VizMessage_Thruster::MergeFrom(const VizMessage_Thruster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.Thruster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  thrustvector_.MergeFrom(from.thrustvector_);
  if (from.currentthrust() != 0) {
    set_currentthrust(from.currentthrust());
  }
  if (from.maxthrust() != 0) {
    set_maxthrust(from.maxthrust());
  }
  if (from.thrustergroupid() != 0) {
    set_thrustergroupid(from.thrustergroupid());
  }
}

void VizMessage_Thruster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.Thruster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_Thruster::CopyFrom(const VizMessage_Thruster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.Thruster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_Thruster::IsInitialized() const {
  return true;
}

void VizMessage_Thruster::Swap(VizMessage_Thruster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_Thruster::InternalSwap(VizMessage_Thruster* other) {
  using std::swap;
  position_.InternalSwap(&other->position_);
  thrustvector_.InternalSwap(&other->thrustvector_);
  swap(currentthrust_, other->currentthrust_);
  swap(maxthrust_, other->maxthrust_);
  swap(thrustergroupid_, other->thrustergroupid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_Thruster::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_CoarseSunSensor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_CoarseSunSensor::kPositionFieldNumber;
const int VizMessage_CoarseSunSensor::kNormalVectorFieldNumber;
const int VizMessage_CoarseSunSensor::kCurrentMsmtFieldNumber;
const int VizMessage_CoarseSunSensor::kCSSGroupIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_CoarseSunSensor::VizMessage_CoarseSunSensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CoarseSunSensor();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.CoarseSunSensor)
}
VizMessage_CoarseSunSensor::VizMessage_CoarseSunSensor(const VizMessage_CoarseSunSensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      position_(from.position_),
      normalvector_(from.normalvector_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&currentmsmt_, &from.currentmsmt_,
    static_cast<size_t>(reinterpret_cast<char*>(&cssgroupid_) -
    reinterpret_cast<char*>(&currentmsmt_)) + sizeof(cssgroupid_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.CoarseSunSensor)
}

void VizMessage_CoarseSunSensor::SharedCtor() {
  ::memset(&currentmsmt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cssgroupid_) -
      reinterpret_cast<char*>(&currentmsmt_)) + sizeof(cssgroupid_));
  _cached_size_ = 0;
}

VizMessage_CoarseSunSensor::~VizMessage_CoarseSunSensor() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  SharedDtor();
}

void VizMessage_CoarseSunSensor::SharedDtor() {
}

void VizMessage_CoarseSunSensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_CoarseSunSensor::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_CoarseSunSensor& VizMessage_CoarseSunSensor::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CoarseSunSensor();
  return *internal_default_instance();
}

VizMessage_CoarseSunSensor* VizMessage_CoarseSunSensor::New(::google::protobuf::Arena* arena) const {
  VizMessage_CoarseSunSensor* n = new VizMessage_CoarseSunSensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_CoarseSunSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  normalvector_.Clear();
  ::memset(&currentmsmt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cssgroupid_) -
      reinterpret_cast<char*>(&currentmsmt_)) + sizeof(cssgroupid_));
  _internal_metadata_.Clear();
}

bool VizMessage_CoarseSunSensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double normalVector = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_normalvector())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_normalvector())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double currentMsmt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currentmsmt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CSSGroupID = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cssgroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  return false;
#undef DO_
}

void VizMessage_CoarseSunSensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _position_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->position().data(), this->position_size(), output);
  }

  // repeated double normalVector = 4;
  if (this->normalvector_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _normalvector_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->normalvector().data(), this->normalvector_size(), output);
  }

  // double currentMsmt = 5;
  if (this->currentmsmt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->currentmsmt(), output);
  }

  // int32 CSSGroupID = 7;
  if (this->cssgroupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cssgroupid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.CoarseSunSensor)
}

::google::protobuf::uint8* VizMessage_CoarseSunSensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _position_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position_, target);
  }

  // repeated double normalVector = 4;
  if (this->normalvector_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _normalvector_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->normalvector_, target);
  }

  // double currentMsmt = 5;
  if (this->currentmsmt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->currentmsmt(), target);
  }

  // int32 CSSGroupID = 7;
  if (this->cssgroupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cssgroupid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  return target;
}

size_t VizMessage_CoarseSunSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double normalVector = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->normalvector_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _normalvector_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // double currentMsmt = 5;
  if (this->currentmsmt() != 0) {
    total_size += 1 + 8;
  }

  // int32 CSSGroupID = 7;
  if (this->cssgroupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cssgroupid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_CoarseSunSensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_CoarseSunSensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_CoarseSunSensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.CoarseSunSensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.CoarseSunSensor)
    MergeFrom(*source);
  }
}

void VizMessage_CoarseSunSensor::MergeFrom(const VizMessage_CoarseSunSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  normalvector_.MergeFrom(from.normalvector_);
  if (from.currentmsmt() != 0) {
    set_currentmsmt(from.currentmsmt());
  }
  if (from.cssgroupid() != 0) {
    set_cssgroupid(from.cssgroupid());
  }
}

void VizMessage_CoarseSunSensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_CoarseSunSensor::CopyFrom(const VizMessage_CoarseSunSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_CoarseSunSensor::IsInitialized() const {
  return true;
}

void VizMessage_CoarseSunSensor::Swap(VizMessage_CoarseSunSensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_CoarseSunSensor::InternalSwap(VizMessage_CoarseSunSensor* other) {
  using std::swap;
  position_.InternalSwap(&other->position_);
  normalvector_.InternalSwap(&other->normalvector_);
  swap(currentmsmt_, other->currentmsmt_);
  swap(cssgroupid_, other->cssgroupid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_CoarseSunSensor::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_StarTracker::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_StarTracker::kPositionFieldNumber;
const int VizMessage_StarTracker::kRotationFieldNumber;
const int VizMessage_StarTracker::kFieldOfViewHeightFieldNumber;
const int VizMessage_StarTracker::kFieldOfViewWidthFieldNumber;
const int VizMessage_StarTracker::kStarTrackerGroupIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_StarTracker::VizMessage_StarTracker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_StarTracker();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.StarTracker)
}
VizMessage_StarTracker::VizMessage_StarTracker(const VizMessage_StarTracker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      position_(from.position_),
      rotation_(from.rotation_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fieldofviewheight_, &from.fieldofviewheight_,
    static_cast<size_t>(reinterpret_cast<char*>(&startrackergroupid_) -
    reinterpret_cast<char*>(&fieldofviewheight_)) + sizeof(startrackergroupid_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.StarTracker)
}

void VizMessage_StarTracker::SharedCtor() {
  ::memset(&fieldofviewheight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startrackergroupid_) -
      reinterpret_cast<char*>(&fieldofviewheight_)) + sizeof(startrackergroupid_));
  _cached_size_ = 0;
}

VizMessage_StarTracker::~VizMessage_StarTracker() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.StarTracker)
  SharedDtor();
}

void VizMessage_StarTracker::SharedDtor() {
}

void VizMessage_StarTracker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_StarTracker::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_StarTracker& VizMessage_StarTracker::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_StarTracker();
  return *internal_default_instance();
}

VizMessage_StarTracker* VizMessage_StarTracker::New(::google::protobuf::Arena* arena) const {
  VizMessage_StarTracker* n = new VizMessage_StarTracker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_StarTracker::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.StarTracker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  rotation_.Clear();
  ::memset(&fieldofviewheight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startrackergroupid_) -
      reinterpret_cast<char*>(&fieldofviewheight_)) + sizeof(startrackergroupid_));
  _internal_metadata_.Clear();
}

bool VizMessage_StarTracker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.StarTracker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double rotation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_rotation())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_rotation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fieldOfViewHeight = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fieldofviewheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fieldOfViewWidth = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fieldofviewwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 starTrackerGroupID = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startrackergroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.StarTracker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.StarTracker)
  return false;
#undef DO_
}

void VizMessage_StarTracker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.StarTracker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _position_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->position().data(), this->position_size(), output);
  }

  // repeated double rotation = 4;
  if (this->rotation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _rotation_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->rotation().data(), this->rotation_size(), output);
  }

  // double fieldOfViewHeight = 5;
  if (this->fieldofviewheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->fieldofviewheight(), output);
  }

  // double fieldOfViewWidth = 6;
  if (this->fieldofviewwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->fieldofviewwidth(), output);
  }

  // int32 starTrackerGroupID = 7;
  if (this->startrackergroupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->startrackergroupid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.StarTracker)
}

::google::protobuf::uint8* VizMessage_StarTracker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.StarTracker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _position_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position_, target);
  }

  // repeated double rotation = 4;
  if (this->rotation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _rotation_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->rotation_, target);
  }

  // double fieldOfViewHeight = 5;
  if (this->fieldofviewheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->fieldofviewheight(), target);
  }

  // double fieldOfViewWidth = 6;
  if (this->fieldofviewwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->fieldofviewwidth(), target);
  }

  // int32 starTrackerGroupID = 7;
  if (this->startrackergroupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->startrackergroupid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.StarTracker)
  return target;
}

size_t VizMessage_StarTracker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.StarTracker)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double rotation = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->rotation_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rotation_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // double fieldOfViewHeight = 5;
  if (this->fieldofviewheight() != 0) {
    total_size += 1 + 8;
  }

  // double fieldOfViewWidth = 6;
  if (this->fieldofviewwidth() != 0) {
    total_size += 1 + 8;
  }

  // int32 starTrackerGroupID = 7;
  if (this->startrackergroupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startrackergroupid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_StarTracker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.StarTracker)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_StarTracker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_StarTracker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.StarTracker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.StarTracker)
    MergeFrom(*source);
  }
}

void VizMessage_StarTracker::MergeFrom(const VizMessage_StarTracker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.StarTracker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  rotation_.MergeFrom(from.rotation_);
  if (from.fieldofviewheight() != 0) {
    set_fieldofviewheight(from.fieldofviewheight());
  }
  if (from.fieldofviewwidth() != 0) {
    set_fieldofviewwidth(from.fieldofviewwidth());
  }
  if (from.startrackergroupid() != 0) {
    set_startrackergroupid(from.startrackergroupid());
  }
}

void VizMessage_StarTracker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.StarTracker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_StarTracker::CopyFrom(const VizMessage_StarTracker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.StarTracker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_StarTracker::IsInitialized() const {
  return true;
}

void VizMessage_StarTracker::Swap(VizMessage_StarTracker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_StarTracker::InternalSwap(VizMessage_StarTracker* other) {
  using std::swap;
  position_.InternalSwap(&other->position_);
  rotation_.InternalSwap(&other->rotation_);
  swap(fieldofviewheight_, other->fieldofviewheight_);
  swap(fieldofviewwidth_, other->fieldofviewwidth_);
  swap(startrackergroupid_, other->startrackergroupid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_StarTracker::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_CameraConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_CameraConfig::kCameraIDFieldNumber;
const int VizMessage_CameraConfig::kParentNameFieldNumber;
const int VizMessage_CameraConfig::kFieldOfViewFieldNumber;
const int VizMessage_CameraConfig::kResolutionFieldNumber;
const int VizMessage_CameraConfig::kFocalLengthFieldNumber;
const int VizMessage_CameraConfig::kSensorSizeFieldNumber;
const int VizMessage_CameraConfig::kCameraPosBFieldNumber;
const int VizMessage_CameraConfig::kCameraDirBFieldNumber;
const int VizMessage_CameraConfig::kRenderRateFieldNumber;
const int VizMessage_CameraConfig::kSkyboxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_CameraConfig::VizMessage_CameraConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CameraConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.CameraConfig)
}
VizMessage_CameraConfig::VizMessage_CameraConfig(const VizMessage_CameraConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      resolution_(from.resolution_),
      sensorsize_(from.sensorsize_),
      camerapos_b_(from.camerapos_b_),
      cameradir_b_(from.cameradir_b_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parentname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parentname().size() > 0) {
    parentname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parentname_);
  }
  skybox_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.skybox().size() > 0) {
    skybox_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skybox_);
  }
  ::memcpy(&cameraid_, &from.cameraid_,
    static_cast<size_t>(reinterpret_cast<char*>(&renderrate_) -
    reinterpret_cast<char*>(&cameraid_)) + sizeof(renderrate_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.CameraConfig)
}

void VizMessage_CameraConfig::SharedCtor() {
  parentname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skybox_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cameraid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&renderrate_) -
      reinterpret_cast<char*>(&cameraid_)) + sizeof(renderrate_));
  _cached_size_ = 0;
}

VizMessage_CameraConfig::~VizMessage_CameraConfig() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.CameraConfig)
  SharedDtor();
}

void VizMessage_CameraConfig::SharedDtor() {
  parentname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skybox_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_CameraConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_CameraConfig::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_CameraConfig& VizMessage_CameraConfig::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CameraConfig();
  return *internal_default_instance();
}

VizMessage_CameraConfig* VizMessage_CameraConfig::New(::google::protobuf::Arena* arena) const {
  VizMessage_CameraConfig* n = new VizMessage_CameraConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_CameraConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.CameraConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resolution_.Clear();
  sensorsize_.Clear();
  camerapos_b_.Clear();
  cameradir_b_.Clear();
  parentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skybox_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cameraid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&renderrate_) -
      reinterpret_cast<char*>(&cameraid_)) + sizeof(renderrate_));
  _internal_metadata_.Clear();
}

bool VizMessage_CameraConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.CameraConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 cameraID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cameraid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string parentName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parentname().data(), static_cast<int>(this->parentname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.CameraConfig.parentName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fieldOfView = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fieldofview_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 resolution = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_resolution())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 34u, input, this->mutable_resolution())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double focalLength = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &focallength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double sensorSize = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_sensorsize())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50u, input, this->mutable_sensorsize())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double cameraPos_B = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_camerapos_b())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 58u, input, this->mutable_camerapos_b())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double cameraDir_B = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_cameradir_b())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 66u, input, this->mutable_cameradir_b())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 renderRate = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &renderrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string skybox = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skybox()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->skybox().data(), static_cast<int>(this->skybox().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.CameraConfig.skybox"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.CameraConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.CameraConfig)
  return false;
#undef DO_
}

void VizMessage_CameraConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.CameraConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cameraID = 1;
  if (this->cameraid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cameraid(), output);
  }

  // string parentName = 2;
  if (this->parentname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parentname().data(), static_cast<int>(this->parentname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CameraConfig.parentName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->parentname(), output);
  }

  // double fieldOfView = 3;
  if (this->fieldofview() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fieldofview(), output);
  }

  // repeated int64 resolution = 4;
  if (this->resolution_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _resolution_cached_byte_size_));
  }
  for (int i = 0, n = this->resolution_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->resolution(i), output);
  }

  // double focalLength = 5;
  if (this->focallength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->focallength(), output);
  }

  // repeated double sensorSize = 6;
  if (this->sensorsize_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _sensorsize_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->sensorsize().data(), this->sensorsize_size(), output);
  }

  // repeated double cameraPos_B = 7;
  if (this->camerapos_b_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _camerapos_b_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->camerapos_b().data(), this->camerapos_b_size(), output);
  }

  // repeated double cameraDir_B = 8;
  if (this->cameradir_b_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _cameradir_b_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->cameradir_b().data(), this->cameradir_b_size(), output);
  }

  // uint64 renderRate = 9;
  if (this->renderrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->renderrate(), output);
  }

  // string skybox = 10;
  if (this->skybox().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->skybox().data(), static_cast<int>(this->skybox().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CameraConfig.skybox");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->skybox(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.CameraConfig)
}

::google::protobuf::uint8* VizMessage_CameraConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.CameraConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cameraID = 1;
  if (this->cameraid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cameraid(), target);
  }

  // string parentName = 2;
  if (this->parentname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parentname().data(), static_cast<int>(this->parentname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CameraConfig.parentName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->parentname(), target);
  }

  // double fieldOfView = 3;
  if (this->fieldofview() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->fieldofview(), target);
  }

  // repeated int64 resolution = 4;
  if (this->resolution_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _resolution_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->resolution_, target);
  }

  // double focalLength = 5;
  if (this->focallength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->focallength(), target);
  }

  // repeated double sensorSize = 6;
  if (this->sensorsize_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _sensorsize_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->sensorsize_, target);
  }

  // repeated double cameraPos_B = 7;
  if (this->camerapos_b_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _camerapos_b_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->camerapos_b_, target);
  }

  // repeated double cameraDir_B = 8;
  if (this->cameradir_b_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _cameradir_b_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->cameradir_b_, target);
  }

  // uint64 renderRate = 9;
  if (this->renderrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->renderrate(), target);
  }

  // string skybox = 10;
  if (this->skybox().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->skybox().data(), static_cast<int>(this->skybox().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CameraConfig.skybox");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->skybox(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.CameraConfig)
  return target;
}

size_t VizMessage_CameraConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.CameraConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int64 resolution = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->resolution_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _resolution_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double sensorSize = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->sensorsize_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sensorsize_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double cameraPos_B = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->camerapos_b_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _camerapos_b_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double cameraDir_B = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->cameradir_b_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cameradir_b_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string parentName = 2;
  if (this->parentname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parentname());
  }

  // string skybox = 10;
  if (this->skybox().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->skybox());
  }

  // int64 cameraID = 1;
  if (this->cameraid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cameraid());
  }

  // double fieldOfView = 3;
  if (this->fieldofview() != 0) {
    total_size += 1 + 8;
  }

  // double focalLength = 5;
  if (this->focallength() != 0) {
    total_size += 1 + 8;
  }

  // uint64 renderRate = 9;
  if (this->renderrate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->renderrate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_CameraConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.CameraConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_CameraConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_CameraConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.CameraConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.CameraConfig)
    MergeFrom(*source);
  }
}

void VizMessage_CameraConfig::MergeFrom(const VizMessage_CameraConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.CameraConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resolution_.MergeFrom(from.resolution_);
  sensorsize_.MergeFrom(from.sensorsize_);
  camerapos_b_.MergeFrom(from.camerapos_b_);
  cameradir_b_.MergeFrom(from.cameradir_b_);
  if (from.parentname().size() > 0) {

    parentname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parentname_);
  }
  if (from.skybox().size() > 0) {

    skybox_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skybox_);
  }
  if (from.cameraid() != 0) {
    set_cameraid(from.cameraid());
  }
  if (from.fieldofview() != 0) {
    set_fieldofview(from.fieldofview());
  }
  if (from.focallength() != 0) {
    set_focallength(from.focallength());
  }
  if (from.renderrate() != 0) {
    set_renderrate(from.renderrate());
  }
}

void VizMessage_CameraConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.CameraConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_CameraConfig::CopyFrom(const VizMessage_CameraConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.CameraConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_CameraConfig::IsInitialized() const {
  return true;
}

void VizMessage_CameraConfig::Swap(VizMessage_CameraConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_CameraConfig::InternalSwap(VizMessage_CameraConfig* other) {
  using std::swap;
  resolution_.InternalSwap(&other->resolution_);
  sensorsize_.InternalSwap(&other->sensorsize_);
  camerapos_b_.InternalSwap(&other->camerapos_b_);
  cameradir_b_.InternalSwap(&other->cameradir_b_);
  parentname_.Swap(&other->parentname_);
  skybox_.Swap(&other->skybox_);
  swap(cameraid_, other->cameraid_);
  swap(fieldofview_, other->fieldofview_);
  swap(focallength_, other->focallength_);
  swap(renderrate_, other->renderrate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_CameraConfig::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_PointLine::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_PointLine::kFromBodyNameFieldNumber;
const int VizMessage_PointLine::kToBodyNameFieldNumber;
const int VizMessage_PointLine::kLineColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_PointLine::VizMessage_PointLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_PointLine();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.PointLine)
}
VizMessage_PointLine::VizMessage_PointLine(const VizMessage_PointLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      linecolor_(from.linecolor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frombodyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.frombodyname().size() > 0) {
    frombodyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frombodyname_);
  }
  tobodyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tobodyname().size() > 0) {
    tobodyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tobodyname_);
  }
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.PointLine)
}

void VizMessage_PointLine::SharedCtor() {
  frombodyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tobodyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

VizMessage_PointLine::~VizMessage_PointLine() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.PointLine)
  SharedDtor();
}

void VizMessage_PointLine::SharedDtor() {
  frombodyname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tobodyname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_PointLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_PointLine::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_PointLine& VizMessage_PointLine::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_PointLine();
  return *internal_default_instance();
}

VizMessage_PointLine* VizMessage_PointLine::New(::google::protobuf::Arena* arena) const {
  VizMessage_PointLine* n = new VizMessage_PointLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_PointLine::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.PointLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  linecolor_.Clear();
  frombodyname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tobodyname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool VizMessage_PointLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.PointLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string fromBodyName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frombodyname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->frombodyname().data(), static_cast<int>(this->frombodyname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.PointLine.fromBodyName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string toBodyName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tobodyname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tobodyname().data(), static_cast<int>(this->tobodyname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.PointLine.toBodyName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 lineColor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_linecolor())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_linecolor())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.PointLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.PointLine)
  return false;
#undef DO_
}

void VizMessage_PointLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.PointLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fromBodyName = 1;
  if (this->frombodyname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frombodyname().data(), static_cast<int>(this->frombodyname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.PointLine.fromBodyName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->frombodyname(), output);
  }

  // string toBodyName = 2;
  if (this->tobodyname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tobodyname().data(), static_cast<int>(this->tobodyname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.PointLine.toBodyName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tobodyname(), output);
  }

  // repeated int32 lineColor = 3;
  if (this->linecolor_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _linecolor_cached_byte_size_));
  }
  for (int i = 0, n = this->linecolor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->linecolor(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.PointLine)
}

::google::protobuf::uint8* VizMessage_PointLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.PointLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fromBodyName = 1;
  if (this->frombodyname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frombodyname().data(), static_cast<int>(this->frombodyname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.PointLine.fromBodyName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->frombodyname(), target);
  }

  // string toBodyName = 2;
  if (this->tobodyname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tobodyname().data(), static_cast<int>(this->tobodyname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.PointLine.toBodyName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tobodyname(), target);
  }

  // repeated int32 lineColor = 3;
  if (this->linecolor_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _linecolor_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->linecolor_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.PointLine)
  return target;
}

size_t VizMessage_PointLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.PointLine)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 lineColor = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->linecolor_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _linecolor_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string fromBodyName = 1;
  if (this->frombodyname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frombodyname());
  }

  // string toBodyName = 2;
  if (this->tobodyname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tobodyname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_PointLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.PointLine)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_PointLine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_PointLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.PointLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.PointLine)
    MergeFrom(*source);
  }
}

void VizMessage_PointLine::MergeFrom(const VizMessage_PointLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.PointLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  linecolor_.MergeFrom(from.linecolor_);
  if (from.frombodyname().size() > 0) {

    frombodyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frombodyname_);
  }
  if (from.tobodyname().size() > 0) {

    tobodyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tobodyname_);
  }
}

void VizMessage_PointLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.PointLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_PointLine::CopyFrom(const VizMessage_PointLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.PointLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_PointLine::IsInitialized() const {
  return true;
}

void VizMessage_PointLine::Swap(VizMessage_PointLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_PointLine::InternalSwap(VizMessage_PointLine* other) {
  using std::swap;
  linecolor_.InternalSwap(&other->linecolor_);
  frombodyname_.Swap(&other->frombodyname_);
  tobodyname_.Swap(&other->tobodyname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_PointLine::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_KeepOutInCone::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_KeepOutInCone::kIsKeepInFieldNumber;
const int VizMessage_KeepOutInCone::kPositionFieldNumber;
const int VizMessage_KeepOutInCone::kNormalVectorFieldNumber;
const int VizMessage_KeepOutInCone::kIncidenceAngleFieldNumber;
const int VizMessage_KeepOutInCone::kConeHeightFieldNumber;
const int VizMessage_KeepOutInCone::kFromBodyNameFieldNumber;
const int VizMessage_KeepOutInCone::kToBodyNameFieldNumber;
const int VizMessage_KeepOutInCone::kConeColorFieldNumber;
const int VizMessage_KeepOutInCone::kConeNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_KeepOutInCone::VizMessage_KeepOutInCone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_KeepOutInCone();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.KeepOutInCone)
}
VizMessage_KeepOutInCone::VizMessage_KeepOutInCone(const VizMessage_KeepOutInCone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      position_(from.position_),
      normalvector_(from.normalvector_),
      conecolor_(from.conecolor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frombodyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.frombodyname().size() > 0) {
    frombodyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frombodyname_);
  }
  tobodyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tobodyname().size() > 0) {
    tobodyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tobodyname_);
  }
  conename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.conename().size() > 0) {
    conename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conename_);
  }
  ::memcpy(&incidenceangle_, &from.incidenceangle_,
    static_cast<size_t>(reinterpret_cast<char*>(&iskeepin_) -
    reinterpret_cast<char*>(&incidenceangle_)) + sizeof(iskeepin_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.KeepOutInCone)
}

void VizMessage_KeepOutInCone::SharedCtor() {
  frombodyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tobodyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&incidenceangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iskeepin_) -
      reinterpret_cast<char*>(&incidenceangle_)) + sizeof(iskeepin_));
  _cached_size_ = 0;
}

VizMessage_KeepOutInCone::~VizMessage_KeepOutInCone() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.KeepOutInCone)
  SharedDtor();
}

void VizMessage_KeepOutInCone::SharedDtor() {
  frombodyname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tobodyname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_KeepOutInCone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_KeepOutInCone::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_KeepOutInCone& VizMessage_KeepOutInCone::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_KeepOutInCone();
  return *internal_default_instance();
}

VizMessage_KeepOutInCone* VizMessage_KeepOutInCone::New(::google::protobuf::Arena* arena) const {
  VizMessage_KeepOutInCone* n = new VizMessage_KeepOutInCone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_KeepOutInCone::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.KeepOutInCone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  normalvector_.Clear();
  conecolor_.Clear();
  frombodyname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tobodyname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&incidenceangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iskeepin_) -
      reinterpret_cast<char*>(&incidenceangle_)) + sizeof(iskeepin_));
  _internal_metadata_.Clear();
}

bool VizMessage_KeepOutInCone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.KeepOutInCone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isKeepIn = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iskeepin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double normalVector = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_normalvector())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_normalvector())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double incidenceAngle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &incidenceangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double coneHeight = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &coneheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fromBodyName = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frombodyname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->frombodyname().data(), static_cast<int>(this->frombodyname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.KeepOutInCone.fromBodyName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string toBodyName = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tobodyname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tobodyname().data(), static_cast<int>(this->tobodyname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.KeepOutInCone.toBodyName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 coneColor = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_conecolor())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 66u, input, this->mutable_conecolor())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string coneName = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->conename().data(), static_cast<int>(this->conename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.KeepOutInCone.coneName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.KeepOutInCone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.KeepOutInCone)
  return false;
#undef DO_
}

void VizMessage_KeepOutInCone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.KeepOutInCone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isKeepIn = 1;
  if (this->iskeepin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->iskeepin(), output);
  }

  // repeated double position = 2;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _position_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->position().data(), this->position_size(), output);
  }

  // repeated double normalVector = 3;
  if (this->normalvector_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _normalvector_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->normalvector().data(), this->normalvector_size(), output);
  }

  // double incidenceAngle = 4;
  if (this->incidenceangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->incidenceangle(), output);
  }

  // double coneHeight = 5;
  if (this->coneheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->coneheight(), output);
  }

  // string fromBodyName = 6;
  if (this->frombodyname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frombodyname().data(), static_cast<int>(this->frombodyname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.KeepOutInCone.fromBodyName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->frombodyname(), output);
  }

  // string toBodyName = 7;
  if (this->tobodyname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tobodyname().data(), static_cast<int>(this->tobodyname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.KeepOutInCone.toBodyName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->tobodyname(), output);
  }

  // repeated int64 coneColor = 8;
  if (this->conecolor_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _conecolor_cached_byte_size_));
  }
  for (int i = 0, n = this->conecolor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->conecolor(i), output);
  }

  // string coneName = 9;
  if (this->conename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->conename().data(), static_cast<int>(this->conename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.KeepOutInCone.coneName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->conename(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.KeepOutInCone)
}

::google::protobuf::uint8* VizMessage_KeepOutInCone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.KeepOutInCone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isKeepIn = 1;
  if (this->iskeepin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->iskeepin(), target);
  }

  // repeated double position = 2;
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _position_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position_, target);
  }

  // repeated double normalVector = 3;
  if (this->normalvector_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _normalvector_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->normalvector_, target);
  }

  // double incidenceAngle = 4;
  if (this->incidenceangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->incidenceangle(), target);
  }

  // double coneHeight = 5;
  if (this->coneheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->coneheight(), target);
  }

  // string fromBodyName = 6;
  if (this->frombodyname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frombodyname().data(), static_cast<int>(this->frombodyname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.KeepOutInCone.fromBodyName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->frombodyname(), target);
  }

  // string toBodyName = 7;
  if (this->tobodyname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tobodyname().data(), static_cast<int>(this->tobodyname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.KeepOutInCone.toBodyName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tobodyname(), target);
  }

  // repeated int64 coneColor = 8;
  if (this->conecolor_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _conecolor_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->conecolor_, target);
  }

  // string coneName = 9;
  if (this->conename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->conename().data(), static_cast<int>(this->conename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.KeepOutInCone.coneName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->conename(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.KeepOutInCone)
  return target;
}

size_t VizMessage_KeepOutInCone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.KeepOutInCone)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double normalVector = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->normalvector_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _normalvector_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 coneColor = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->conecolor_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _conecolor_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string fromBodyName = 6;
  if (this->frombodyname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frombodyname());
  }

  // string toBodyName = 7;
  if (this->tobodyname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tobodyname());
  }

  // string coneName = 9;
  if (this->conename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->conename());
  }

  // double incidenceAngle = 4;
  if (this->incidenceangle() != 0) {
    total_size += 1 + 8;
  }

  // double coneHeight = 5;
  if (this->coneheight() != 0) {
    total_size += 1 + 8;
  }

  // bool isKeepIn = 1;
  if (this->iskeepin() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_KeepOutInCone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.KeepOutInCone)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_KeepOutInCone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_KeepOutInCone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.KeepOutInCone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.KeepOutInCone)
    MergeFrom(*source);
  }
}

void VizMessage_KeepOutInCone::MergeFrom(const VizMessage_KeepOutInCone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.KeepOutInCone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  normalvector_.MergeFrom(from.normalvector_);
  conecolor_.MergeFrom(from.conecolor_);
  if (from.frombodyname().size() > 0) {

    frombodyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frombodyname_);
  }
  if (from.tobodyname().size() > 0) {

    tobodyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tobodyname_);
  }
  if (from.conename().size() > 0) {

    conename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conename_);
  }
  if (from.incidenceangle() != 0) {
    set_incidenceangle(from.incidenceangle());
  }
  if (from.coneheight() != 0) {
    set_coneheight(from.coneheight());
  }
  if (from.iskeepin() != 0) {
    set_iskeepin(from.iskeepin());
  }
}

void VizMessage_KeepOutInCone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.KeepOutInCone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_KeepOutInCone::CopyFrom(const VizMessage_KeepOutInCone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.KeepOutInCone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_KeepOutInCone::IsInitialized() const {
  return true;
}

void VizMessage_KeepOutInCone::Swap(VizMessage_KeepOutInCone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_KeepOutInCone::InternalSwap(VizMessage_KeepOutInCone* other) {
  using std::swap;
  position_.InternalSwap(&other->position_);
  normalvector_.InternalSwap(&other->normalvector_);
  conecolor_.InternalSwap(&other->conecolor_);
  frombodyname_.Swap(&other->frombodyname_);
  tobodyname_.Swap(&other->tobodyname_);
  conename_.Swap(&other->conename_);
  swap(incidenceangle_, other->incidenceangle_);
  swap(coneheight_, other->coneheight_);
  swap(iskeepin_, other->iskeepin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_KeepOutInCone::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_CameraOneSettings::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_CameraOneSettings::kSpacecraftNameFieldNumber;
const int VizMessage_CameraOneSettings::kViewPanelFieldNumber;
const int VizMessage_CameraOneSettings::kSetViewFieldNumber;
const int VizMessage_CameraOneSettings::kSpacecraftVisibleFieldNumber;
const int VizMessage_CameraOneSettings::kFieldOfViewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_CameraOneSettings::VizMessage_CameraOneSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CameraOneSettings();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.CameraOneSettings)
}
VizMessage_CameraOneSettings::VizMessage_CameraOneSettings(const VizMessage_CameraOneSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spacecraftname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.spacecraftname().size() > 0) {
    spacecraftname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spacecraftname_);
  }
  ::memcpy(&setview_, &from.setview_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldofview_) -
    reinterpret_cast<char*>(&setview_)) + sizeof(fieldofview_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.CameraOneSettings)
}

void VizMessage_CameraOneSettings::SharedCtor() {
  spacecraftname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&setview_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldofview_) -
      reinterpret_cast<char*>(&setview_)) + sizeof(fieldofview_));
  _cached_size_ = 0;
}

VizMessage_CameraOneSettings::~VizMessage_CameraOneSettings() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.CameraOneSettings)
  SharedDtor();
}

void VizMessage_CameraOneSettings::SharedDtor() {
  spacecraftname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_CameraOneSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_CameraOneSettings::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_CameraOneSettings& VizMessage_CameraOneSettings::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CameraOneSettings();
  return *internal_default_instance();
}

VizMessage_CameraOneSettings* VizMessage_CameraOneSettings::New(::google::protobuf::Arena* arena) const {
  VizMessage_CameraOneSettings* n = new VizMessage_CameraOneSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_CameraOneSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.CameraOneSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spacecraftname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&setview_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldofview_) -
      reinterpret_cast<char*>(&setview_)) + sizeof(fieldofview_));
  _internal_metadata_.Clear();
}

bool VizMessage_CameraOneSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.CameraOneSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string spacecraftName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spacecraftname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->spacecraftname().data(), static_cast<int>(this->spacecraftname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.CameraOneSettings.spacecraftName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool viewPanel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &viewpanel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 setView = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setview_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool spacecraftVisible = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spacecraftvisible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fieldOfView = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fieldofview_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.CameraOneSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.CameraOneSettings)
  return false;
#undef DO_
}

void VizMessage_CameraOneSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.CameraOneSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spacecraftName = 1;
  if (this->spacecraftname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spacecraftname().data(), static_cast<int>(this->spacecraftname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CameraOneSettings.spacecraftName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->spacecraftname(), output);
  }

  // bool viewPanel = 2;
  if (this->viewpanel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->viewpanel(), output);
  }

  // int32 setView = 3;
  if (this->setview() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->setview(), output);
  }

  // bool spacecraftVisible = 4;
  if (this->spacecraftvisible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->spacecraftvisible(), output);
  }

  // double fieldOfView = 5;
  if (this->fieldofview() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->fieldofview(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.CameraOneSettings)
}

::google::protobuf::uint8* VizMessage_CameraOneSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.CameraOneSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spacecraftName = 1;
  if (this->spacecraftname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spacecraftname().data(), static_cast<int>(this->spacecraftname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CameraOneSettings.spacecraftName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->spacecraftname(), target);
  }

  // bool viewPanel = 2;
  if (this->viewpanel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->viewpanel(), target);
  }

  // int32 setView = 3;
  if (this->setview() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->setview(), target);
  }

  // bool spacecraftVisible = 4;
  if (this->spacecraftvisible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->spacecraftvisible(), target);
  }

  // double fieldOfView = 5;
  if (this->fieldofview() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->fieldofview(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.CameraOneSettings)
  return target;
}

size_t VizMessage_CameraOneSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.CameraOneSettings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string spacecraftName = 1;
  if (this->spacecraftname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->spacecraftname());
  }

  // int32 setView = 3;
  if (this->setview() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->setview());
  }

  // bool viewPanel = 2;
  if (this->viewpanel() != 0) {
    total_size += 1 + 1;
  }

  // bool spacecraftVisible = 4;
  if (this->spacecraftvisible() != 0) {
    total_size += 1 + 1;
  }

  // double fieldOfView = 5;
  if (this->fieldofview() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_CameraOneSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.CameraOneSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_CameraOneSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_CameraOneSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.CameraOneSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.CameraOneSettings)
    MergeFrom(*source);
  }
}

void VizMessage_CameraOneSettings::MergeFrom(const VizMessage_CameraOneSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.CameraOneSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spacecraftname().size() > 0) {

    spacecraftname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spacecraftname_);
  }
  if (from.setview() != 0) {
    set_setview(from.setview());
  }
  if (from.viewpanel() != 0) {
    set_viewpanel(from.viewpanel());
  }
  if (from.spacecraftvisible() != 0) {
    set_spacecraftvisible(from.spacecraftvisible());
  }
  if (from.fieldofview() != 0) {
    set_fieldofview(from.fieldofview());
  }
}

void VizMessage_CameraOneSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.CameraOneSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_CameraOneSettings::CopyFrom(const VizMessage_CameraOneSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.CameraOneSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_CameraOneSettings::IsInitialized() const {
  return true;
}

void VizMessage_CameraOneSettings::Swap(VizMessage_CameraOneSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_CameraOneSettings::InternalSwap(VizMessage_CameraOneSettings* other) {
  using std::swap;
  spacecraftname_.Swap(&other->spacecraftname_);
  swap(setview_, other->setview_);
  swap(viewpanel_, other->viewpanel_);
  swap(spacecraftvisible_, other->spacecraftvisible_);
  swap(fieldofview_, other->fieldofview_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_CameraOneSettings::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_CameraTwoSettings::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_CameraTwoSettings::kSpacecraftNameFieldNumber;
const int VizMessage_CameraTwoSettings::kViewPanelFieldNumber;
const int VizMessage_CameraTwoSettings::kSetViewFieldNumber;
const int VizMessage_CameraTwoSettings::kSpacecraftVisibleFieldNumber;
const int VizMessage_CameraTwoSettings::kFieldOfViewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_CameraTwoSettings::VizMessage_CameraTwoSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CameraTwoSettings();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.CameraTwoSettings)
}
VizMessage_CameraTwoSettings::VizMessage_CameraTwoSettings(const VizMessage_CameraTwoSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spacecraftname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.spacecraftname().size() > 0) {
    spacecraftname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spacecraftname_);
  }
  ::memcpy(&setview_, &from.setview_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldofview_) -
    reinterpret_cast<char*>(&setview_)) + sizeof(fieldofview_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.CameraTwoSettings)
}

void VizMessage_CameraTwoSettings::SharedCtor() {
  spacecraftname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&setview_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldofview_) -
      reinterpret_cast<char*>(&setview_)) + sizeof(fieldofview_));
  _cached_size_ = 0;
}

VizMessage_CameraTwoSettings::~VizMessage_CameraTwoSettings() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.CameraTwoSettings)
  SharedDtor();
}

void VizMessage_CameraTwoSettings::SharedDtor() {
  spacecraftname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_CameraTwoSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_CameraTwoSettings::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_CameraTwoSettings& VizMessage_CameraTwoSettings::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CameraTwoSettings();
  return *internal_default_instance();
}

VizMessage_CameraTwoSettings* VizMessage_CameraTwoSettings::New(::google::protobuf::Arena* arena) const {
  VizMessage_CameraTwoSettings* n = new VizMessage_CameraTwoSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_CameraTwoSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.CameraTwoSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spacecraftname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&setview_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldofview_) -
      reinterpret_cast<char*>(&setview_)) + sizeof(fieldofview_));
  _internal_metadata_.Clear();
}

bool VizMessage_CameraTwoSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.CameraTwoSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string spacecraftName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spacecraftname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->spacecraftname().data(), static_cast<int>(this->spacecraftname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.CameraTwoSettings.spacecraftName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool viewPanel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &viewpanel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 setView = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setview_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool spacecraftVisible = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spacecraftvisible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fieldOfView = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fieldofview_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.CameraTwoSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.CameraTwoSettings)
  return false;
#undef DO_
}

void VizMessage_CameraTwoSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.CameraTwoSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spacecraftName = 1;
  if (this->spacecraftname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spacecraftname().data(), static_cast<int>(this->spacecraftname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CameraTwoSettings.spacecraftName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->spacecraftname(), output);
  }

  // bool viewPanel = 2;
  if (this->viewpanel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->viewpanel(), output);
  }

  // int32 setView = 3;
  if (this->setview() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->setview(), output);
  }

  // bool spacecraftVisible = 4;
  if (this->spacecraftvisible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->spacecraftvisible(), output);
  }

  // double fieldOfView = 5;
  if (this->fieldofview() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->fieldofview(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.CameraTwoSettings)
}

::google::protobuf::uint8* VizMessage_CameraTwoSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.CameraTwoSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spacecraftName = 1;
  if (this->spacecraftname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spacecraftname().data(), static_cast<int>(this->spacecraftname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CameraTwoSettings.spacecraftName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->spacecraftname(), target);
  }

  // bool viewPanel = 2;
  if (this->viewpanel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->viewpanel(), target);
  }

  // int32 setView = 3;
  if (this->setview() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->setview(), target);
  }

  // bool spacecraftVisible = 4;
  if (this->spacecraftvisible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->spacecraftvisible(), target);
  }

  // double fieldOfView = 5;
  if (this->fieldofview() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->fieldofview(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.CameraTwoSettings)
  return target;
}

size_t VizMessage_CameraTwoSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.CameraTwoSettings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string spacecraftName = 1;
  if (this->spacecraftname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->spacecraftname());
  }

  // int32 setView = 3;
  if (this->setview() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->setview());
  }

  // bool viewPanel = 2;
  if (this->viewpanel() != 0) {
    total_size += 1 + 1;
  }

  // bool spacecraftVisible = 4;
  if (this->spacecraftvisible() != 0) {
    total_size += 1 + 1;
  }

  // double fieldOfView = 5;
  if (this->fieldofview() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_CameraTwoSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.CameraTwoSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_CameraTwoSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_CameraTwoSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.CameraTwoSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.CameraTwoSettings)
    MergeFrom(*source);
  }
}

void VizMessage_CameraTwoSettings::MergeFrom(const VizMessage_CameraTwoSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.CameraTwoSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spacecraftname().size() > 0) {

    spacecraftname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spacecraftname_);
  }
  if (from.setview() != 0) {
    set_setview(from.setview());
  }
  if (from.viewpanel() != 0) {
    set_viewpanel(from.viewpanel());
  }
  if (from.spacecraftvisible() != 0) {
    set_spacecraftvisible(from.spacecraftvisible());
  }
  if (from.fieldofview() != 0) {
    set_fieldofview(from.fieldofview());
  }
}

void VizMessage_CameraTwoSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.CameraTwoSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_CameraTwoSettings::CopyFrom(const VizMessage_CameraTwoSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.CameraTwoSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_CameraTwoSettings::IsInitialized() const {
  return true;
}

void VizMessage_CameraTwoSettings::Swap(VizMessage_CameraTwoSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_CameraTwoSettings::InternalSwap(VizMessage_CameraTwoSettings* other) {
  using std::swap;
  spacecraftname_.Swap(&other->spacecraftname_);
  swap(setview_, other->setview_);
  swap(viewpanel_, other->viewpanel_);
  swap(spacecraftvisible_, other->spacecraftvisible_);
  swap(fieldofview_, other->fieldofview_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_CameraTwoSettings::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_PlanetCameraSettings::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_PlanetCameraSettings::kSpacecraftNameFieldNumber;
const int VizMessage_PlanetCameraSettings::kViewPanelFieldNumber;
const int VizMessage_PlanetCameraSettings::kSetViewFieldNumber;
const int VizMessage_PlanetCameraSettings::kSpacecraftVisibleFieldNumber;
const int VizMessage_PlanetCameraSettings::kFieldOfViewFieldNumber;
const int VizMessage_PlanetCameraSettings::kTargetBodyNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_PlanetCameraSettings::VizMessage_PlanetCameraSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_PlanetCameraSettings();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.PlanetCameraSettings)
}
VizMessage_PlanetCameraSettings::VizMessage_PlanetCameraSettings(const VizMessage_PlanetCameraSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spacecraftname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.spacecraftname().size() > 0) {
    spacecraftname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spacecraftname_);
  }
  targetbodyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.targetbodyname().size() > 0) {
    targetbodyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetbodyname_);
  }
  ::memcpy(&setview_, &from.setview_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldofview_) -
    reinterpret_cast<char*>(&setview_)) + sizeof(fieldofview_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.PlanetCameraSettings)
}

void VizMessage_PlanetCameraSettings::SharedCtor() {
  spacecraftname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetbodyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&setview_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldofview_) -
      reinterpret_cast<char*>(&setview_)) + sizeof(fieldofview_));
  _cached_size_ = 0;
}

VizMessage_PlanetCameraSettings::~VizMessage_PlanetCameraSettings() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.PlanetCameraSettings)
  SharedDtor();
}

void VizMessage_PlanetCameraSettings::SharedDtor() {
  spacecraftname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetbodyname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_PlanetCameraSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_PlanetCameraSettings::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_PlanetCameraSettings& VizMessage_PlanetCameraSettings::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_PlanetCameraSettings();
  return *internal_default_instance();
}

VizMessage_PlanetCameraSettings* VizMessage_PlanetCameraSettings::New(::google::protobuf::Arena* arena) const {
  VizMessage_PlanetCameraSettings* n = new VizMessage_PlanetCameraSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_PlanetCameraSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.PlanetCameraSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spacecraftname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetbodyname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&setview_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldofview_) -
      reinterpret_cast<char*>(&setview_)) + sizeof(fieldofview_));
  _internal_metadata_.Clear();
}

bool VizMessage_PlanetCameraSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.PlanetCameraSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string spacecraftName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spacecraftname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->spacecraftname().data(), static_cast<int>(this->spacecraftname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.PlanetCameraSettings.spacecraftName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool viewPanel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &viewpanel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 setView = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setview_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool spacecraftVisible = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spacecraftvisible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fieldOfView = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fieldofview_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string targetBodyName = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetbodyname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->targetbodyname().data(), static_cast<int>(this->targetbodyname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.PlanetCameraSettings.targetBodyName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.PlanetCameraSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.PlanetCameraSettings)
  return false;
#undef DO_
}

void VizMessage_PlanetCameraSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.PlanetCameraSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spacecraftName = 1;
  if (this->spacecraftname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spacecraftname().data(), static_cast<int>(this->spacecraftname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.PlanetCameraSettings.spacecraftName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->spacecraftname(), output);
  }

  // bool viewPanel = 2;
  if (this->viewpanel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->viewpanel(), output);
  }

  // int32 setView = 3;
  if (this->setview() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->setview(), output);
  }

  // bool spacecraftVisible = 4;
  if (this->spacecraftvisible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->spacecraftvisible(), output);
  }

  // double fieldOfView = 5;
  if (this->fieldofview() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->fieldofview(), output);
  }

  // string targetBodyName = 6;
  if (this->targetbodyname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->targetbodyname().data(), static_cast<int>(this->targetbodyname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.PlanetCameraSettings.targetBodyName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->targetbodyname(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.PlanetCameraSettings)
}

::google::protobuf::uint8* VizMessage_PlanetCameraSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.PlanetCameraSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spacecraftName = 1;
  if (this->spacecraftname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spacecraftname().data(), static_cast<int>(this->spacecraftname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.PlanetCameraSettings.spacecraftName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->spacecraftname(), target);
  }

  // bool viewPanel = 2;
  if (this->viewpanel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->viewpanel(), target);
  }

  // int32 setView = 3;
  if (this->setview() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->setview(), target);
  }

  // bool spacecraftVisible = 4;
  if (this->spacecraftvisible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->spacecraftvisible(), target);
  }

  // double fieldOfView = 5;
  if (this->fieldofview() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->fieldofview(), target);
  }

  // string targetBodyName = 6;
  if (this->targetbodyname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->targetbodyname().data(), static_cast<int>(this->targetbodyname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.PlanetCameraSettings.targetBodyName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->targetbodyname(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.PlanetCameraSettings)
  return target;
}

size_t VizMessage_PlanetCameraSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.PlanetCameraSettings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string spacecraftName = 1;
  if (this->spacecraftname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->spacecraftname());
  }

  // string targetBodyName = 6;
  if (this->targetbodyname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetbodyname());
  }

  // int32 setView = 3;
  if (this->setview() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->setview());
  }

  // bool viewPanel = 2;
  if (this->viewpanel() != 0) {
    total_size += 1 + 1;
  }

  // bool spacecraftVisible = 4;
  if (this->spacecraftvisible() != 0) {
    total_size += 1 + 1;
  }

  // double fieldOfView = 5;
  if (this->fieldofview() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_PlanetCameraSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.PlanetCameraSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_PlanetCameraSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_PlanetCameraSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.PlanetCameraSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.PlanetCameraSettings)
    MergeFrom(*source);
  }
}

void VizMessage_PlanetCameraSettings::MergeFrom(const VizMessage_PlanetCameraSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.PlanetCameraSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spacecraftname().size() > 0) {

    spacecraftname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spacecraftname_);
  }
  if (from.targetbodyname().size() > 0) {

    targetbodyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetbodyname_);
  }
  if (from.setview() != 0) {
    set_setview(from.setview());
  }
  if (from.viewpanel() != 0) {
    set_viewpanel(from.viewpanel());
  }
  if (from.spacecraftvisible() != 0) {
    set_spacecraftvisible(from.spacecraftvisible());
  }
  if (from.fieldofview() != 0) {
    set_fieldofview(from.fieldofview());
  }
}

void VizMessage_PlanetCameraSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.PlanetCameraSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_PlanetCameraSettings::CopyFrom(const VizMessage_PlanetCameraSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.PlanetCameraSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_PlanetCameraSettings::IsInitialized() const {
  return true;
}

void VizMessage_PlanetCameraSettings::Swap(VizMessage_PlanetCameraSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_PlanetCameraSettings::InternalSwap(VizMessage_PlanetCameraSettings* other) {
  using std::swap;
  spacecraftname_.Swap(&other->spacecraftname_);
  targetbodyname_.Swap(&other->targetbodyname_);
  swap(setview_, other->setview_);
  swap(viewpanel_, other->viewpanel_);
  swap(spacecraftvisible_, other->spacecraftvisible_);
  swap(fieldofview_, other->fieldofview_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_PlanetCameraSettings::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_ActuatorSettings::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_ActuatorSettings::kSpacecraftNameFieldNumber;
const int VizMessage_ActuatorSettings::kViewThrusterPanelFieldNumber;
const int VizMessage_ActuatorSettings::kViewThrusterHUDFieldNumber;
const int VizMessage_ActuatorSettings::kViewRWPanelFieldNumber;
const int VizMessage_ActuatorSettings::kViewRWHUDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_ActuatorSettings::VizMessage_ActuatorSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_ActuatorSettings();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.ActuatorSettings)
}
VizMessage_ActuatorSettings::VizMessage_ActuatorSettings(const VizMessage_ActuatorSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spacecraftname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.spacecraftname().size() > 0) {
    spacecraftname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spacecraftname_);
  }
  ::memcpy(&viewthrusterpanel_, &from.viewthrusterpanel_,
    static_cast<size_t>(reinterpret_cast<char*>(&viewrwhud_) -
    reinterpret_cast<char*>(&viewthrusterpanel_)) + sizeof(viewrwhud_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.ActuatorSettings)
}

void VizMessage_ActuatorSettings::SharedCtor() {
  spacecraftname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&viewthrusterpanel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&viewrwhud_) -
      reinterpret_cast<char*>(&viewthrusterpanel_)) + sizeof(viewrwhud_));
  _cached_size_ = 0;
}

VizMessage_ActuatorSettings::~VizMessage_ActuatorSettings() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.ActuatorSettings)
  SharedDtor();
}

void VizMessage_ActuatorSettings::SharedDtor() {
  spacecraftname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_ActuatorSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_ActuatorSettings::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_ActuatorSettings& VizMessage_ActuatorSettings::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_ActuatorSettings();
  return *internal_default_instance();
}

VizMessage_ActuatorSettings* VizMessage_ActuatorSettings::New(::google::protobuf::Arena* arena) const {
  VizMessage_ActuatorSettings* n = new VizMessage_ActuatorSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_ActuatorSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.ActuatorSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spacecraftname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&viewthrusterpanel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&viewrwhud_) -
      reinterpret_cast<char*>(&viewthrusterpanel_)) + sizeof(viewrwhud_));
  _internal_metadata_.Clear();
}

bool VizMessage_ActuatorSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.ActuatorSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string spacecraftName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spacecraftname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->spacecraftname().data(), static_cast<int>(this->spacecraftname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.ActuatorSettings.spacecraftName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 viewThrusterPanel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewthrusterpanel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 viewThrusterHUD = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewthrusterhud_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 viewRWPanel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewrwpanel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 viewRWHUD = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewrwhud_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.ActuatorSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.ActuatorSettings)
  return false;
#undef DO_
}

void VizMessage_ActuatorSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.ActuatorSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spacecraftName = 1;
  if (this->spacecraftname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spacecraftname().data(), static_cast<int>(this->spacecraftname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.ActuatorSettings.spacecraftName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->spacecraftname(), output);
  }

  // int32 viewThrusterPanel = 2;
  if (this->viewthrusterpanel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->viewthrusterpanel(), output);
  }

  // int32 viewThrusterHUD = 3;
  if (this->viewthrusterhud() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->viewthrusterhud(), output);
  }

  // int32 viewRWPanel = 4;
  if (this->viewrwpanel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->viewrwpanel(), output);
  }

  // int32 viewRWHUD = 5;
  if (this->viewrwhud() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->viewrwhud(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.ActuatorSettings)
}

::google::protobuf::uint8* VizMessage_ActuatorSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.ActuatorSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spacecraftName = 1;
  if (this->spacecraftname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spacecraftname().data(), static_cast<int>(this->spacecraftname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.ActuatorSettings.spacecraftName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->spacecraftname(), target);
  }

  // int32 viewThrusterPanel = 2;
  if (this->viewthrusterpanel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->viewthrusterpanel(), target);
  }

  // int32 viewThrusterHUD = 3;
  if (this->viewthrusterhud() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->viewthrusterhud(), target);
  }

  // int32 viewRWPanel = 4;
  if (this->viewrwpanel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->viewrwpanel(), target);
  }

  // int32 viewRWHUD = 5;
  if (this->viewrwhud() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->viewrwhud(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.ActuatorSettings)
  return target;
}

size_t VizMessage_ActuatorSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.ActuatorSettings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string spacecraftName = 1;
  if (this->spacecraftname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->spacecraftname());
  }

  // int32 viewThrusterPanel = 2;
  if (this->viewthrusterpanel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->viewthrusterpanel());
  }

  // int32 viewThrusterHUD = 3;
  if (this->viewthrusterhud() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->viewthrusterhud());
  }

  // int32 viewRWPanel = 4;
  if (this->viewrwpanel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->viewrwpanel());
  }

  // int32 viewRWHUD = 5;
  if (this->viewrwhud() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->viewrwhud());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_ActuatorSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.ActuatorSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_ActuatorSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_ActuatorSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.ActuatorSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.ActuatorSettings)
    MergeFrom(*source);
  }
}

void VizMessage_ActuatorSettings::MergeFrom(const VizMessage_ActuatorSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.ActuatorSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spacecraftname().size() > 0) {

    spacecraftname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spacecraftname_);
  }
  if (from.viewthrusterpanel() != 0) {
    set_viewthrusterpanel(from.viewthrusterpanel());
  }
  if (from.viewthrusterhud() != 0) {
    set_viewthrusterhud(from.viewthrusterhud());
  }
  if (from.viewrwpanel() != 0) {
    set_viewrwpanel(from.viewrwpanel());
  }
  if (from.viewrwhud() != 0) {
    set_viewrwhud(from.viewrwhud());
  }
}

void VizMessage_ActuatorSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.ActuatorSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_ActuatorSettings::CopyFrom(const VizMessage_ActuatorSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.ActuatorSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_ActuatorSettings::IsInitialized() const {
  return true;
}

void VizMessage_ActuatorSettings::Swap(VizMessage_ActuatorSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_ActuatorSettings::InternalSwap(VizMessage_ActuatorSettings* other) {
  using std::swap;
  spacecraftname_.Swap(&other->spacecraftname_);
  swap(viewthrusterpanel_, other->viewthrusterpanel_);
  swap(viewthrusterhud_, other->viewthrusterhud_);
  swap(viewrwpanel_, other->viewrwpanel_);
  swap(viewrwhud_, other->viewrwhud_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_ActuatorSettings::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_CustomModel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_CustomModel::kModelToUseFieldNumber;
const int VizMessage_CustomModel::kSimBodiesToModifyFieldNumber;
const int VizMessage_CustomModel::kOffsetFieldNumber;
const int VizMessage_CustomModel::kRotationFieldNumber;
const int VizMessage_CustomModel::kScaleFieldNumber;
const int VizMessage_CustomModel::kCustomTextureFieldNumber;
const int VizMessage_CustomModel::kNormalMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_CustomModel::VizMessage_CustomModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CustomModel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.CustomModel)
}
VizMessage_CustomModel::VizMessage_CustomModel(const VizMessage_CustomModel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      simbodiestomodify_(from.simbodiestomodify_),
      offset_(from.offset_),
      rotation_(from.rotation_),
      scale_(from.scale_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  modeltouse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.modeltouse().size() > 0) {
    modeltouse_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modeltouse_);
  }
  customtexture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.customtexture().size() > 0) {
    customtexture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customtexture_);
  }
  normalmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.normalmap().size() > 0) {
    normalmap_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normalmap_);
  }
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.CustomModel)
}

void VizMessage_CustomModel::SharedCtor() {
  modeltouse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customtexture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normalmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

VizMessage_CustomModel::~VizMessage_CustomModel() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.CustomModel)
  SharedDtor();
}

void VizMessage_CustomModel::SharedDtor() {
  modeltouse_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customtexture_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normalmap_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_CustomModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_CustomModel::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_CustomModel& VizMessage_CustomModel::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CustomModel();
  return *internal_default_instance();
}

VizMessage_CustomModel* VizMessage_CustomModel::New(::google::protobuf::Arena* arena) const {
  VizMessage_CustomModel* n = new VizMessage_CustomModel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_CustomModel::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.CustomModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  simbodiestomodify_.Clear();
  offset_.Clear();
  rotation_.Clear();
  scale_.Clear();
  modeltouse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customtexture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normalmap_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool VizMessage_CustomModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.CustomModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string modelToUse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modeltouse()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modeltouse().data(), static_cast<int>(this->modeltouse().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.CustomModel.modelToUse"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string simBodiesToModify = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_simbodiestomodify()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->simbodiestomodify(this->simbodiestomodify_size() - 1).data(),
            static_cast<int>(this->simbodiestomodify(this->simbodiestomodify_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.CustomModel.simBodiesToModify"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_offset())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_offset())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double rotation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_rotation())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_rotation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double scale = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_scale())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42u, input, this->mutable_scale())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string customTexture = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customtexture()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->customtexture().data(), static_cast<int>(this->customtexture().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.CustomModel.customTexture"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string normalMap = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normalmap()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->normalmap().data(), static_cast<int>(this->normalmap().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.CustomModel.normalMap"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.CustomModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.CustomModel)
  return false;
#undef DO_
}

void VizMessage_CustomModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.CustomModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string modelToUse = 1;
  if (this->modeltouse().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modeltouse().data(), static_cast<int>(this->modeltouse().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CustomModel.modelToUse");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->modeltouse(), output);
  }

  // repeated string simBodiesToModify = 2;
  for (int i = 0, n = this->simbodiestomodify_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->simbodiestomodify(i).data(), static_cast<int>(this->simbodiestomodify(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CustomModel.simBodiesToModify");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->simbodiestomodify(i), output);
  }

  // repeated double offset = 3;
  if (this->offset_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _offset_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->offset().data(), this->offset_size(), output);
  }

  // repeated double rotation = 4;
  if (this->rotation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _rotation_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->rotation().data(), this->rotation_size(), output);
  }

  // repeated double scale = 5;
  if (this->scale_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _scale_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->scale().data(), this->scale_size(), output);
  }

  // string customTexture = 6;
  if (this->customtexture().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->customtexture().data(), static_cast<int>(this->customtexture().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CustomModel.customTexture");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->customtexture(), output);
  }

  // string normalMap = 7;
  if (this->normalmap().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->normalmap().data(), static_cast<int>(this->normalmap().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CustomModel.normalMap");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->normalmap(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.CustomModel)
}

::google::protobuf::uint8* VizMessage_CustomModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.CustomModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string modelToUse = 1;
  if (this->modeltouse().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modeltouse().data(), static_cast<int>(this->modeltouse().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CustomModel.modelToUse");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->modeltouse(), target);
  }

  // repeated string simBodiesToModify = 2;
  for (int i = 0, n = this->simbodiestomodify_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->simbodiestomodify(i).data(), static_cast<int>(this->simbodiestomodify(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CustomModel.simBodiesToModify");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->simbodiestomodify(i), target);
  }

  // repeated double offset = 3;
  if (this->offset_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _offset_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->offset_, target);
  }

  // repeated double rotation = 4;
  if (this->rotation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _rotation_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->rotation_, target);
  }

  // repeated double scale = 5;
  if (this->scale_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _scale_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->scale_, target);
  }

  // string customTexture = 6;
  if (this->customtexture().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->customtexture().data(), static_cast<int>(this->customtexture().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CustomModel.customTexture");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->customtexture(), target);
  }

  // string normalMap = 7;
  if (this->normalmap().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->normalmap().data(), static_cast<int>(this->normalmap().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CustomModel.normalMap");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->normalmap(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.CustomModel)
  return target;
}

size_t VizMessage_CustomModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.CustomModel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string simBodiesToModify = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->simbodiestomodify_size());
  for (int i = 0, n = this->simbodiestomodify_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->simbodiestomodify(i));
  }

  // repeated double offset = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->offset_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _offset_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double rotation = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->rotation_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rotation_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double scale = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->scale_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _scale_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string modelToUse = 1;
  if (this->modeltouse().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modeltouse());
  }

  // string customTexture = 6;
  if (this->customtexture().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->customtexture());
  }

  // string normalMap = 7;
  if (this->normalmap().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->normalmap());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_CustomModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.CustomModel)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_CustomModel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_CustomModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.CustomModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.CustomModel)
    MergeFrom(*source);
  }
}

void VizMessage_CustomModel::MergeFrom(const VizMessage_CustomModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.CustomModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  simbodiestomodify_.MergeFrom(from.simbodiestomodify_);
  offset_.MergeFrom(from.offset_);
  rotation_.MergeFrom(from.rotation_);
  scale_.MergeFrom(from.scale_);
  if (from.modeltouse().size() > 0) {

    modeltouse_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modeltouse_);
  }
  if (from.customtexture().size() > 0) {

    customtexture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customtexture_);
  }
  if (from.normalmap().size() > 0) {

    normalmap_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normalmap_);
  }
}

void VizMessage_CustomModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.CustomModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_CustomModel::CopyFrom(const VizMessage_CustomModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.CustomModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_CustomModel::IsInitialized() const {
  return true;
}

void VizMessage_CustomModel::Swap(VizMessage_CustomModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_CustomModel::InternalSwap(VizMessage_CustomModel* other) {
  using std::swap;
  simbodiestomodify_.InternalSwap(&other->simbodiestomodify_);
  offset_.InternalSwap(&other->offset_);
  rotation_.InternalSwap(&other->rotation_);
  scale_.InternalSwap(&other->scale_);
  modeltouse_.Swap(&other->modeltouse_);
  customtexture_.Swap(&other->customtexture_);
  normalmap_.Swap(&other->normalmap_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_CustomModel::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage_VizSettingsPb::InitAsDefaultInstance() {
  ::vizProtobufferMessage::_VizMessage_VizSettingsPb_default_instance_._instance.get_mutable()->cameraone_ = const_cast< ::vizProtobufferMessage::VizMessage_CameraOneSettings*>(
      ::vizProtobufferMessage::VizMessage_CameraOneSettings::internal_default_instance());
  ::vizProtobufferMessage::_VizMessage_VizSettingsPb_default_instance_._instance.get_mutable()->cameratwo_ = const_cast< ::vizProtobufferMessage::VizMessage_CameraTwoSettings*>(
      ::vizProtobufferMessage::VizMessage_CameraTwoSettings::internal_default_instance());
  ::vizProtobufferMessage::_VizMessage_VizSettingsPb_default_instance_._instance.get_mutable()->planetcamera_ = const_cast< ::vizProtobufferMessage::VizMessage_PlanetCameraSettings*>(
      ::vizProtobufferMessage::VizMessage_PlanetCameraSettings::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage_VizSettingsPb::kAmbientFieldNumber;
const int VizMessage_VizSettingsPb::kOrbitLinesOnFieldNumber;
const int VizMessage_VizSettingsPb::kSpacecraftCSonFieldNumber;
const int VizMessage_VizSettingsPb::kPlanetCSonFieldNumber;
const int VizMessage_VizSettingsPb::kPointLinesFieldNumber;
const int VizMessage_VizSettingsPb::kKeepOutInConesFieldNumber;
const int VizMessage_VizSettingsPb::kCameraOneFieldNumber;
const int VizMessage_VizSettingsPb::kCameraTwoFieldNumber;
const int VizMessage_VizSettingsPb::kPlanetCameraFieldNumber;
const int VizMessage_VizSettingsPb::kActuatorSettingsFieldNumber;
const int VizMessage_VizSettingsPb::kSkyboxFieldNumber;
const int VizMessage_VizSettingsPb::kCustomModelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage_VizSettingsPb::VizMessage_VizSettingsPb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_VizSettingsPb();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage.VizSettingsPb)
}
VizMessage_VizSettingsPb::VizMessage_VizSettingsPb(const VizMessage_VizSettingsPb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pointlines_(from.pointlines_),
      keepoutincones_(from.keepoutincones_),
      actuatorsettings_(from.actuatorsettings_),
      custommodels_(from.custommodels_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skybox_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.skybox().size() > 0) {
    skybox_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skybox_);
  }
  if (from.has_cameraone()) {
    cameraone_ = new ::vizProtobufferMessage::VizMessage_CameraOneSettings(*from.cameraone_);
  } else {
    cameraone_ = NULL;
  }
  if (from.has_cameratwo()) {
    cameratwo_ = new ::vizProtobufferMessage::VizMessage_CameraTwoSettings(*from.cameratwo_);
  } else {
    cameratwo_ = NULL;
  }
  if (from.has_planetcamera()) {
    planetcamera_ = new ::vizProtobufferMessage::VizMessage_PlanetCameraSettings(*from.planetcamera_);
  } else {
    planetcamera_ = NULL;
  }
  ::memcpy(&ambient_, &from.ambient_,
    static_cast<size_t>(reinterpret_cast<char*>(&planetcson_) -
    reinterpret_cast<char*>(&ambient_)) + sizeof(planetcson_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.VizSettingsPb)
}

void VizMessage_VizSettingsPb::SharedCtor() {
  skybox_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cameraone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&planetcson_) -
      reinterpret_cast<char*>(&cameraone_)) + sizeof(planetcson_));
  _cached_size_ = 0;
}

VizMessage_VizSettingsPb::~VizMessage_VizSettingsPb() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.VizSettingsPb)
  SharedDtor();
}

void VizMessage_VizSettingsPb::SharedDtor() {
  skybox_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cameraone_;
  if (this != internal_default_instance()) delete cameratwo_;
  if (this != internal_default_instance()) delete planetcamera_;
}

void VizMessage_VizSettingsPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage_VizSettingsPb::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage_VizSettingsPb& VizMessage_VizSettingsPb::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_VizSettingsPb();
  return *internal_default_instance();
}

VizMessage_VizSettingsPb* VizMessage_VizSettingsPb::New(::google::protobuf::Arena* arena) const {
  VizMessage_VizSettingsPb* n = new VizMessage_VizSettingsPb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage_VizSettingsPb::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pointlines_.Clear();
  keepoutincones_.Clear();
  actuatorsettings_.Clear();
  custommodels_.Clear();
  skybox_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && cameraone_ != NULL) {
    delete cameraone_;
  }
  cameraone_ = NULL;
  if (GetArenaNoVirtual() == NULL && cameratwo_ != NULL) {
    delete cameratwo_;
  }
  cameratwo_ = NULL;
  if (GetArenaNoVirtual() == NULL && planetcamera_ != NULL) {
    delete planetcamera_;
  }
  planetcamera_ = NULL;
  ::memset(&ambient_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&planetcson_) -
      reinterpret_cast<char*>(&ambient_)) + sizeof(planetcson_));
  _internal_metadata_.Clear();
}

bool VizMessage_VizSettingsPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double ambient = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ambient_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 orbitLinesOn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orbitlineson_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 spacecraftCSon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spacecraftcson_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 planetCSon = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &planetcson_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vizProtobufferMessage.VizMessage.PointLine pointLines = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_pointlines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vizProtobufferMessage.VizMessage.KeepOutInCone keepOutInCones = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_keepoutincones()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vizProtobufferMessage.VizMessage.CameraOneSettings cameraOne = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cameraone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vizProtobufferMessage.VizMessage.CameraTwoSettings cameraTwo = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cameratwo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vizProtobufferMessage.VizMessage.PlanetCameraSettings planetCamera = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_planetcamera()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vizProtobufferMessage.VizMessage.ActuatorSettings actuatorSettings = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_actuatorsettings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string skybox = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skybox()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->skybox().data(), static_cast<int>(this->skybox().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vizProtobufferMessage.VizMessage.VizSettingsPb.skybox"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vizProtobufferMessage.VizMessage.CustomModel customModels = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_custommodels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage.VizSettingsPb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage.VizSettingsPb)
  return false;
#undef DO_
}

void VizMessage_VizSettingsPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double ambient = 1;
  if (this->ambient() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ambient(), output);
  }

  // int32 orbitLinesOn = 2;
  if (this->orbitlineson() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->orbitlineson(), output);
  }

  // int32 spacecraftCSon = 3;
  if (this->spacecraftcson() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->spacecraftcson(), output);
  }

  // int32 planetCSon = 4;
  if (this->planetcson() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->planetcson(), output);
  }

  // repeated .vizProtobufferMessage.VizMessage.PointLine pointLines = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pointlines_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pointlines(static_cast<int>(i)), output);
  }

  // repeated .vizProtobufferMessage.VizMessage.KeepOutInCone keepOutInCones = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keepoutincones_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->keepoutincones(static_cast<int>(i)), output);
  }

  // .vizProtobufferMessage.VizMessage.CameraOneSettings cameraOne = 7;
  if (this->has_cameraone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->cameraone_, output);
  }

  // .vizProtobufferMessage.VizMessage.CameraTwoSettings cameraTwo = 8;
  if (this->has_cameratwo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->cameratwo_, output);
  }

  // .vizProtobufferMessage.VizMessage.PlanetCameraSettings planetCamera = 9;
  if (this->has_planetcamera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->planetcamera_, output);
  }

  // repeated .vizProtobufferMessage.VizMessage.ActuatorSettings actuatorSettings = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actuatorsettings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->actuatorsettings(static_cast<int>(i)), output);
  }

  // string skybox = 11;
  if (this->skybox().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->skybox().data(), static_cast<int>(this->skybox().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.VizSettingsPb.skybox");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->skybox(), output);
  }

  // repeated .vizProtobufferMessage.VizMessage.CustomModel customModels = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->custommodels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->custommodels(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage.VizSettingsPb)
}

::google::protobuf::uint8* VizMessage_VizSettingsPb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double ambient = 1;
  if (this->ambient() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ambient(), target);
  }

  // int32 orbitLinesOn = 2;
  if (this->orbitlineson() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->orbitlineson(), target);
  }

  // int32 spacecraftCSon = 3;
  if (this->spacecraftcson() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->spacecraftcson(), target);
  }

  // int32 planetCSon = 4;
  if (this->planetcson() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->planetcson(), target);
  }

  // repeated .vizProtobufferMessage.VizMessage.PointLine pointLines = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pointlines_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->pointlines(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vizProtobufferMessage.VizMessage.KeepOutInCone keepOutInCones = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keepoutincones_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->keepoutincones(static_cast<int>(i)), deterministic, target);
  }

  // .vizProtobufferMessage.VizMessage.CameraOneSettings cameraOne = 7;
  if (this->has_cameraone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->cameraone_, deterministic, target);
  }

  // .vizProtobufferMessage.VizMessage.CameraTwoSettings cameraTwo = 8;
  if (this->has_cameratwo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->cameratwo_, deterministic, target);
  }

  // .vizProtobufferMessage.VizMessage.PlanetCameraSettings planetCamera = 9;
  if (this->has_planetcamera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->planetcamera_, deterministic, target);
  }

  // repeated .vizProtobufferMessage.VizMessage.ActuatorSettings actuatorSettings = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actuatorsettings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->actuatorsettings(static_cast<int>(i)), deterministic, target);
  }

  // string skybox = 11;
  if (this->skybox().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->skybox().data(), static_cast<int>(this->skybox().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.VizSettingsPb.skybox");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->skybox(), target);
  }

  // repeated .vizProtobufferMessage.VizMessage.CustomModel customModels = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->custommodels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->custommodels(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.VizSettingsPb)
  return target;
}

size_t VizMessage_VizSettingsPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vizProtobufferMessage.VizMessage.PointLine pointLines = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->pointlines_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pointlines(static_cast<int>(i)));
    }
  }

  // repeated .vizProtobufferMessage.VizMessage.KeepOutInCone keepOutInCones = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->keepoutincones_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keepoutincones(static_cast<int>(i)));
    }
  }

  // repeated .vizProtobufferMessage.VizMessage.ActuatorSettings actuatorSettings = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->actuatorsettings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->actuatorsettings(static_cast<int>(i)));
    }
  }

  // repeated .vizProtobufferMessage.VizMessage.CustomModel customModels = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->custommodels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->custommodels(static_cast<int>(i)));
    }
  }

  // string skybox = 11;
  if (this->skybox().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->skybox());
  }

  // .vizProtobufferMessage.VizMessage.CameraOneSettings cameraOne = 7;
  if (this->has_cameraone()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cameraone_);
  }

  // .vizProtobufferMessage.VizMessage.CameraTwoSettings cameraTwo = 8;
  if (this->has_cameratwo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cameratwo_);
  }

  // .vizProtobufferMessage.VizMessage.PlanetCameraSettings planetCamera = 9;
  if (this->has_planetcamera()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->planetcamera_);
  }

  // double ambient = 1;
  if (this->ambient() != 0) {
    total_size += 1 + 8;
  }

  // int32 orbitLinesOn = 2;
  if (this->orbitlineson() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->orbitlineson());
  }

  // int32 spacecraftCSon = 3;
  if (this->spacecraftcson() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->spacecraftcson());
  }

  // int32 planetCSon = 4;
  if (this->planetcson() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->planetcson());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage_VizSettingsPb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_VizSettingsPb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage_VizSettingsPb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.VizSettingsPb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.VizSettingsPb)
    MergeFrom(*source);
  }
}

void VizMessage_VizSettingsPb::MergeFrom(const VizMessage_VizSettingsPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pointlines_.MergeFrom(from.pointlines_);
  keepoutincones_.MergeFrom(from.keepoutincones_);
  actuatorsettings_.MergeFrom(from.actuatorsettings_);
  custommodels_.MergeFrom(from.custommodels_);
  if (from.skybox().size() > 0) {

    skybox_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skybox_);
  }
  if (from.has_cameraone()) {
    mutable_cameraone()->::vizProtobufferMessage::VizMessage_CameraOneSettings::MergeFrom(from.cameraone());
  }
  if (from.has_cameratwo()) {
    mutable_cameratwo()->::vizProtobufferMessage::VizMessage_CameraTwoSettings::MergeFrom(from.cameratwo());
  }
  if (from.has_planetcamera()) {
    mutable_planetcamera()->::vizProtobufferMessage::VizMessage_PlanetCameraSettings::MergeFrom(from.planetcamera());
  }
  if (from.ambient() != 0) {
    set_ambient(from.ambient());
  }
  if (from.orbitlineson() != 0) {
    set_orbitlineson(from.orbitlineson());
  }
  if (from.spacecraftcson() != 0) {
    set_spacecraftcson(from.spacecraftcson());
  }
  if (from.planetcson() != 0) {
    set_planetcson(from.planetcson());
  }
}

void VizMessage_VizSettingsPb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_VizSettingsPb::CopyFrom(const VizMessage_VizSettingsPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_VizSettingsPb::IsInitialized() const {
  return true;
}

void VizMessage_VizSettingsPb::Swap(VizMessage_VizSettingsPb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage_VizSettingsPb::InternalSwap(VizMessage_VizSettingsPb* other) {
  using std::swap;
  pointlines_.InternalSwap(&other->pointlines_);
  keepoutincones_.InternalSwap(&other->keepoutincones_);
  actuatorsettings_.InternalSwap(&other->actuatorsettings_);
  custommodels_.InternalSwap(&other->custommodels_);
  skybox_.Swap(&other->skybox_);
  swap(cameraone_, other->cameraone_);
  swap(cameratwo_, other->cameratwo_);
  swap(planetcamera_, other->planetcamera_);
  swap(ambient_, other->ambient_);
  swap(orbitlineson_, other->orbitlineson_);
  swap(spacecraftcson_, other->spacecraftcson_);
  swap(planetcson_, other->planetcson_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage_VizSettingsPb::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VizMessage::InitAsDefaultInstance() {
  ::vizProtobufferMessage::_VizMessage_default_instance_._instance.get_mutable()->currenttime_ = const_cast< ::vizProtobufferMessage::VizMessage_TimeStamp*>(
      ::vizProtobufferMessage::VizMessage_TimeStamp::internal_default_instance());
  ::vizProtobufferMessage::_VizMessage_default_instance_._instance.get_mutable()->settings_ = const_cast< ::vizProtobufferMessage::VizMessage_VizSettingsPb*>(
      ::vizProtobufferMessage::VizMessage_VizSettingsPb::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VizMessage::kCurrentTimeFieldNumber;
const int VizMessage::kCelestialBodiesFieldNumber;
const int VizMessage::kSpacecraftFieldNumber;
const int VizMessage::kCamerasFieldNumber;
const int VizMessage::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VizMessage::VizMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vizProtobufferMessage.VizMessage)
}
VizMessage::VizMessage(const VizMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      celestialbodies_(from.celestialbodies_),
      spacecraft_(from.spacecraft_),
      cameras_(from.cameras_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_currenttime()) {
    currenttime_ = new ::vizProtobufferMessage::VizMessage_TimeStamp(*from.currenttime_);
  } else {
    currenttime_ = NULL;
  }
  if (from.has_settings()) {
    settings_ = new ::vizProtobufferMessage::VizMessage_VizSettingsPb(*from.settings_);
  } else {
    settings_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage)
}

void VizMessage::SharedCtor() {
  ::memset(&currenttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settings_) -
      reinterpret_cast<char*>(&currenttime_)) + sizeof(settings_));
  _cached_size_ = 0;
}

VizMessage::~VizMessage() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage)
  SharedDtor();
}

void VizMessage::SharedDtor() {
  if (this != internal_default_instance()) delete currenttime_;
  if (this != internal_default_instance()) delete settings_;
}

void VizMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VizMessage::descriptor() {
  ::protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VizMessage& VizMessage::default_instance() {
  ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage();
  return *internal_default_instance();
}

VizMessage* VizMessage::New(::google::protobuf::Arena* arena) const {
  VizMessage* n = new VizMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VizMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  celestialbodies_.Clear();
  spacecraft_.Clear();
  cameras_.Clear();
  if (GetArenaNoVirtual() == NULL && currenttime_ != NULL) {
    delete currenttime_;
  }
  currenttime_ = NULL;
  if (GetArenaNoVirtual() == NULL && settings_ != NULL) {
    delete settings_;
  }
  settings_ = NULL;
  _internal_metadata_.Clear();
}

bool VizMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vizProtobufferMessage.VizMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vizProtobufferMessage.VizMessage.TimeStamp currentTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_currenttime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vizProtobufferMessage.VizMessage.CelestialBody celestialBodies = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_celestialbodies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vizProtobufferMessage.VizMessage.Spacecraft spacecraft = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_spacecraft()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vizProtobufferMessage.VizMessage.CameraConfig cameras = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_cameras()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vizProtobufferMessage.VizMessage.VizSettingsPb settings = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vizProtobufferMessage.VizMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vizProtobufferMessage.VizMessage)
  return false;
#undef DO_
}

void VizMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vizProtobufferMessage.VizMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vizProtobufferMessage.VizMessage.TimeStamp currentTime = 1;
  if (this->has_currenttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->currenttime_, output);
  }

  // repeated .vizProtobufferMessage.VizMessage.CelestialBody celestialBodies = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->celestialbodies_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->celestialbodies(static_cast<int>(i)), output);
  }

  // repeated .vizProtobufferMessage.VizMessage.Spacecraft spacecraft = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spacecraft_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->spacecraft(static_cast<int>(i)), output);
  }

  // repeated .vizProtobufferMessage.VizMessage.CameraConfig cameras = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cameras_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cameras(static_cast<int>(i)), output);
  }

  // .vizProtobufferMessage.VizMessage.VizSettingsPb settings = 7;
  if (this->has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->settings_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vizProtobufferMessage.VizMessage)
}

::google::protobuf::uint8* VizMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vizProtobufferMessage.VizMessage.TimeStamp currentTime = 1;
  if (this->has_currenttime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->currenttime_, deterministic, target);
  }

  // repeated .vizProtobufferMessage.VizMessage.CelestialBody celestialBodies = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->celestialbodies_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->celestialbodies(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vizProtobufferMessage.VizMessage.Spacecraft spacecraft = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spacecraft_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->spacecraft(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vizProtobufferMessage.VizMessage.CameraConfig cameras = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cameras_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->cameras(static_cast<int>(i)), deterministic, target);
  }

  // .vizProtobufferMessage.VizMessage.VizSettingsPb settings = 7;
  if (this->has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->settings_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage)
  return target;
}

size_t VizMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vizProtobufferMessage.VizMessage.CelestialBody celestialBodies = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->celestialbodies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->celestialbodies(static_cast<int>(i)));
    }
  }

  // repeated .vizProtobufferMessage.VizMessage.Spacecraft spacecraft = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->spacecraft_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->spacecraft(static_cast<int>(i)));
    }
  }

  // repeated .vizProtobufferMessage.VizMessage.CameraConfig cameras = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->cameras_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cameras(static_cast<int>(i)));
    }
  }

  // .vizProtobufferMessage.VizMessage.TimeStamp currentTime = 1;
  if (this->has_currenttime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->currenttime_);
  }

  // .vizProtobufferMessage.VizMessage.VizSettingsPb settings = 7;
  if (this->has_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->settings_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VizMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VizMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage)
    MergeFrom(*source);
  }
}

void VizMessage::MergeFrom(const VizMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  celestialbodies_.MergeFrom(from.celestialbodies_);
  spacecraft_.MergeFrom(from.spacecraft_);
  cameras_.MergeFrom(from.cameras_);
  if (from.has_currenttime()) {
    mutable_currenttime()->::vizProtobufferMessage::VizMessage_TimeStamp::MergeFrom(from.currenttime());
  }
  if (from.has_settings()) {
    mutable_settings()->::vizProtobufferMessage::VizMessage_VizSettingsPb::MergeFrom(from.settings());
  }
}

void VizMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage::CopyFrom(const VizMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage::IsInitialized() const {
  return true;
}

void VizMessage::Swap(VizMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VizMessage::InternalSwap(VizMessage* other) {
  using std::swap;
  celestialbodies_.InternalSwap(&other->celestialbodies_);
  spacecraft_.InternalSwap(&other->spacecraft_);
  cameras_.InternalSwap(&other->cameras_);
  swap(currenttime_, other->currenttime_);
  swap(settings_, other->settings_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VizMessage::GetMetadata() const {
  protobuf_vizMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vizMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vizProtobufferMessage

// @@protoc_insertion_point(global_scope)
