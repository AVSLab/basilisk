// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: vizMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VizProtobufferMessage {

  /// <summary>Holder for reflection information generated from vizMessage.proto</summary>
  public static partial class VizMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for vizMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VizMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChB2aXpNZXNzYWdlLnByb3RvEhV2aXpQcm90b2J1ZmZlck1lc3NhZ2Uivg0K",
            "ClZpek1lc3NhZ2USQAoLY3VycmVudFRpbWUYASABKAsyKy52aXpQcm90b2J1",
            "ZmZlck1lc3NhZ2UuVml6TWVzc2FnZS5UaW1lU3RhbXASSAoPY2VsZXN0aWFs",
            "Qm9kaWVzGAIgAygLMi8udml6UHJvdG9idWZmZXJNZXNzYWdlLlZpek1lc3Nh",
            "Z2UuQ2VsZXN0aWFsQm9keRJACgpzcGFjZWNyYWZ0GAMgAygLMiwudml6UHJv",
            "dG9idWZmZXJNZXNzYWdlLlZpek1lc3NhZ2UuU3BhY2VjcmFmdBI/CgdjYW1l",
            "cmFzGAQgAygLMi4udml6UHJvdG9idWZmZXJNZXNzYWdlLlZpek1lc3NhZ2Uu",
            "Q2FtZXJhQ29uZmlnEkMKDGNhbWVyYUltYWdlcxgFIAMoCzItLnZpelByb3Rv",
            "YnVmZmVyTWVzc2FnZS5WaXpNZXNzYWdlLkNhbWVyYUltYWdlEkUKDWltYWdl",
            "UmVxdWVzdHMYBiADKAsyLi52aXpQcm90b2J1ZmZlck1lc3NhZ2UuVml6TWVz",
            "c2FnZS5JbWFnZVJlcXVlc3QaOAoJVGltZVN0YW1wEhMKC2ZyYW1lTnVtYmVy",
            "GAEgASgDEhYKDnNpbVRpbWVFbGFwc2VkGAIgASgBGlcKDUNlbGVzdGlhbEJv",
            "ZHkSEAoIYm9keU5hbWUYASABKAkSEAoIcG9zaXRpb24YAiADKAESEAoIdmVs",
            "b2NpdHkYAyADKAESEAoIcm90YXRpb24YBCADKAEa5wIKClNwYWNlY3JhZnQS",
            "FgoOc3BhY2VjcmFmdE5hbWUYASABKAkSEAoIcG9zaXRpb24YAiADKAESEAoI",
            "dmVsb2NpdHkYAyADKAESEAoIcm90YXRpb24YBCADKAESRwoOcmVhY3Rpb25X",
            "aGVlbHMYBSADKAsyLy52aXpQcm90b2J1ZmZlck1lc3NhZ2UuVml6TWVzc2Fn",
            "ZS5SZWFjdGlvbldoZWVsEj0KCXRocnVzdGVycxgGIAMoCzIqLnZpelByb3Rv",
            "YnVmZmVyTWVzc2FnZS5WaXpNZXNzYWdlLlRocnVzdGVyEj4KA0NTUxgHIAMo",
            "CzIxLnZpelByb3RvYnVmZmVyTWVzc2FnZS5WaXpNZXNzYWdlLkNvYXJzZVN1",
            "blNlbnNvchJDCgxzdGFyVHJhY2tlcnMYCCADKAsyLS52aXpQcm90b2J1ZmZl",
            "ck1lc3NhZ2UuVml6TWVzc2FnZS5TdGFyVHJhY2tlchpiCg1SZWFjdGlvbldo",
            "ZWVsEhAKCHBvc2l0aW9uGAIgAygBEhYKDnNwaW5BeGlzVmVjdG9yGAQgAygB",
            "EhIKCndoZWVsU3BlZWQYBSABKAESEwoLd2hlZWxUb3JxdWUYBiABKAEadQoI",
            "VGhydXN0ZXISEAoIcG9zaXRpb24YAiADKAESFAoMdGhydXN0VmVjdG9yGAQg",
            "AygBEhUKDWN1cnJlbnRUaHJ1c3QYBSABKAESEQoJbWF4VGhydXN0GAYgASgB",
            "EhcKD3RocnVzdGVyR3JvdXBJRBgHIAEoBRpiCg9Db2Fyc2VTdW5TZW5zb3IS",
            "EAoIcG9zaXRpb24YAiADKAESFAoMbm9ybWFsVmVjdG9yGAQgAygBEhMKC2N1",
            "cnJlbnRNc210GAUgASgBEhIKCkNTU0dyb3VwSUQYByABKAUaggEKC1N0YXJU",
            "cmFja2VyEhAKCHBvc2l0aW9uGAIgAygBEhAKCHJvdGF0aW9uGAQgAygBEhkK",
            "EWZpZWxkT2ZWaWV3SGVpZ2h0GAUgASgBEhgKEGZpZWxkT2ZWaWV3V2lkdGgY",
            "BiABKAESGgoSc3RhclRyYWNrZXJHcm91cElEGAcgASgFGsQBCgxDYW1lcmFD",
            "b25maWcSEAoIY2FtZXJhSUQYASABKAMSEgoKcGFyZW50TmFtZRgCIAEoCRIT",
            "CgtmaWVsZE9mVmlldxgDIAEoARISCgpyZXNvbHV0aW9uGAQgAygDEhMKC2Zv",
            "Y2FsTGVuZ3RoGAUgASgBEhIKCnNlbnNvclNpemUYBiADKAESEwoLY2FtZXJh",
            "UG9zX0IYByADKAESEwoLY2FtZXJhRGlyX0IYCCADKAESEgoKcmVuZGVyUmF0",
            "ZRgJIAEoBBpaCgtDYW1lcmFJbWFnZRIQCghjYW1lcmFJRBgBIAEoAxIPCgd0",
            "aW1lVGFnGAIgASgBEhUKDWltYWdlRmlsZU5hbWUYAyABKAkSEQoJaW1hZ2VG",
            "aWxlGAQgAygNGjEKDEltYWdlUmVxdWVzdBIQCghjYW1lcmFJRBgBIAEoAxIP",
            "Cgd0aW1lVGFnGAIgASgBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VizProtobufferMessage.VizMessage), global::VizProtobufferMessage.VizMessage.Parser, new[]{ "CurrentTime", "CelestialBodies", "Spacecraft", "Cameras", "CameraImages", "ImageRequests" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::VizProtobufferMessage.VizMessage.Types.TimeStamp), global::VizProtobufferMessage.VizMessage.Types.TimeStamp.Parser, new[]{ "FrameNumber", "SimTimeElapsed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VizProtobufferMessage.VizMessage.Types.CelestialBody), global::VizProtobufferMessage.VizMessage.Types.CelestialBody.Parser, new[]{ "BodyName", "Position", "Velocity", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VizProtobufferMessage.VizMessage.Types.Spacecraft), global::VizProtobufferMessage.VizMessage.Types.Spacecraft.Parser, new[]{ "SpacecraftName", "Position", "Velocity", "Rotation", "ReactionWheels", "Thrusters", "CSS", "StarTrackers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VizProtobufferMessage.VizMessage.Types.ReactionWheel), global::VizProtobufferMessage.VizMessage.Types.ReactionWheel.Parser, new[]{ "Position", "SpinAxisVector", "WheelSpeed", "WheelTorque" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VizProtobufferMessage.VizMessage.Types.Thruster), global::VizProtobufferMessage.VizMessage.Types.Thruster.Parser, new[]{ "Position", "ThrustVector", "CurrentThrust", "MaxThrust", "ThrusterGroupID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VizProtobufferMessage.VizMessage.Types.CoarseSunSensor), global::VizProtobufferMessage.VizMessage.Types.CoarseSunSensor.Parser, new[]{ "Position", "NormalVector", "CurrentMsmt", "CSSGroupID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VizProtobufferMessage.VizMessage.Types.StarTracker), global::VizProtobufferMessage.VizMessage.Types.StarTracker.Parser, new[]{ "Position", "Rotation", "FieldOfViewHeight", "FieldOfViewWidth", "StarTrackerGroupID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VizProtobufferMessage.VizMessage.Types.CameraConfig), global::VizProtobufferMessage.VizMessage.Types.CameraConfig.Parser, new[]{ "CameraID", "ParentName", "FieldOfView", "Resolution", "FocalLength", "SensorSize", "CameraPosB", "CameraDirB", "RenderRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VizProtobufferMessage.VizMessage.Types.CameraImage), global::VizProtobufferMessage.VizMessage.Types.CameraImage.Parser, new[]{ "CameraID", "TimeTag", "ImageFileName", "ImageFile" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VizProtobufferMessage.VizMessage.Types.ImageRequest), global::VizProtobufferMessage.VizMessage.Types.ImageRequest.Parser, new[]{ "CameraID", "TimeTag" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///A VizMessage should contain all Basilisk Sim messages needed to visualize a single time step
  /// </summary>
  public sealed partial class VizMessage : pb::IMessage<VizMessage> {
    private static readonly pb::MessageParser<VizMessage> _parser = new pb::MessageParser<VizMessage>(() => new VizMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VizMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VizProtobufferMessage.VizMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VizMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VizMessage(VizMessage other) : this() {
      CurrentTime = other.currentTime_ != null ? other.CurrentTime.Clone() : null;
      celestialBodies_ = other.celestialBodies_.Clone();
      spacecraft_ = other.spacecraft_.Clone();
      cameras_ = other.cameras_.Clone();
      cameraImages_ = other.cameraImages_.Clone();
      imageRequests_ = other.imageRequests_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VizMessage Clone() {
      return new VizMessage(this);
    }

    /// <summary>Field number for the "currentTime" field.</summary>
    public const int CurrentTimeFieldNumber = 1;
    private global::VizProtobufferMessage.VizMessage.Types.TimeStamp currentTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VizProtobufferMessage.VizMessage.Types.TimeStamp CurrentTime {
      get { return currentTime_; }
      set {
        currentTime_ = value;
      }
    }

    /// <summary>Field number for the "celestialBodies" field.</summary>
    public const int CelestialBodiesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::VizProtobufferMessage.VizMessage.Types.CelestialBody> _repeated_celestialBodies_codec
        = pb::FieldCodec.ForMessage(18, global::VizProtobufferMessage.VizMessage.Types.CelestialBody.Parser);
    private readonly pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.CelestialBody> celestialBodies_ = new pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.CelestialBody>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.CelestialBody> CelestialBodies {
      get { return celestialBodies_; }
    }

    /// <summary>Field number for the "spacecraft" field.</summary>
    public const int SpacecraftFieldNumber = 3;
    private static readonly pb::FieldCodec<global::VizProtobufferMessage.VizMessage.Types.Spacecraft> _repeated_spacecraft_codec
        = pb::FieldCodec.ForMessage(26, global::VizProtobufferMessage.VizMessage.Types.Spacecraft.Parser);
    private readonly pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.Spacecraft> spacecraft_ = new pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.Spacecraft>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.Spacecraft> Spacecraft {
      get { return spacecraft_; }
    }

    /// <summary>Field number for the "cameras" field.</summary>
    public const int CamerasFieldNumber = 4;
    private static readonly pb::FieldCodec<global::VizProtobufferMessage.VizMessage.Types.CameraConfig> _repeated_cameras_codec
        = pb::FieldCodec.ForMessage(34, global::VizProtobufferMessage.VizMessage.Types.CameraConfig.Parser);
    private readonly pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.CameraConfig> cameras_ = new pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.CameraConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.CameraConfig> Cameras {
      get { return cameras_; }
    }

    /// <summary>Field number for the "cameraImages" field.</summary>
    public const int CameraImagesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::VizProtobufferMessage.VizMessage.Types.CameraImage> _repeated_cameraImages_codec
        = pb::FieldCodec.ForMessage(42, global::VizProtobufferMessage.VizMessage.Types.CameraImage.Parser);
    private readonly pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.CameraImage> cameraImages_ = new pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.CameraImage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.CameraImage> CameraImages {
      get { return cameraImages_; }
    }

    /// <summary>Field number for the "imageRequests" field.</summary>
    public const int ImageRequestsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::VizProtobufferMessage.VizMessage.Types.ImageRequest> _repeated_imageRequests_codec
        = pb::FieldCodec.ForMessage(50, global::VizProtobufferMessage.VizMessage.Types.ImageRequest.Parser);
    private readonly pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.ImageRequest> imageRequests_ = new pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.ImageRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.ImageRequest> ImageRequests {
      get { return imageRequests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VizMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VizMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CurrentTime, other.CurrentTime)) return false;
      if(!celestialBodies_.Equals(other.celestialBodies_)) return false;
      if(!spacecraft_.Equals(other.spacecraft_)) return false;
      if(!cameras_.Equals(other.cameras_)) return false;
      if(!cameraImages_.Equals(other.cameraImages_)) return false;
      if(!imageRequests_.Equals(other.imageRequests_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (currentTime_ != null) hash ^= CurrentTime.GetHashCode();
      hash ^= celestialBodies_.GetHashCode();
      hash ^= spacecraft_.GetHashCode();
      hash ^= cameras_.GetHashCode();
      hash ^= cameraImages_.GetHashCode();
      hash ^= imageRequests_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (currentTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CurrentTime);
      }
      celestialBodies_.WriteTo(output, _repeated_celestialBodies_codec);
      spacecraft_.WriteTo(output, _repeated_spacecraft_codec);
      cameras_.WriteTo(output, _repeated_cameras_codec);
      cameraImages_.WriteTo(output, _repeated_cameraImages_codec);
      imageRequests_.WriteTo(output, _repeated_imageRequests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (currentTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentTime);
      }
      size += celestialBodies_.CalculateSize(_repeated_celestialBodies_codec);
      size += spacecraft_.CalculateSize(_repeated_spacecraft_codec);
      size += cameras_.CalculateSize(_repeated_cameras_codec);
      size += cameraImages_.CalculateSize(_repeated_cameraImages_codec);
      size += imageRequests_.CalculateSize(_repeated_imageRequests_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VizMessage other) {
      if (other == null) {
        return;
      }
      if (other.currentTime_ != null) {
        if (currentTime_ == null) {
          currentTime_ = new global::VizProtobufferMessage.VizMessage.Types.TimeStamp();
        }
        CurrentTime.MergeFrom(other.CurrentTime);
      }
      celestialBodies_.Add(other.celestialBodies_);
      spacecraft_.Add(other.spacecraft_);
      cameras_.Add(other.cameras_);
      cameraImages_.Add(other.cameraImages_);
      imageRequests_.Add(other.imageRequests_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (currentTime_ == null) {
              currentTime_ = new global::VizProtobufferMessage.VizMessage.Types.TimeStamp();
            }
            input.ReadMessage(currentTime_);
            break;
          }
          case 18: {
            celestialBodies_.AddEntriesFrom(input, _repeated_celestialBodies_codec);
            break;
          }
          case 26: {
            spacecraft_.AddEntriesFrom(input, _repeated_spacecraft_codec);
            break;
          }
          case 34: {
            cameras_.AddEntriesFrom(input, _repeated_cameras_codec);
            break;
          }
          case 42: {
            cameraImages_.AddEntriesFrom(input, _repeated_cameraImages_codec);
            break;
          }
          case 50: {
            imageRequests_.AddEntriesFrom(input, _repeated_imageRequests_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the VizMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class TimeStamp : pb::IMessage<TimeStamp> {
        private static readonly pb::MessageParser<TimeStamp> _parser = new pb::MessageParser<TimeStamp>(() => new TimeStamp());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TimeStamp> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VizProtobufferMessage.VizMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeStamp() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeStamp(TimeStamp other) : this() {
          frameNumber_ = other.frameNumber_;
          simTimeElapsed_ = other.simTimeElapsed_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeStamp Clone() {
          return new TimeStamp(this);
        }

        /// <summary>Field number for the "frameNumber" field.</summary>
        public const int FrameNumberFieldNumber = 1;
        private long frameNumber_;
        /// <summary>
        ///Current message's index
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FrameNumber {
          get { return frameNumber_; }
          set {
            frameNumber_ = value;
          }
        }

        /// <summary>Field number for the "simTimeElapsed" field.</summary>
        public const int SimTimeElapsedFieldNumber = 2;
        private double simTimeElapsed_;
        /// <summary>
        ///Elapsed time since sim start
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double SimTimeElapsed {
          get { return simTimeElapsed_; }
          set {
            simTimeElapsed_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TimeStamp);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TimeStamp other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FrameNumber != other.FrameNumber) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SimTimeElapsed, other.SimTimeElapsed)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FrameNumber != 0L) hash ^= FrameNumber.GetHashCode();
          if (SimTimeElapsed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SimTimeElapsed);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FrameNumber != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(FrameNumber);
          }
          if (SimTimeElapsed != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(SimTimeElapsed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FrameNumber != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameNumber);
          }
          if (SimTimeElapsed != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TimeStamp other) {
          if (other == null) {
            return;
          }
          if (other.FrameNumber != 0L) {
            FrameNumber = other.FrameNumber;
          }
          if (other.SimTimeElapsed != 0D) {
            SimTimeElapsed = other.SimTimeElapsed;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                FrameNumber = input.ReadInt64();
                break;
              }
              case 17: {
                SimTimeElapsed = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///CelestialBody messages will carry position, velocity, and rotation data for all celestial bodies to visualized in the current run (including sun, planets, and moon)
      /// </summary>
      public sealed partial class CelestialBody : pb::IMessage<CelestialBody> {
        private static readonly pb::MessageParser<CelestialBody> _parser = new pb::MessageParser<CelestialBody>(() => new CelestialBody());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CelestialBody> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VizProtobufferMessage.VizMessage.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CelestialBody() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CelestialBody(CelestialBody other) : this() {
          bodyName_ = other.bodyName_;
          position_ = other.position_.Clone();
          velocity_ = other.velocity_.Clone();
          rotation_ = other.rotation_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CelestialBody Clone() {
          return new CelestialBody(this);
        }

        /// <summary>Field number for the "bodyName" field.</summary>
        public const int BodyNameFieldNumber = 1;
        private string bodyName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BodyName {
          get { return bodyName_; }
          set {
            bodyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 2;
        private static readonly pb::FieldCodec<double> _repeated_position_codec
            = pb::FieldCodec.ForDouble(18);
        private readonly pbc::RepeatedField<double> position_ = new pbc::RepeatedField<double>();
        /// <summary>
        ///SpicePlanetStateSimMsg.PositionVector
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> Position {
          get { return position_; }
        }

        /// <summary>Field number for the "velocity" field.</summary>
        public const int VelocityFieldNumber = 3;
        private static readonly pb::FieldCodec<double> _repeated_velocity_codec
            = pb::FieldCodec.ForDouble(26);
        private readonly pbc::RepeatedField<double> velocity_ = new pbc::RepeatedField<double>();
        /// <summary>
        ///SpicePlanetStateSimMsg.VelocityVector
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> Velocity {
          get { return velocity_; }
        }

        /// <summary>Field number for the "rotation" field.</summary>
        public const int RotationFieldNumber = 4;
        private static readonly pb::FieldCodec<double> _repeated_rotation_codec
            = pb::FieldCodec.ForDouble(34);
        private readonly pbc::RepeatedField<double> rotation_ = new pbc::RepeatedField<double>();
        /// <summary>
        ///SpicePlanetStateSimMsg.J20002Pfix 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> Rotation {
          get { return rotation_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CelestialBody);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CelestialBody other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (BodyName != other.BodyName) return false;
          if(!position_.Equals(other.position_)) return false;
          if(!velocity_.Equals(other.velocity_)) return false;
          if(!rotation_.Equals(other.rotation_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (BodyName.Length != 0) hash ^= BodyName.GetHashCode();
          hash ^= position_.GetHashCode();
          hash ^= velocity_.GetHashCode();
          hash ^= rotation_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (BodyName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(BodyName);
          }
          position_.WriteTo(output, _repeated_position_codec);
          velocity_.WriteTo(output, _repeated_velocity_codec);
          rotation_.WriteTo(output, _repeated_rotation_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (BodyName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(BodyName);
          }
          size += position_.CalculateSize(_repeated_position_codec);
          size += velocity_.CalculateSize(_repeated_velocity_codec);
          size += rotation_.CalculateSize(_repeated_rotation_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CelestialBody other) {
          if (other == null) {
            return;
          }
          if (other.BodyName.Length != 0) {
            BodyName = other.BodyName;
          }
          position_.Add(other.position_);
          velocity_.Add(other.velocity_);
          rotation_.Add(other.rotation_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                BodyName = input.ReadString();
                break;
              }
              case 18:
              case 17: {
                position_.AddEntriesFrom(input, _repeated_position_codec);
                break;
              }
              case 26:
              case 25: {
                velocity_.AddEntriesFrom(input, _repeated_velocity_codec);
                break;
              }
              case 34:
              case 33: {
                rotation_.AddEntriesFrom(input, _repeated_rotation_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///Spacecraft message carry spacecraft position, velocity, and rotation data and proto messages for actuators and sensors
      /// </summary>
      public sealed partial class Spacecraft : pb::IMessage<Spacecraft> {
        private static readonly pb::MessageParser<Spacecraft> _parser = new pb::MessageParser<Spacecraft>(() => new Spacecraft());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Spacecraft> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VizProtobufferMessage.VizMessage.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Spacecraft() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Spacecraft(Spacecraft other) : this() {
          spacecraftName_ = other.spacecraftName_;
          position_ = other.position_.Clone();
          velocity_ = other.velocity_.Clone();
          rotation_ = other.rotation_.Clone();
          reactionWheels_ = other.reactionWheels_.Clone();
          thrusters_ = other.thrusters_.Clone();
          cSS_ = other.cSS_.Clone();
          starTrackers_ = other.starTrackers_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Spacecraft Clone() {
          return new Spacecraft(this);
        }

        /// <summary>Field number for the "spacecraftName" field.</summary>
        public const int SpacecraftNameFieldNumber = 1;
        private string spacecraftName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SpacecraftName {
          get { return spacecraftName_; }
          set {
            spacecraftName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 2;
        private static readonly pb::FieldCodec<double> _repeated_position_codec
            = pb::FieldCodec.ForDouble(18);
        private readonly pbc::RepeatedField<double> position_ = new pbc::RepeatedField<double>();
        /// <summary>
        ///SCPlusStatesSimMsg.r_BN_N
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> Position {
          get { return position_; }
        }

        /// <summary>Field number for the "velocity" field.</summary>
        public const int VelocityFieldNumber = 3;
        private static readonly pb::FieldCodec<double> _repeated_velocity_codec
            = pb::FieldCodec.ForDouble(26);
        private readonly pbc::RepeatedField<double> velocity_ = new pbc::RepeatedField<double>();
        /// <summary>
        ///SCPlusStatesSimMsg.v_BN_N
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> Velocity {
          get { return velocity_; }
        }

        /// <summary>Field number for the "rotation" field.</summary>
        public const int RotationFieldNumber = 4;
        private static readonly pb::FieldCodec<double> _repeated_rotation_codec
            = pb::FieldCodec.ForDouble(34);
        private readonly pbc::RepeatedField<double> rotation_ = new pbc::RepeatedField<double>();
        /// <summary>
        ///SCPlusStatesSimMsg.sigma_B
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> Rotation {
          get { return rotation_; }
        }

        /// <summary>Field number for the "reactionWheels" field.</summary>
        public const int ReactionWheelsFieldNumber = 5;
        private static readonly pb::FieldCodec<global::VizProtobufferMessage.VizMessage.Types.ReactionWheel> _repeated_reactionWheels_codec
            = pb::FieldCodec.ForMessage(42, global::VizProtobufferMessage.VizMessage.Types.ReactionWheel.Parser);
        private readonly pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.ReactionWheel> reactionWheels_ = new pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.ReactionWheel>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.ReactionWheel> ReactionWheels {
          get { return reactionWheels_; }
        }

        /// <summary>Field number for the "thrusters" field.</summary>
        public const int ThrustersFieldNumber = 6;
        private static readonly pb::FieldCodec<global::VizProtobufferMessage.VizMessage.Types.Thruster> _repeated_thrusters_codec
            = pb::FieldCodec.ForMessage(50, global::VizProtobufferMessage.VizMessage.Types.Thruster.Parser);
        private readonly pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.Thruster> thrusters_ = new pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.Thruster>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.Thruster> Thrusters {
          get { return thrusters_; }
        }

        /// <summary>Field number for the "CSS" field.</summary>
        public const int CSSFieldNumber = 7;
        private static readonly pb::FieldCodec<global::VizProtobufferMessage.VizMessage.Types.CoarseSunSensor> _repeated_cSS_codec
            = pb::FieldCodec.ForMessage(58, global::VizProtobufferMessage.VizMessage.Types.CoarseSunSensor.Parser);
        private readonly pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.CoarseSunSensor> cSS_ = new pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.CoarseSunSensor>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.CoarseSunSensor> CSS {
          get { return cSS_; }
        }

        /// <summary>Field number for the "starTrackers" field.</summary>
        public const int StarTrackersFieldNumber = 8;
        private static readonly pb::FieldCodec<global::VizProtobufferMessage.VizMessage.Types.StarTracker> _repeated_starTrackers_codec
            = pb::FieldCodec.ForMessage(66, global::VizProtobufferMessage.VizMessage.Types.StarTracker.Parser);
        private readonly pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.StarTracker> starTrackers_ = new pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.StarTracker>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::VizProtobufferMessage.VizMessage.Types.StarTracker> StarTrackers {
          get { return starTrackers_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Spacecraft);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Spacecraft other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SpacecraftName != other.SpacecraftName) return false;
          if(!position_.Equals(other.position_)) return false;
          if(!velocity_.Equals(other.velocity_)) return false;
          if(!rotation_.Equals(other.rotation_)) return false;
          if(!reactionWheels_.Equals(other.reactionWheels_)) return false;
          if(!thrusters_.Equals(other.thrusters_)) return false;
          if(!cSS_.Equals(other.cSS_)) return false;
          if(!starTrackers_.Equals(other.starTrackers_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (SpacecraftName.Length != 0) hash ^= SpacecraftName.GetHashCode();
          hash ^= position_.GetHashCode();
          hash ^= velocity_.GetHashCode();
          hash ^= rotation_.GetHashCode();
          hash ^= reactionWheels_.GetHashCode();
          hash ^= thrusters_.GetHashCode();
          hash ^= cSS_.GetHashCode();
          hash ^= starTrackers_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (SpacecraftName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(SpacecraftName);
          }
          position_.WriteTo(output, _repeated_position_codec);
          velocity_.WriteTo(output, _repeated_velocity_codec);
          rotation_.WriteTo(output, _repeated_rotation_codec);
          reactionWheels_.WriteTo(output, _repeated_reactionWheels_codec);
          thrusters_.WriteTo(output, _repeated_thrusters_codec);
          cSS_.WriteTo(output, _repeated_cSS_codec);
          starTrackers_.WriteTo(output, _repeated_starTrackers_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SpacecraftName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SpacecraftName);
          }
          size += position_.CalculateSize(_repeated_position_codec);
          size += velocity_.CalculateSize(_repeated_velocity_codec);
          size += rotation_.CalculateSize(_repeated_rotation_codec);
          size += reactionWheels_.CalculateSize(_repeated_reactionWheels_codec);
          size += thrusters_.CalculateSize(_repeated_thrusters_codec);
          size += cSS_.CalculateSize(_repeated_cSS_codec);
          size += starTrackers_.CalculateSize(_repeated_starTrackers_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Spacecraft other) {
          if (other == null) {
            return;
          }
          if (other.SpacecraftName.Length != 0) {
            SpacecraftName = other.SpacecraftName;
          }
          position_.Add(other.position_);
          velocity_.Add(other.velocity_);
          rotation_.Add(other.rotation_);
          reactionWheels_.Add(other.reactionWheels_);
          thrusters_.Add(other.thrusters_);
          cSS_.Add(other.cSS_);
          starTrackers_.Add(other.starTrackers_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                SpacecraftName = input.ReadString();
                break;
              }
              case 18:
              case 17: {
                position_.AddEntriesFrom(input, _repeated_position_codec);
                break;
              }
              case 26:
              case 25: {
                velocity_.AddEntriesFrom(input, _repeated_velocity_codec);
                break;
              }
              case 34:
              case 33: {
                rotation_.AddEntriesFrom(input, _repeated_rotation_codec);
                break;
              }
              case 42: {
                reactionWheels_.AddEntriesFrom(input, _repeated_reactionWheels_codec);
                break;
              }
              case 50: {
                thrusters_.AddEntriesFrom(input, _repeated_thrusters_codec);
                break;
              }
              case 58: {
                cSS_.AddEntriesFrom(input, _repeated_cSS_codec);
                break;
              }
              case 66: {
                starTrackers_.AddEntriesFrom(input, _repeated_starTrackers_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class ReactionWheel : pb::IMessage<ReactionWheel> {
        private static readonly pb::MessageParser<ReactionWheel> _parser = new pb::MessageParser<ReactionWheel>(() => new ReactionWheel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ReactionWheel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VizProtobufferMessage.VizMessage.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReactionWheel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReactionWheel(ReactionWheel other) : this() {
          position_ = other.position_.Clone();
          spinAxisVector_ = other.spinAxisVector_.Clone();
          wheelSpeed_ = other.wheelSpeed_;
          wheelTorque_ = other.wheelTorque_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReactionWheel Clone() {
          return new ReactionWheel(this);
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 2;
        private static readonly pb::FieldCodec<double> _repeated_position_codec
            = pb::FieldCodec.ForDouble(18);
        private readonly pbc::RepeatedField<double> position_ = new pbc::RepeatedField<double>();
        /// <summary>
        ///Note that this is not currently populated or used in Basilisk
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> Position {
          get { return position_; }
        }

        /// <summary>Field number for the "spinAxisVector" field.</summary>
        public const int SpinAxisVectorFieldNumber = 4;
        private static readonly pb::FieldCodec<double> _repeated_spinAxisVector_codec
            = pb::FieldCodec.ForDouble(34);
        private readonly pbc::RepeatedField<double> spinAxisVector_ = new pbc::RepeatedField<double>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> SpinAxisVector {
          get { return spinAxisVector_; }
        }

        /// <summary>Field number for the "wheelSpeed" field.</summary>
        public const int WheelSpeedFieldNumber = 5;
        private double wheelSpeed_;
        /// <summary>
        ///RWSpeedIntMsg.wheelSpeeds
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double WheelSpeed {
          get { return wheelSpeed_; }
          set {
            wheelSpeed_ = value;
          }
        }

        /// <summary>Field number for the "wheelTorque" field.</summary>
        public const int WheelTorqueFieldNumber = 6;
        private double wheelTorque_;
        /// <summary>
        ///RWArrayTorqueIntMsg.motorTorque
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double WheelTorque {
          get { return wheelTorque_; }
          set {
            wheelTorque_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ReactionWheel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ReactionWheel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!position_.Equals(other.position_)) return false;
          if(!spinAxisVector_.Equals(other.spinAxisVector_)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WheelSpeed, other.WheelSpeed)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WheelTorque, other.WheelTorque)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= position_.GetHashCode();
          hash ^= spinAxisVector_.GetHashCode();
          if (WheelSpeed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WheelSpeed);
          if (WheelTorque != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WheelTorque);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          position_.WriteTo(output, _repeated_position_codec);
          spinAxisVector_.WriteTo(output, _repeated_spinAxisVector_codec);
          if (WheelSpeed != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(WheelSpeed);
          }
          if (WheelTorque != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(WheelTorque);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += position_.CalculateSize(_repeated_position_codec);
          size += spinAxisVector_.CalculateSize(_repeated_spinAxisVector_codec);
          if (WheelSpeed != 0D) {
            size += 1 + 8;
          }
          if (WheelTorque != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ReactionWheel other) {
          if (other == null) {
            return;
          }
          position_.Add(other.position_);
          spinAxisVector_.Add(other.spinAxisVector_);
          if (other.WheelSpeed != 0D) {
            WheelSpeed = other.WheelSpeed;
          }
          if (other.WheelTorque != 0D) {
            WheelTorque = other.WheelTorque;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18:
              case 17: {
                position_.AddEntriesFrom(input, _repeated_position_codec);
                break;
              }
              case 34:
              case 33: {
                spinAxisVector_.AddEntriesFrom(input, _repeated_spinAxisVector_codec);
                break;
              }
              case 41: {
                WheelSpeed = input.ReadDouble();
                break;
              }
              case 49: {
                WheelTorque = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Thruster : pb::IMessage<Thruster> {
        private static readonly pb::MessageParser<Thruster> _parser = new pb::MessageParser<Thruster>(() => new Thruster());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Thruster> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VizProtobufferMessage.VizMessage.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Thruster() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Thruster(Thruster other) : this() {
          position_ = other.position_.Clone();
          thrustVector_ = other.thrustVector_.Clone();
          currentThrust_ = other.currentThrust_;
          maxThrust_ = other.maxThrust_;
          thrusterGroupID_ = other.thrusterGroupID_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Thruster Clone() {
          return new Thruster(this);
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 2;
        private static readonly pb::FieldCodec<double> _repeated_position_codec
            = pb::FieldCodec.ForDouble(18);
        private readonly pbc::RepeatedField<double> position_ = new pbc::RepeatedField<double>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> Position {
          get { return position_; }
        }

        /// <summary>Field number for the "thrustVector" field.</summary>
        public const int ThrustVectorFieldNumber = 4;
        private static readonly pb::FieldCodec<double> _repeated_thrustVector_codec
            = pb::FieldCodec.ForDouble(34);
        private readonly pbc::RepeatedField<double> thrustVector_ = new pbc::RepeatedField<double>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> ThrustVector {
          get { return thrustVector_; }
        }

        /// <summary>Field number for the "currentThrust" field.</summary>
        public const int CurrentThrustFieldNumber = 5;
        private double currentThrust_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double CurrentThrust {
          get { return currentThrust_; }
          set {
            currentThrust_ = value;
          }
        }

        /// <summary>Field number for the "maxThrust" field.</summary>
        public const int MaxThrustFieldNumber = 6;
        private double maxThrust_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MaxThrust {
          get { return maxThrust_; }
          set {
            maxThrust_ = value;
          }
        }

        /// <summary>Field number for the "thrusterGroupID" field.</summary>
        public const int ThrusterGroupIDFieldNumber = 7;
        private int thrusterGroupID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ThrusterGroupID {
          get { return thrusterGroupID_; }
          set {
            thrusterGroupID_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Thruster);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Thruster other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!position_.Equals(other.position_)) return false;
          if(!thrustVector_.Equals(other.thrustVector_)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurrentThrust, other.CurrentThrust)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxThrust, other.MaxThrust)) return false;
          if (ThrusterGroupID != other.ThrusterGroupID) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= position_.GetHashCode();
          hash ^= thrustVector_.GetHashCode();
          if (CurrentThrust != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurrentThrust);
          if (MaxThrust != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxThrust);
          if (ThrusterGroupID != 0) hash ^= ThrusterGroupID.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          position_.WriteTo(output, _repeated_position_codec);
          thrustVector_.WriteTo(output, _repeated_thrustVector_codec);
          if (CurrentThrust != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(CurrentThrust);
          }
          if (MaxThrust != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(MaxThrust);
          }
          if (ThrusterGroupID != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(ThrusterGroupID);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += position_.CalculateSize(_repeated_position_codec);
          size += thrustVector_.CalculateSize(_repeated_thrustVector_codec);
          if (CurrentThrust != 0D) {
            size += 1 + 8;
          }
          if (MaxThrust != 0D) {
            size += 1 + 8;
          }
          if (ThrusterGroupID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThrusterGroupID);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Thruster other) {
          if (other == null) {
            return;
          }
          position_.Add(other.position_);
          thrustVector_.Add(other.thrustVector_);
          if (other.CurrentThrust != 0D) {
            CurrentThrust = other.CurrentThrust;
          }
          if (other.MaxThrust != 0D) {
            MaxThrust = other.MaxThrust;
          }
          if (other.ThrusterGroupID != 0) {
            ThrusterGroupID = other.ThrusterGroupID;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18:
              case 17: {
                position_.AddEntriesFrom(input, _repeated_position_codec);
                break;
              }
              case 34:
              case 33: {
                thrustVector_.AddEntriesFrom(input, _repeated_thrustVector_codec);
                break;
              }
              case 41: {
                CurrentThrust = input.ReadDouble();
                break;
              }
              case 49: {
                MaxThrust = input.ReadDouble();
                break;
              }
              case 56: {
                ThrusterGroupID = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CoarseSunSensor : pb::IMessage<CoarseSunSensor> {
        private static readonly pb::MessageParser<CoarseSunSensor> _parser = new pb::MessageParser<CoarseSunSensor>(() => new CoarseSunSensor());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CoarseSunSensor> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VizProtobufferMessage.VizMessage.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CoarseSunSensor() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CoarseSunSensor(CoarseSunSensor other) : this() {
          position_ = other.position_.Clone();
          normalVector_ = other.normalVector_.Clone();
          currentMsmt_ = other.currentMsmt_;
          cSSGroupID_ = other.cSSGroupID_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CoarseSunSensor Clone() {
          return new CoarseSunSensor(this);
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 2;
        private static readonly pb::FieldCodec<double> _repeated_position_codec
            = pb::FieldCodec.ForDouble(18);
        private readonly pbc::RepeatedField<double> position_ = new pbc::RepeatedField<double>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> Position {
          get { return position_; }
        }

        /// <summary>Field number for the "normalVector" field.</summary>
        public const int NormalVectorFieldNumber = 4;
        private static readonly pb::FieldCodec<double> _repeated_normalVector_codec
            = pb::FieldCodec.ForDouble(34);
        private readonly pbc::RepeatedField<double> normalVector_ = new pbc::RepeatedField<double>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> NormalVector {
          get { return normalVector_; }
        }

        /// <summary>Field number for the "currentMsmt" field.</summary>
        public const int CurrentMsmtFieldNumber = 5;
        private double currentMsmt_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double CurrentMsmt {
          get { return currentMsmt_; }
          set {
            currentMsmt_ = value;
          }
        }

        /// <summary>Field number for the "CSSGroupID" field.</summary>
        public const int CSSGroupIDFieldNumber = 7;
        private int cSSGroupID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CSSGroupID {
          get { return cSSGroupID_; }
          set {
            cSSGroupID_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CoarseSunSensor);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CoarseSunSensor other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!position_.Equals(other.position_)) return false;
          if(!normalVector_.Equals(other.normalVector_)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurrentMsmt, other.CurrentMsmt)) return false;
          if (CSSGroupID != other.CSSGroupID) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= position_.GetHashCode();
          hash ^= normalVector_.GetHashCode();
          if (CurrentMsmt != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurrentMsmt);
          if (CSSGroupID != 0) hash ^= CSSGroupID.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          position_.WriteTo(output, _repeated_position_codec);
          normalVector_.WriteTo(output, _repeated_normalVector_codec);
          if (CurrentMsmt != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(CurrentMsmt);
          }
          if (CSSGroupID != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(CSSGroupID);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += position_.CalculateSize(_repeated_position_codec);
          size += normalVector_.CalculateSize(_repeated_normalVector_codec);
          if (CurrentMsmt != 0D) {
            size += 1 + 8;
          }
          if (CSSGroupID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CSSGroupID);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CoarseSunSensor other) {
          if (other == null) {
            return;
          }
          position_.Add(other.position_);
          normalVector_.Add(other.normalVector_);
          if (other.CurrentMsmt != 0D) {
            CurrentMsmt = other.CurrentMsmt;
          }
          if (other.CSSGroupID != 0) {
            CSSGroupID = other.CSSGroupID;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18:
              case 17: {
                position_.AddEntriesFrom(input, _repeated_position_codec);
                break;
              }
              case 34:
              case 33: {
                normalVector_.AddEntriesFrom(input, _repeated_normalVector_codec);
                break;
              }
              case 41: {
                CurrentMsmt = input.ReadDouble();
                break;
              }
              case 56: {
                CSSGroupID = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class StarTracker : pb::IMessage<StarTracker> {
        private static readonly pb::MessageParser<StarTracker> _parser = new pb::MessageParser<StarTracker>(() => new StarTracker());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StarTracker> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VizProtobufferMessage.VizMessage.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StarTracker() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StarTracker(StarTracker other) : this() {
          position_ = other.position_.Clone();
          rotation_ = other.rotation_.Clone();
          fieldOfViewHeight_ = other.fieldOfViewHeight_;
          fieldOfViewWidth_ = other.fieldOfViewWidth_;
          starTrackerGroupID_ = other.starTrackerGroupID_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StarTracker Clone() {
          return new StarTracker(this);
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 2;
        private static readonly pb::FieldCodec<double> _repeated_position_codec
            = pb::FieldCodec.ForDouble(18);
        private readonly pbc::RepeatedField<double> position_ = new pbc::RepeatedField<double>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> Position {
          get { return position_; }
        }

        /// <summary>Field number for the "rotation" field.</summary>
        public const int RotationFieldNumber = 4;
        private static readonly pb::FieldCodec<double> _repeated_rotation_codec
            = pb::FieldCodec.ForDouble(34);
        private readonly pbc::RepeatedField<double> rotation_ = new pbc::RepeatedField<double>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> Rotation {
          get { return rotation_; }
        }

        /// <summary>Field number for the "fieldOfViewHeight" field.</summary>
        public const int FieldOfViewHeightFieldNumber = 5;
        private double fieldOfViewHeight_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double FieldOfViewHeight {
          get { return fieldOfViewHeight_; }
          set {
            fieldOfViewHeight_ = value;
          }
        }

        /// <summary>Field number for the "fieldOfViewWidth" field.</summary>
        public const int FieldOfViewWidthFieldNumber = 6;
        private double fieldOfViewWidth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double FieldOfViewWidth {
          get { return fieldOfViewWidth_; }
          set {
            fieldOfViewWidth_ = value;
          }
        }

        /// <summary>Field number for the "starTrackerGroupID" field.</summary>
        public const int StarTrackerGroupIDFieldNumber = 7;
        private int starTrackerGroupID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int StarTrackerGroupID {
          get { return starTrackerGroupID_; }
          set {
            starTrackerGroupID_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StarTracker);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StarTracker other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!position_.Equals(other.position_)) return false;
          if(!rotation_.Equals(other.rotation_)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FieldOfViewHeight, other.FieldOfViewHeight)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FieldOfViewWidth, other.FieldOfViewWidth)) return false;
          if (StarTrackerGroupID != other.StarTrackerGroupID) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= position_.GetHashCode();
          hash ^= rotation_.GetHashCode();
          if (FieldOfViewHeight != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FieldOfViewHeight);
          if (FieldOfViewWidth != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FieldOfViewWidth);
          if (StarTrackerGroupID != 0) hash ^= StarTrackerGroupID.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          position_.WriteTo(output, _repeated_position_codec);
          rotation_.WriteTo(output, _repeated_rotation_codec);
          if (FieldOfViewHeight != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(FieldOfViewHeight);
          }
          if (FieldOfViewWidth != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(FieldOfViewWidth);
          }
          if (StarTrackerGroupID != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(StarTrackerGroupID);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += position_.CalculateSize(_repeated_position_codec);
          size += rotation_.CalculateSize(_repeated_rotation_codec);
          if (FieldOfViewHeight != 0D) {
            size += 1 + 8;
          }
          if (FieldOfViewWidth != 0D) {
            size += 1 + 8;
          }
          if (StarTrackerGroupID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(StarTrackerGroupID);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StarTracker other) {
          if (other == null) {
            return;
          }
          position_.Add(other.position_);
          rotation_.Add(other.rotation_);
          if (other.FieldOfViewHeight != 0D) {
            FieldOfViewHeight = other.FieldOfViewHeight;
          }
          if (other.FieldOfViewWidth != 0D) {
            FieldOfViewWidth = other.FieldOfViewWidth;
          }
          if (other.StarTrackerGroupID != 0) {
            StarTrackerGroupID = other.StarTrackerGroupID;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18:
              case 17: {
                position_.AddEntriesFrom(input, _repeated_position_codec);
                break;
              }
              case 34:
              case 33: {
                rotation_.AddEntriesFrom(input, _repeated_rotation_codec);
                break;
              }
              case 41: {
                FieldOfViewHeight = input.ReadDouble();
                break;
              }
              case 49: {
                FieldOfViewWidth = input.ReadDouble();
                break;
              }
              case 56: {
                StarTrackerGroupID = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CameraConfig : pb::IMessage<CameraConfig> {
        private static readonly pb::MessageParser<CameraConfig> _parser = new pb::MessageParser<CameraConfig>(() => new CameraConfig());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CameraConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VizProtobufferMessage.VizMessage.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CameraConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CameraConfig(CameraConfig other) : this() {
          cameraID_ = other.cameraID_;
          parentName_ = other.parentName_;
          fieldOfView_ = other.fieldOfView_;
          resolution_ = other.resolution_.Clone();
          focalLength_ = other.focalLength_;
          sensorSize_ = other.sensorSize_.Clone();
          cameraPosB_ = other.cameraPosB_.Clone();
          cameraDirB_ = other.cameraDirB_.Clone();
          renderRate_ = other.renderRate_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CameraConfig Clone() {
          return new CameraConfig(this);
        }

        /// <summary>Field number for the "cameraID" field.</summary>
        public const int CameraIDFieldNumber = 1;
        private long cameraID_;
        /// <summary>
        ///[-] ID of the camera that took the snapshot
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CameraID {
          get { return cameraID_; }
          set {
            cameraID_ = value;
          }
        }

        /// <summary>Field number for the "parentName" field.</summary>
        public const int ParentNameFieldNumber = 2;
        private string parentName_ = "";
        /// <summary>
        ///[-] Name of the parent body to which the camera should be attached
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ParentName {
          get { return parentName_; }
          set {
            parentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "fieldOfView" field.</summary>
        public const int FieldOfViewFieldNumber = 3;
        private double fieldOfView_;
        /// <summary>
        ///[deg] Camera Field of View 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double FieldOfView {
          get { return fieldOfView_; }
          set {
            fieldOfView_ = value;
          }
        }

        /// <summary>Field number for the "resolution" field.</summary>
        public const int ResolutionFieldNumber = 4;
        private static readonly pb::FieldCodec<long> _repeated_resolution_codec
            = pb::FieldCodec.ForInt64(34);
        private readonly pbc::RepeatedField<long> resolution_ = new pbc::RepeatedField<long>();
        /// <summary>
        ///[pixels] Desired image width and height
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> Resolution {
          get { return resolution_; }
        }

        /// <summary>Field number for the "focalLength" field.</summary>
        public const int FocalLengthFieldNumber = 5;
        private double focalLength_;
        /// <summary>
        /// [mm] Camera Focal Length
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double FocalLength {
          get { return focalLength_; }
          set {
            focalLength_ = value;
          }
        }

        /// <summary>Field number for the "sensorSize" field.</summary>
        public const int SensorSizeFieldNumber = 6;
        private static readonly pb::FieldCodec<double> _repeated_sensorSize_codec
            = pb::FieldCodec.ForDouble(50);
        private readonly pbc::RepeatedField<double> sensorSize_ = new pbc::RepeatedField<double>();
        /// <summary>
        ///[mm] Size of the camera sensor-paired with resolution gives you pixel size
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> SensorSize {
          get { return sensorSize_; }
        }

        /// <summary>Field number for the "cameraPos_B" field.</summary>
        public const int CameraPosBFieldNumber = 7;
        private static readonly pb::FieldCodec<double> _repeated_cameraPosB_codec
            = pb::FieldCodec.ForDouble(58);
        private readonly pbc::RepeatedField<double> cameraPosB_ = new pbc::RepeatedField<double>();
        /// <summary>
        ///[mm] Camera position in body frame
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> CameraPosB {
          get { return cameraPosB_; }
        }

        /// <summary>Field number for the "cameraDir_B" field.</summary>
        public const int CameraDirBFieldNumber = 8;
        private static readonly pb::FieldCodec<double> _repeated_cameraDirB_codec
            = pb::FieldCodec.ForDouble(66);
        private readonly pbc::RepeatedField<double> cameraDirB_ = new pbc::RepeatedField<double>();
        /// <summary>
        ///[-] Rotation to the camera frame MRP
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> CameraDirB {
          get { return cameraDirB_; }
        }

        /// <summary>Field number for the "renderRate" field.</summary>
        public const int RenderRateFieldNumber = 9;
        private ulong renderRate_;
        /// <summary>
        ///[ns] Sim elapsed time between saved camera images      
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RenderRate {
          get { return renderRate_; }
          set {
            renderRate_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CameraConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CameraConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CameraID != other.CameraID) return false;
          if (ParentName != other.ParentName) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FieldOfView, other.FieldOfView)) return false;
          if(!resolution_.Equals(other.resolution_)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FocalLength, other.FocalLength)) return false;
          if(!sensorSize_.Equals(other.sensorSize_)) return false;
          if(!cameraPosB_.Equals(other.cameraPosB_)) return false;
          if(!cameraDirB_.Equals(other.cameraDirB_)) return false;
          if (RenderRate != other.RenderRate) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CameraID != 0L) hash ^= CameraID.GetHashCode();
          if (ParentName.Length != 0) hash ^= ParentName.GetHashCode();
          if (FieldOfView != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FieldOfView);
          hash ^= resolution_.GetHashCode();
          if (FocalLength != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FocalLength);
          hash ^= sensorSize_.GetHashCode();
          hash ^= cameraPosB_.GetHashCode();
          hash ^= cameraDirB_.GetHashCode();
          if (RenderRate != 0UL) hash ^= RenderRate.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CameraID != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(CameraID);
          }
          if (ParentName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ParentName);
          }
          if (FieldOfView != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(FieldOfView);
          }
          resolution_.WriteTo(output, _repeated_resolution_codec);
          if (FocalLength != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(FocalLength);
          }
          sensorSize_.WriteTo(output, _repeated_sensorSize_codec);
          cameraPosB_.WriteTo(output, _repeated_cameraPosB_codec);
          cameraDirB_.WriteTo(output, _repeated_cameraDirB_codec);
          if (RenderRate != 0UL) {
            output.WriteRawTag(72);
            output.WriteUInt64(RenderRate);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CameraID != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CameraID);
          }
          if (ParentName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentName);
          }
          if (FieldOfView != 0D) {
            size += 1 + 8;
          }
          size += resolution_.CalculateSize(_repeated_resolution_codec);
          if (FocalLength != 0D) {
            size += 1 + 8;
          }
          size += sensorSize_.CalculateSize(_repeated_sensorSize_codec);
          size += cameraPosB_.CalculateSize(_repeated_cameraPosB_codec);
          size += cameraDirB_.CalculateSize(_repeated_cameraDirB_codec);
          if (RenderRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RenderRate);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CameraConfig other) {
          if (other == null) {
            return;
          }
          if (other.CameraID != 0L) {
            CameraID = other.CameraID;
          }
          if (other.ParentName.Length != 0) {
            ParentName = other.ParentName;
          }
          if (other.FieldOfView != 0D) {
            FieldOfView = other.FieldOfView;
          }
          resolution_.Add(other.resolution_);
          if (other.FocalLength != 0D) {
            FocalLength = other.FocalLength;
          }
          sensorSize_.Add(other.sensorSize_);
          cameraPosB_.Add(other.cameraPosB_);
          cameraDirB_.Add(other.cameraDirB_);
          if (other.RenderRate != 0UL) {
            RenderRate = other.RenderRate;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CameraID = input.ReadInt64();
                break;
              }
              case 18: {
                ParentName = input.ReadString();
                break;
              }
              case 25: {
                FieldOfView = input.ReadDouble();
                break;
              }
              case 34:
              case 32: {
                resolution_.AddEntriesFrom(input, _repeated_resolution_codec);
                break;
              }
              case 41: {
                FocalLength = input.ReadDouble();
                break;
              }
              case 50:
              case 49: {
                sensorSize_.AddEntriesFrom(input, _repeated_sensorSize_codec);
                break;
              }
              case 58:
              case 57: {
                cameraPosB_.AddEntriesFrom(input, _repeated_cameraPosB_codec);
                break;
              }
              case 66:
              case 65: {
                cameraDirB_.AddEntriesFrom(input, _repeated_cameraDirB_codec);
                break;
              }
              case 72: {
                RenderRate = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CameraImage : pb::IMessage<CameraImage> {
        private static readonly pb::MessageParser<CameraImage> _parser = new pb::MessageParser<CameraImage>(() => new CameraImage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CameraImage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VizProtobufferMessage.VizMessage.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CameraImage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CameraImage(CameraImage other) : this() {
          cameraID_ = other.cameraID_;
          timeTag_ = other.timeTag_;
          imageFileName_ = other.imageFileName_;
          imageFile_ = other.imageFile_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CameraImage Clone() {
          return new CameraImage(this);
        }

        /// <summary>Field number for the "cameraID" field.</summary>
        public const int CameraIDFieldNumber = 1;
        private long cameraID_;
        /// <summary>
        ///[-] ID of the camera that took the snapshot
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CameraID {
          get { return cameraID_; }
          set {
            cameraID_ = value;
          }
        }

        /// <summary>Field number for the "timeTag" field.</summary>
        public const int TimeTagFieldNumber = 2;
        private double timeTag_;
        /// <summary>
        ///[ns] Sim time at which the image was captured
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double TimeTag {
          get { return timeTag_; }
          set {
            timeTag_ = value;
          }
        }

        /// <summary>Field number for the "imageFileName" field.</summary>
        public const int ImageFileNameFieldNumber = 3;
        private string imageFileName_ = "";
        /// <summary>
        ///[-] Filepath for captured camera image
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ImageFileName {
          get { return imageFileName_; }
          set {
            imageFileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "imageFile" field.</summary>
        public const int ImageFileFieldNumber = 4;
        private static readonly pb::FieldCodec<uint> _repeated_imageFile_codec
            = pb::FieldCodec.ForUInt32(34);
        private readonly pbc::RepeatedField<uint> imageFile_ = new pbc::RepeatedField<uint>();
        /// <summary>
        ///[-] Image data
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> ImageFile {
          get { return imageFile_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CameraImage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CameraImage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CameraID != other.CameraID) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TimeTag, other.TimeTag)) return false;
          if (ImageFileName != other.ImageFileName) return false;
          if(!imageFile_.Equals(other.imageFile_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CameraID != 0L) hash ^= CameraID.GetHashCode();
          if (TimeTag != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TimeTag);
          if (ImageFileName.Length != 0) hash ^= ImageFileName.GetHashCode();
          hash ^= imageFile_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CameraID != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(CameraID);
          }
          if (TimeTag != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(TimeTag);
          }
          if (ImageFileName.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(ImageFileName);
          }
          imageFile_.WriteTo(output, _repeated_imageFile_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CameraID != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CameraID);
          }
          if (TimeTag != 0D) {
            size += 1 + 8;
          }
          if (ImageFileName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageFileName);
          }
          size += imageFile_.CalculateSize(_repeated_imageFile_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CameraImage other) {
          if (other == null) {
            return;
          }
          if (other.CameraID != 0L) {
            CameraID = other.CameraID;
          }
          if (other.TimeTag != 0D) {
            TimeTag = other.TimeTag;
          }
          if (other.ImageFileName.Length != 0) {
            ImageFileName = other.ImageFileName;
          }
          imageFile_.Add(other.imageFile_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CameraID = input.ReadInt64();
                break;
              }
              case 17: {
                TimeTag = input.ReadDouble();
                break;
              }
              case 26: {
                ImageFileName = input.ReadString();
                break;
              }
              case 34:
              case 32: {
                imageFile_.AddEntriesFrom(input, _repeated_imageFile_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class ImageRequest : pb::IMessage<ImageRequest> {
        private static readonly pb::MessageParser<ImageRequest> _parser = new pb::MessageParser<ImageRequest>(() => new ImageRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ImageRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VizProtobufferMessage.VizMessage.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageRequest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageRequest(ImageRequest other) : this() {
          cameraID_ = other.cameraID_;
          timeTag_ = other.timeTag_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageRequest Clone() {
          return new ImageRequest(this);
        }

        /// <summary>Field number for the "cameraID" field.</summary>
        public const int CameraIDFieldNumber = 1;
        private long cameraID_;
        /// <summary>
        ///[-] ID of the camera that should take an image
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CameraID {
          get { return cameraID_; }
          set {
            cameraID_ = value;
          }
        }

        /// <summary>Field number for the "timeTag" field.</summary>
        public const int TimeTagFieldNumber = 2;
        private double timeTag_;
        /// <summary>
        ///[ns] simElapsedTime at which to capture image
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double TimeTag {
          get { return timeTag_; }
          set {
            timeTag_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ImageRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ImageRequest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CameraID != other.CameraID) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TimeTag, other.TimeTag)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CameraID != 0L) hash ^= CameraID.GetHashCode();
          if (TimeTag != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TimeTag);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CameraID != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(CameraID);
          }
          if (TimeTag != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(TimeTag);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CameraID != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CameraID);
          }
          if (TimeTag != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ImageRequest other) {
          if (other == null) {
            return;
          }
          if (other.CameraID != 0L) {
            CameraID = other.CameraID;
          }
          if (other.TimeTag != 0D) {
            TimeTag = other.TimeTag;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CameraID = input.ReadInt64();
                break;
              }
              case 17: {
                TimeTag = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
