/* vizMessage is a protobuffer message template to relay messages from the 
 * Basilisk Sim to an external visualization application.
 * To generate the asscociate files for C++, run from a terminal window
 * protoc --cpp_out=./ vizMessage.proto
 */

syntax = "proto3";
package vizProtobufferMessage;

   
//A VizMessage should contain all Basilisk Sim messages needed to visualize a single time step
message VizMessage{
    
    message EpochDateTime{
        int32 year = 1;  //default: 2019
        int32 month = 2; //default: 1
        int32 day = 3;   //default: 1
        int32 hours = 4;    //default: 0
        int32 minutes = 5; //default: 0
        double seconds = 6; //default: 0.00
    }

    message TimeStamp{
        int64 frameNumber = 1; //Current message's index
        double simTimeElapsed = 2; //Elapsed time since sim start
    }

    //CelestialBody messages will carry position, velocity, and rotation data for all celestial bodies to visualized in the current run (including sun, planets, and moon)
    message CelestialBody{
        string bodyName = 1;
        repeated double position = 2;   //SpicePlanetStateSimMsg.PositionVector
        repeated double velocity = 3;   //SpicePlanetStateSimMsg.VelocityVector
        repeated double rotation = 4;  //SpicePlanetStateSimMsg.J20002Pfix
    }
  
    //Spacecraft message carry spacecraft position, velocity, and rotation data and proto messages for actuators and sensors
    message Spacecraft{
        string spacecraftName = 1;
        repeated double position = 2;  //SCPlusStatesSimMsg.r_BN_N
        repeated double velocity = 3;  //SCPlusStatesSimMsg.v_BN_N
        repeated double rotation = 4;  //SCPlusStatesSimMsg.sigma_B
      
        repeated ReactionWheel reactionWheels = 5;
        repeated Thruster thrusters = 6;
        repeated CoarseSunSensor CSS = 7;
        repeated StarTracker starTrackers = 8;
        string spacecraftSprite = 9; // Set sprite for this spacecraft only through shape name and optional int RGBA color values [0,255] Possible settings: "CIRCLE","SQUARE", "STAR", "TRIANGLE" or "bskSat" for a 2D spacecraft sprite of the bskSat shape
}

    message ReactionWheel{
        repeated double position = 2; // [m] position of the reaction wheel in body frame components. Note that this is not currently populated or used in Basilisk
        repeated double spinAxisVector = 4; // reaction wheel spin axis in body frame components
        double wheelSpeed = 5;  //[rad/s] RWSpeedIntMsg.wheelSpeeds
        double wheelTorque = 6; //[N m] RWArrayTorqueIntMsg.motorTorque
        double maxSpeed = 7; //[rad/s] (Optional) maximum RW speed capability
        double maxTorque = 8; //[N m] (Optional) maximum RW toruqe capability
    }

    message Thruster{
        repeated double position = 2;
        repeated double thrustVector = 4;
        double currentThrust = 5;
        double maxThrust = 6;
        //int32 thrusterGroupID = 7;
        string thrusterTag = 8;
        repeated int32 color = 9; //Send desired RGBA as values between 0 and 255
    }

    message CoarseSunSensor{
        repeated double position = 2;
        repeated double normalVector = 4;
        double currentMsmt = 5;
        int32 CSSGroupID = 7;
    }
  
    message StarTracker{
        repeated double position = 2;
        repeated double rotation = 4;
        double fieldOfViewHeight = 5;
        double fieldOfViewWidth = 6;
        int32 starTrackerGroupID = 7;
    }

    message CameraConfig{
        int64 cameraID = 1;  //[-] ID of the camera that took the snapshot
        string parentName = 2;  //[-] Name of the parent body to which the camera should be attached
        double fieldOfView = 3;  //[deg] Camera Field of View edge-to-edge along camera y axis
        repeated int64 resolution = 4;  //[pixels] Desired image width and height
//        double focalLength = 5;   // [mm] Camera Focal Length
//        repeated double sensorSize = 6;  //[mm] Size of the camera sensor-paired with resolution gives you pixel size
        repeated double cameraPos_B = 7;  //[m] Camera position in body frame
        repeated double cameraDir_B = 8;  //[-] Rotation to the camera frame MRP
        uint64 renderRate = 9;  //[ns] Sim elapsed time between saved camera images
        string skybox = 10; // '' provides default NASA SVS Starmap, "ESO" use ESO Milky Way skybox, "black" provides a black background, or provide a filepath to custom background
    }

    
    message PointLine{
        string fromBodyName = 1;
        string toBodyName = 2;
        repeated int32 lineColor = 3; //Send desired RGBA as values between 0 and 255
    }
    
    message KeepOutInCone{
        bool isKeepIn = 1; //True -> keep in cone created, False -> keep out cone created
        repeated double position = 2; //relative to from body coordinate frame
        repeated double normalVector = 3;
        double incidenceAngle = 4; //degrees
        double coneHeight = 5; //sets height of visible cone (asthetic only, does not impact function)
        string fromBodyName = 6; //body to attach cone onto
        string toBodyName = 7; //detect changes in this bodies impingement on cone
        repeated int32 coneColor = 8; //Send desired RGBA as values between 0 and 255
        string coneName = 9; //If unspecified, viz will autogenerate name
    }
    
    message StandardCameraSettings{
        string spacecraftName = 1; //Body to attach camera to (default is the first spacecraft in messages)
//        bool viewPanel = 2; //False (default) -> panel is not visible on screen
        int32 setMode = 3; // 0 -> body targeting, 1 -> pointing vector
//        bool spacecraftVisible = 4; //False (default) -> parent spacecraft will not be visible in camera view
        double fieldOfView = 5; //-1 -> use default, values between 0.0001 and 179.9999 valid
        string bodyTarget = 6; // Name of body camera should point to (default to first celestial body in messages). This is a setting for body targeting mode.
        int32 setView = 7; //0 -> Nadir, 1 -> Orbit Normal, 2 -> Along Track (default to nadir). This is a setting for body targeting mode.
        repeated double pointingVector = 8; //x,y,z, vector (default to 1, 0, 0). This is a setting for pointing vector mode.
        repeated double position = 9; // [m] (Optional) If populated, sets camera position relative to parent body coordinate frame in meters using B frame components. If unpopulated, camera is positioned automatically along camera view direction outside of parent body's mesh to prevent obstruction of view.
    }

    message ActuatorSettings{
        string spacecraftName = 1; //Which spacecraft's actuators to set
        int32 viewThrusterPanel = 2; // Value of 0 (protobuffer default) to use viz default, -1 for false, 1 for true
        int32 viewThrusterHUD = 3; // Value of 0 (protobuffer default) to use viz default, -1 for false, 1 for true
        int32 viewRWPanel = 4; // Value of 0 (protobuffer default) to use viz default, -1 for false, 1 for true
        int32 viewRWHUD = 5; // Value of 0 (protobuffer default) to use viz default, -1 for false, 1 for true
        int32 showThrusterLabels = 6; // Value of 0 (protobuffer default) to use viz default, -1 for false, 1 for true
        int32 showRWLabels = 7; // Value of 0 (protobuffer default) to use viz default, -1 for false, 1 for true
    }
    
    message CustomModel{
        string modelPath = 1; //Path to model obj -OR- "CUBE", "CYLINDER", or "SPHERE" to use a primitive shape
        repeated string simBodiesToModify = 2; //Which bodies in scene to replace with this model, use "ALL_SPACECRAFT" in the first string to apply custom model to all spacecraft in simulation
        repeated double offset = 3; //meters
        repeated double rotation = 4; // degrees, euler rotation about x, y, z axes in spacecraft CS
        repeated double scale = 5; //desired model scale in x, y, z in spacecraft CS
        string customTexturePath = 6; //(Optional) Path to texture to apply to model (note that a custom model's .mtl will be automatically imported with its textures during custom model import)
        string normalMapPath = 7; //(Optional) Path to the normal map for the customTexture
        int32 shader = 8; //(Optional) Value of -1 (protobuffer default) or 0 to use the viz default: Unity Specular Standard Shader, 1 for Unity Standard Shader
    }


    message VizSettingsPb{
        double ambient = 1; //Value of -1 to use viz default or specify value between 0 and 8
        int32 orbitLinesOn = 2; // Value of 0 (protobuffer default) to use viz default, -1 for false, 1 for true
        int32 spacecraftCSon = 3; // Value of 0 (protobuffer default) to use viz default, -1 for false, 1 for true
        int32 planetCSon = 4; // Value of 0 (protobuffer default) to use viz default, -1 for false, 1 for true
        repeated PointLine pointLines = 5;
        repeated KeepOutInCone keepOutInCones = 6;
        repeated StandardCameraSettings standardCameraSettings = 7;
//        CameraTwoSettings cameraTwo = 8;
//        PlanetCameraSettings planetCamera = 9;
        repeated ActuatorSettings actuatorSettings = 10;
        string skybox = 11; // '' provides default NASA SVS Starmap, "ESO" use ESO Milky Way skybox, "black" provides a black background, or provide a filepath to custom background
        repeated CustomModel customModels = 12;
        int32 viewCameraBoresightHUD = 13; // Value of 0 (protobuffer default) to use viz default, -1 for false, 1 for true
        int32 viewCameraConeHUD = 14; // Value of 0 (protobuffer default) to use viz default, -1 for false, 1 for true
        int32 showCSLabels = 15; // Value of 0 (protobuffer default) to use viz default, -1 for false, 1 for true
        int32 showCelestialBodyLabels = 16; // Value of 0 (protobuffer default) to use viz default, -1 for false, 1 for true
        int32 showSpacecraftLabels = 17; // Value of 0 (protobuffer default) to use viz default, -1 for false, 1 for true
        int32 showCameraLabels = 18; // Value of 0 (protobuffer default) to use viz default, -1 for false, 1 for true
        double customGUIScale = 19; //Value of -1 or 0 to use viz default
        string defaultSpacecraftSprite = 20; // Set sprite for ALL spacecraft through shape name and optional int RGB color values [0,255] Possible settings: "CIRCLE","SQUARE", "STAR", "TRIANGLE" or "bskSat" for a 2D spacecraft sprite of the bskSat shape
        int32 showSpacecraftAsSprites = 21; // Value of 0 (protobuffer default) to use viz default, -1 for false, 1 for true
        int32 showCelestialBodiesAsSprites =22; // Value of 0 (protobuffer default) to use viz default, -1 for false, 1 for true
        int32 show24hrClock = 23; // Value of 0 (protobuffer default) to use viz default, -1 for false, 1 for true
        int32 showDataRateDisplay = 24;// Value of 0 (protobuffer default) to use viz default, -1 for false, 1 for true
        double keyboardAngularRate = 25; // [deg/sec] Value of less than/equal to zero to use viz default
        double keyboardZoomRate = 26; // Value of less than/equal to zero to use viz default
        repeated int32 defaultThrusterColor = 27; //Send desired RGBA as values between 0 and 255
        double defaultThrusterPlumeLifeScalar = 28; // Value of 1.0 or 0.0 to use viz default, values between 0 and 1 will decrease the length of all plumes, >1 will increase lengths of all plumes
        int32 orbitLineSegments = 29; //Value of 0 (protobuffer default) to use viz default or any value greater than or equal to 4
        int32 relativeOrbitRange = 30; //[deg] Value of 0 (protobuffer default) to use viz default or any value greater than or equal to zero
        int32 showHillFrame = 31; // Value of 0 (protobuffer default) to use viz default, -1 for false, 1 for true

    }

    TimeStamp currentTime = 1;
    repeated CelestialBody celestialBodies = 2;
    repeated Spacecraft spacecraft = 3;
    repeated CameraConfig cameras = 4;
    //repeated cameraImage cameraImages = 5;
    //repeated ImageRequest imageRequests = 6;
    VizSettingsPb settings = 7;
    EpochDateTime epoch = 8;
}
