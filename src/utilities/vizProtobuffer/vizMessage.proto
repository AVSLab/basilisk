/* vizMessage is a protobuffer message template to relay messages from the 
 * Basilisk Sim to an external visualization application.
 * To generate the asscociate files for C++, run from a terminal window
 * protoc --cpp_out=./ vizMessage.proto
 */

syntax = "proto3";
package vizProtobufferMessage;

   
//A VizMessage should contain all Basilisk Sim messages needed to visualize a single time step
message VizMessage{

    message TimeStamp{
        int64 frameNumber = 1; //Current message's index
        double simTimeElapsed = 2; //Elapsed time since sim start
    }

    //CelestialBody messages will carry position, velocity, and rotation data for all celestial bodies to visualized in the current run (including sun, planets, and moon)
    message CelestialBody{
        string bodyName = 1;
        repeated double position = 2;   //SpicePlanetStateSimMsg.PositionVector
        repeated double velocity = 3;   //SpicePlanetStateSimMsg.VelocityVector
        repeated double rotation = 4;  //SpicePlanetStateSimMsg.J20002Pfix
    }
  
    //Spacecraft message carry spacecraft position, velocity, and rotation data and proto messages for actuators and sensors
    message Spacecraft{
        string spacecraftName = 1;
        repeated double position = 2;  //SCPlusStatesSimMsg.r_BN_N
        repeated double velocity = 3;  //SCPlusStatesSimMsg.v_BN_N
        repeated double rotation = 4;  //SCPlusStatesSimMsg.sigma_B
      
        repeated ReactionWheel reactionWheels = 5;
        repeated Thruster thrusters = 6;
        repeated CoarseSunSensor CSS = 7;
        repeated StarTracker starTrackers = 8;
}

    message ReactionWheel{
        repeated double position = 2; //Note that this is not currently populated or used in Basilisk
        repeated double spinAxisVector = 4;
        double wheelSpeed = 5;  //RWSpeedIntMsg.wheelSpeeds
        double wheelTorque = 6; //RWArrayTorqueIntMsg.motorTorque
    }

    message Thruster{
        repeated double position = 2;
        repeated double thrustVector = 4;
        double currentThrust = 5;
        double maxThrust = 6;
        int32 thrusterGroupID = 7;
    }

    message CoarseSunSensor{
        repeated double position = 2;
        repeated double normalVector = 4;
        double currentMsmt = 5;
        int32 CSSGroupID = 7;
    }
  
    message StarTracker{
        repeated double position = 2;
        repeated double rotation = 4;
        double fieldOfViewHeight = 5;
        double fieldOfViewWidth = 6;
        int32 starTrackerGroupID = 7;
    }

    message CameraConfig{
        int64 cameraID = 1;  //[-] ID of the camera that took the snapshot
        string parentName = 2;  //[-] Name of the parent body to which the camera should be attached
        double fieldOfView = 3;  //[deg] Camera Field of View
        repeated int64 resolution = 4;  //[pixels] Desired image width and height
        double focalLength = 5;   // [mm] Camera Focal Length
        repeated double sensorSize = 6;  //[mm] Size of the camera sensor-paired with resolution gives you pixel size
        repeated double cameraPos_B = 7;  //[mm] Camera position in body frame
        repeated double cameraDir_B = 8;  //[-] Rotation to the camera frame MRP
        uint64 renderRate = 9;  //[ns] Sim elapsed time between saved camera images
        string skybox = 10; // '' provides default NASA SVS Starmap, "ESO" use ESO Milky Way skybox, "black" provides a black background, or provide a filepath to custom background
    }

    
    message PointLine{
        string fromBodyName = 1;
        string toBodyName = 2;
        repeated int32 lineColor = 3; //Send desired RGBA as values between 0 and 255
    }
    
    message KeepOutInCone{
        bool isKeepIn = 1; //True -> keep in cone created, False -> keep out cone created
        repeated double position = 2; //relative to from body coordinate frame
        repeated double normalVector = 3;
        double incidenceAngle = 4; //degrees
        double coneHeight = 5; //sets height of visible cone (asthetic only, does not impact function)
        string fromBodyName = 6; //body to attach cone onto
        string toBodyName = 7; //detect changes in this bodies impingement on cone
        repeated int64 coneColor = 8; //Send desired RGBA as values between 0 and 255
        string coneName = 9; //If unspecified, viz will autogenerate name
    }
    
    message CameraOneSettings{
        string spacecraftName = 1; //Which spacecraft's camera 1
        bool viewPanel = 2; //False (default) -> panel is not visible on screen
        int32 setView = 3; // 0 -> +X, 1 -> -X, 2 -> +Y, 3 -> -Y, 4 -> +Z, 5 -> -Z
        bool spacecraftVisible = 4; //False (default) -> spacecraft mesh is invisible to this camera
        double fieldOfView = 5; //-1 -> use default, values between 0.0001 and 179.9999 valid
    }
    
    message CameraTwoSettings{
        string spacecraftName = 1; //Which spacecraft's camera 2
        bool viewPanel = 2; //False (default) -> panel is not visible on screen
        int32 setView = 3; // 0 -> +X, 1 -> -X, 2 -> +Y, 3 -> -Y, 4 -> +Z, 5 -> -Z
        bool spacecraftVisible = 4; //False (default) -> spacecraft mesh is invisible to this camera
        double fieldOfView = 5; //-1 -> use default, values between 0.0001 and 179.9999 valid
    }
    
    message PlanetCameraSettings{
        string spacecraftName = 1; //Which spacecraft's planet Camera
        bool viewPanel = 2; //False (default) -> panel is not visible on screen
        int32 setView = 3; // 0 -> Nadir, 1 -> Orbit Normal, 2 -> Along Track
        bool spacecraftVisible = 4; //False (default) -> spacecraft mesh is invisible to this camera
        double fieldOfView = 5; //-1 -> use default, values between 0.0001 and 179.9999 valid
        string targetBodyName = 6; //What body should this camera point at?
    }

    message ActuatorSettings{
        string spacecraftName = 1; //Which spacecraft's thrusters to set
        int32 viewThrusterPanel = 2; // Value of -1 to use viz default, 0 for false, 1 for true
        int32 viewThrusterHUD = 3; //Value of -1 to use viz default, 0 for false, 1 for true
        int32 viewRWPanel = 4; // Value of -1 to use viz default, 0 for false, 1 for true
        int32 viewRWHUD = 5; //Value of -1 to use viz default, 0 for false, 1 for true
    }


    message VizSettingsPb{
        double ambient = 1; //Value of -1 to use viz default or specify value between 0 and 8
        int32 orbitLinesOn = 2; // Value of -1 to use viz default, 0 for false, 1 for true
        int32 spacecraftCSon = 3; // Value of -1 to use viz default, 0 for false, 1 for true
        int32 planetCSon = 4; // Value of -1 to use viz default, 0 for false, 1 for true
        repeated PointLine pointLines = 5;
        repeated KeepOutInCone keepOutInCones = 6;
        CameraOneSettings cameraOne = 7;
        CameraTwoSettings cameraTwo = 8;
        PlanetCameraSettings planetCamera = 9;
        repeated ActuatorSettings actuatorSettings = 10;
        string skybox = 11; // '' provides default NASA SVS Starmap, "ESO" use ESO Milky Way skybox, "black" provides a black background, or provide a filepath to custom background

    }

    TimeStamp currentTime = 1;
    repeated CelestialBody celestialBodies = 2;
    repeated Spacecraft spacecraft = 3;
    repeated CameraConfig cameras = 4;
    VizSettingsPb settings = 5;
}
