'''
 ISC License

 Copyright (c) 2016, Autonomous Vehicle Systems Lab, University of Colorado at Boulder

 Permission to use, copy, modify, and/or distribute this software for any
 purpose with or without fee is hereby granted, provided that the above
 copyright notice and this permission notice appear in all copies.

 THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

'''
## \defgroup scenarioSimplePowerDemo
## @{
## Illustration of how to use simplePower modules to perform orbit power analysis considering attitude and orbital coupling.
#
# Simple Power System Demonstration {#scenarioPowerDemo}
# ====
#
# Scenario Description
# -----
# This scenario is intended to provide both an overview and a concrete demonstration of the features and interface of the
# simplePower group of modules, which represent Basilisk's low-fidelity power system modeling functionality. Specifically,
# simplePower modules are intended to provide three major features:
#   1. Computation of power generated by solar panels, which considers orbit and attitude dependence;
#   2. Computation of power consumed by on-board spacecraft power sinks;
#   3. Computation of the spacecraft power balance and total stored energy by the simpleBattery class.
#
# The simplePower subsystem consists of two kinds of Basilisk simModules: powerStorageBase (which is used to represent
# power storage units, and serves as the heart of the subsystem) and powerNodeBase (which is used to represent system
# components that consume or generate power). A conceptual diagram of these classes and their interfaces to eachother
# and the rest of Basilisk is shown in the figure below.
#  ![Simple Power System block diagram](Images/doc/simplePowerConcept.svg "Simple Power System interfaces")
#  In general, this system can be configured using the following process:
#   1. Create and configure a set of powerNodeBase modules to represent power system sources and sinks, including
#   their nodePowerOutMsgName attributes;
#   2. Create and configure a powerStorageBase instance;
#   3. Use the addPowerNodeToModel() method from the powerStorageBase on the nodePowerOutMsgNames you configured
#   in step 1 to link the power nodes to the powerStorageBase instance
#   4. Run the simulation.
#
#
# One version of this process is demonstrated here. A spacecraft representing a tumbling 6U cubesat is placed in a LEO orbit,
# using methods that are described in other scenarios. Three simplePower modules are created: a simpleBattery, a simpleSolarPanel,
# and a simplePowerSink (which represents the load demanded by on-board electronics.) The solar panel is assumed to be body-fixed,
# and given the parameters appropriate for a 6U cubesat. The initialization process as described above is implemented as:
# ~~~~~~~~~~~~~{.py}
#    # Create a solar panel
# solarPanel = simpleSolarPanel.SimpleSolarPanel()
# solarPanel.ModelTag = "solarPanel"
# solarPanel.stateInMsgName = scObject.scStateOutMsgName
# solarPanel.sunEclipseInMsgName = "eclipse_data_0"
# solarPanel.setPanelParameters([1,0,0], 0.06, 0.20)
# solarPanel.nodePowerOutMsgName = "panelPowerMsg"
# scenarioSim.AddModelToTask(taskName, solarPanel)
#
# #   Create a simple power sink
# powerSink = simplePowerSink.SimplePowerSink()
# powerSink.ModelTag = "powerSink2"
# powerSink.nodePowerOut = -3. # Watts
# powerSink.nodePowerOutMsgName = "powerSinkMsg"
# scenarioSim.AddModelToTask(taskName, powerSink)
#
# # Create a simpleBattery and attach the sources/sinks to it
# powerMonitor = simpleBattery.SimpleBattery()
# powerMonitor.ModelTag = "powerMonitor"
# powerMonitor.batPowerOutMsgName = "powerMonitorMsg"
# powerMonitor.storageCapacity = 10.0 * 3600.0# Convert from W-hr to Joules
# powerMonitor..storedCharge_Init = 10.0 * 3600.0# Convert from W-hr to Joules
# powerMonitor.addPowerNodeToModel(solarPanel.nodePowerOutMsgName)
# powerMonitor.addPowerNodeToModel(powerSink.nodePowerOutMsgName)
# scenarioSim.AddModelToTask(taskName, powerMonitor)
# ~~~~~~~~~~~~~
#
# The outputs of the simplePowerSystem can be logged by calling:
# ~~~~~~~~~~~~~{.py}
# # Log the subsystem output messages at each sim timestep
# scenarioSim.TotalSim.logThisMessage(solarPanel.nodePowerOutMsgName, testProcessRate)
# scenarioSim.TotalSim.logThisMessage(powerSink.nodePowerOutMsgName, testProcessRate)
# scenarioSim.TotalSim.logThisMessage(powerMonitor.batPowerOutMsgName, testProcessRate)
#
# ...Sim Execution...
#
# # Pull the logged message attributes that we want
# supplyData = scenarioSim.pullMessageLogData(solarPanel.nodePowerOutMsgName + ".netPower")
# sinkData = scenarioSim.pullMessageLogData(powerSink.nodePowerOutMsgName + ".netPower")
# storageData = scenarioSim.pullMessageLogData(powerMonitor.batPowerOutMsgName + ".storageLevel")
# netData = scenarioSim.pullMessageLogData(powerMonitor.batPowerOutMsgName + ".currentNetPower")
# ~~~~~~~~~~~~~
# To run the scenario , call the python script through
#
#       python3 scenarioPowerDemo.py
#
# When the simulation completes, one plot is shown to demonstrate the panel's attitude and orbit dependence, \
# the net power generated, the stored power, and the power consumed. An initial rise in net power from the panel \
# facing towards the sun is cut short as the spacecraft enters eclipse; as it exits, the stored charge of the \
# battery begins to rebuild.
# ![Power System Response](Images/Scenarios/scenario_powerDemo.svg "Power history")
## @}
import os, inspect
import numpy as np
from matplotlib import pyplot as plt

filename = inspect.getframeinfo(inspect.currentframe()).filename
path = os.path.dirname(os.path.abspath(filename))
bskName = 'Basilisk'
splitPath = path.split(bskName)

# Import all of the modules that we are going to be called in this simulation
from Basilisk.utilities import SimulationBaseClass
from Basilisk.utilities import unitTestSupport                  # general support file with common unit test functions
from Basilisk.simulation import groundLocation
from Basilisk.simulation import eclipse
from Basilisk.simulation import spacecraftPlus
from Basilisk.utilities import macros
from Basilisk.utilities import orbitalMotion
from Basilisk.utilities import simIncludeGravBody
from Basilisk.utilities import astroFunctions
from Basilisk import __path__
bskPath = __path__[0]

path = os.path.dirname(os.path.abspath(__file__))

def run():
    taskName = "unitTask"
    processname = "TestProcess"

    scenarioSim = SimulationBaseClass.SimBaseClass()
    testProcessRate = macros.sec2nano(1.0)
    testProc = scenarioSim.CreateNewProcess(processname)
    testProc.addTask(scenarioSim.CreateNewTask(taskName, testProcessRate))

    scObject = spacecraftPlus.SpacecraftPlus()
    scObject.ModelTag = "spacecraftBody"
    gravFactory = simIncludeGravBody.gravBodyFactory()

    planet = gravFactory.createEarth()
    planet.isCentralBody = True          # ensure this is the central gravitational body
    mu = planet.mu
    # attach gravity model to spaceCraftPlus
    scObject.gravField.gravBodies = spacecraftPlus.GravBodyVector(list(gravFactory.gravBodies.values()))

    #   setup orbit using orbitalMotion library
    oe = orbitalMotion.ClassicElements()
    oe.a = 6798920.68
    oe.e = .0013218
    oe.i = 51.51020*macros.D2R
    oe.Omega = 201.17770*macros.D2R
    oe.omega = 31.27778*macros.D2R
    oe.f     = 304.40301*macros.D2R
    rN, vN = orbitalMotion.elem2rv(mu, oe)

    n = np.sqrt(mu/(oe.a**3.0))
    P = 2.*np.pi/n

    scObject.hub.r_CN_NInit = unitTestSupport.np2EigenVectorXd(rN)
    scObject.hub.v_CN_NInit = unitTestSupport.np2EigenVectorXd(vN)

    scObject.hub.sigma_BNInit = [[0.1], [0.2], [-0.3]]  # sigma_BN_B
    scObject.hub.omega_BN_BInit = [[0.001], [-0.001], [0.001]]
    scenarioSim.AddModelToTask(taskName, scObject)


    #   Create an eclipse object so the panels don't always work
    eclipseObject = eclipse.Eclipse()
    eclipseObject.addPositionMsgName(scObject.scStateOutMsgName)
    eclipseObject.addPlanetName('earth')

    scenarioSim.AddModelToTask(taskName, eclipseObject)


    # setup Spice interface for some solar system bodies
    timeInitString = '2019 DEC 11 11:24:50.319 (UTC)'
    gravFactory.createSpiceInterface(bskPath + '/supportData/EphemerisData/'
                                     , timeInitString
                                     , spicePlanetNames = ["sun", "earth"]
                                     )
    scenarioSim.AddModelToTask(taskName, gravFactory.spiceObject, None, -1)

    # Create a ground location representing Boulder, CO
    boulder = groundLocation.GroundLocation()
    boulder.ModelTag = "boulder"
    boulder.specifyLocation(np.radians(40.0149856),np.radians(-105.2705456 ), 1624.0)
    boulder.addSpacecraftToModel(scObject.scStateOutMsgName)
    boulder.planetInMsgName = planet.bodyInMsgName
    boulder.maximumRange = 1e9 # m
    boulder.minimumElevation = np.radians(10.)
    scenarioSim.AddModelToTask(taskName, boulder)

    # Setup logging on the ground location
    scenarioSim.TotalSim.logThisMessage(boulder.accessOutMsgNames[0], testProcessRate)

    # Also log attitude/orbit parameters
    scenarioSim.TotalSim.logThisMessage(scObject.scStateOutMsgName, testProcessRate)
    scenarioSim.TotalSim.logThisMessage(planet.bodyInMsgName, testProcessRate)

    n_days = 2.
    n_seconds = n_days * 24. * 60. * 60.

    scenarioSim.InitializeSimulation()
    scenarioSim.ConfigureStopTime(macros.sec2nano(n_seconds))
    scenarioSim.ExecuteSimulation()

    locationData = scenarioSim.pullMultiMessageLogData([boulder.accessOutMsgNames[0]+'.hasAccess',
                                                      boulder.accessOutMsgNames[0] + '.slantRange',
                                                      boulder.accessOutMsgNames[0] + '.elevation',
                                                        boulder.accessOutMsgNames[0] + '.azimuth'],
                                                      [range(1),range(1),range(1),range(1)], ['int','double','double','double'])

    accessHist = locationData[boulder.accessOutMsgNames[0]+'.hasAccess']
    rangeHist = locationData[boulder.accessOutMsgNames[0]+'.slantRange']
    elevationHist = locationData[boulder.accessOutMsgNames[0]+'.elevation']

    scOrbit = scenarioSim.pullMessageLogData(scObject.scStateOutMsgName + ".r_BN_N", list(range(3)))
    planetOrbit = scenarioSim.pullMessageLogData(planet.bodyInMsgName+".PositionVector", list(range(3)))

    tvec = accessHist[:,0]
    tvec = tvec * macros.NANO2HOUR

    #   Plot the power states
    figureList = {}
    plt.close("all")  # clears out plots from earlier test runs
    plt.figure(1)

    plt.plot(tvec,rangeHist[:,1]/1000.,label='Range from Boulder (m)')
    plt.plot(tvec,np.degrees(elevationHist[:,1]),label='Elevation (deg)')
    plt.xlabel('Time (Hr)')
    plt.grid(True)
    plt.legend()

    plt.plot(tvec, accessHist[:, 1], label='Access')

    pltName = "scenarioGroundLocation"
    figureList[pltName] = plt.figure(1)

    return figureList

#
# This statement below ensures that the unitTestScript can be run as a
# stand-alone python script
#
if __name__ == "__main__":
    fig = run()
    plt.show()
