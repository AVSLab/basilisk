// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vizMessage.proto

#ifndef PROTOBUF_vizMessage_2eproto__INCLUDED
#define PROTOBUF_vizMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_vizMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsVizMessage_TimeStampImpl();
void InitDefaultsVizMessage_TimeStamp();
void InitDefaultsVizMessage_CelestialBodyImpl();
void InitDefaultsVizMessage_CelestialBody();
void InitDefaultsVizMessage_SpacecraftImpl();
void InitDefaultsVizMessage_Spacecraft();
void InitDefaultsVizMessage_ReactionWheelImpl();
void InitDefaultsVizMessage_ReactionWheel();
void InitDefaultsVizMessage_ThrusterImpl();
void InitDefaultsVizMessage_Thruster();
void InitDefaultsVizMessage_CoarseSunSensorImpl();
void InitDefaultsVizMessage_CoarseSunSensor();
void InitDefaultsVizMessage_StarTrackerImpl();
void InitDefaultsVizMessage_StarTracker();
void InitDefaultsVizMessage_CameraConfigImpl();
void InitDefaultsVizMessage_CameraConfig();
void InitDefaultsVizMessage_CameraImageImpl();
void InitDefaultsVizMessage_CameraImage();
void InitDefaultsVizMessage_ImageRequestImpl();
void InitDefaultsVizMessage_ImageRequest();
void InitDefaultsVizMessageImpl();
void InitDefaultsVizMessage();
inline void InitDefaults() {
  InitDefaultsVizMessage_TimeStamp();
  InitDefaultsVizMessage_CelestialBody();
  InitDefaultsVizMessage_Spacecraft();
  InitDefaultsVizMessage_ReactionWheel();
  InitDefaultsVizMessage_Thruster();
  InitDefaultsVizMessage_CoarseSunSensor();
  InitDefaultsVizMessage_StarTracker();
  InitDefaultsVizMessage_CameraConfig();
  InitDefaultsVizMessage_CameraImage();
  InitDefaultsVizMessage_ImageRequest();
  InitDefaultsVizMessage();
}
}  // namespace protobuf_vizMessage_2eproto
namespace vizProtobufferMessage {
class VizMessage;
class VizMessageDefaultTypeInternal;
extern VizMessageDefaultTypeInternal _VizMessage_default_instance_;
class VizMessage_CameraConfig;
class VizMessage_CameraConfigDefaultTypeInternal;
extern VizMessage_CameraConfigDefaultTypeInternal _VizMessage_CameraConfig_default_instance_;
class VizMessage_CameraImage;
class VizMessage_CameraImageDefaultTypeInternal;
extern VizMessage_CameraImageDefaultTypeInternal _VizMessage_CameraImage_default_instance_;
class VizMessage_CelestialBody;
class VizMessage_CelestialBodyDefaultTypeInternal;
extern VizMessage_CelestialBodyDefaultTypeInternal _VizMessage_CelestialBody_default_instance_;
class VizMessage_CoarseSunSensor;
class VizMessage_CoarseSunSensorDefaultTypeInternal;
extern VizMessage_CoarseSunSensorDefaultTypeInternal _VizMessage_CoarseSunSensor_default_instance_;
class VizMessage_ImageRequest;
class VizMessage_ImageRequestDefaultTypeInternal;
extern VizMessage_ImageRequestDefaultTypeInternal _VizMessage_ImageRequest_default_instance_;
class VizMessage_ReactionWheel;
class VizMessage_ReactionWheelDefaultTypeInternal;
extern VizMessage_ReactionWheelDefaultTypeInternal _VizMessage_ReactionWheel_default_instance_;
class VizMessage_Spacecraft;
class VizMessage_SpacecraftDefaultTypeInternal;
extern VizMessage_SpacecraftDefaultTypeInternal _VizMessage_Spacecraft_default_instance_;
class VizMessage_StarTracker;
class VizMessage_StarTrackerDefaultTypeInternal;
extern VizMessage_StarTrackerDefaultTypeInternal _VizMessage_StarTracker_default_instance_;
class VizMessage_Thruster;
class VizMessage_ThrusterDefaultTypeInternal;
extern VizMessage_ThrusterDefaultTypeInternal _VizMessage_Thruster_default_instance_;
class VizMessage_TimeStamp;
class VizMessage_TimeStampDefaultTypeInternal;
extern VizMessage_TimeStampDefaultTypeInternal _VizMessage_TimeStamp_default_instance_;
}  // namespace vizProtobufferMessage
namespace vizProtobufferMessage {

// ===================================================================

class VizMessage_TimeStamp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.TimeStamp) */ {
 public:
  VizMessage_TimeStamp();
  virtual ~VizMessage_TimeStamp();

  VizMessage_TimeStamp(const VizMessage_TimeStamp& from);

  inline VizMessage_TimeStamp& operator=(const VizMessage_TimeStamp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VizMessage_TimeStamp(VizMessage_TimeStamp&& from) noexcept
    : VizMessage_TimeStamp() {
    *this = ::std::move(from);
  }

  inline VizMessage_TimeStamp& operator=(VizMessage_TimeStamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VizMessage_TimeStamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VizMessage_TimeStamp* internal_default_instance() {
    return reinterpret_cast<const VizMessage_TimeStamp*>(
               &_VizMessage_TimeStamp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(VizMessage_TimeStamp* other);
  friend void swap(VizMessage_TimeStamp& a, VizMessage_TimeStamp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_TimeStamp* New() const PROTOBUF_FINAL { return New(NULL); }

  VizMessage_TimeStamp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VizMessage_TimeStamp& from);
  void MergeFrom(const VizMessage_TimeStamp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VizMessage_TimeStamp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 frameNumber = 1;
  void clear_framenumber();
  static const int kFrameNumberFieldNumber = 1;
  ::google::protobuf::int64 framenumber() const;
  void set_framenumber(::google::protobuf::int64 value);

  // double simTimeElapsed = 2;
  void clear_simtimeelapsed();
  static const int kSimTimeElapsedFieldNumber = 2;
  double simtimeelapsed() const;
  void set_simtimeelapsed(double value);

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.TimeStamp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 framenumber_;
  double simtimeelapsed_;
  mutable int _cached_size_;
  friend struct ::protobuf_vizMessage_2eproto::TableStruct;
  friend void ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_TimeStampImpl();
};
// -------------------------------------------------------------------

class VizMessage_CelestialBody : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.CelestialBody) */ {
 public:
  VizMessage_CelestialBody();
  virtual ~VizMessage_CelestialBody();

  VizMessage_CelestialBody(const VizMessage_CelestialBody& from);

  inline VizMessage_CelestialBody& operator=(const VizMessage_CelestialBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VizMessage_CelestialBody(VizMessage_CelestialBody&& from) noexcept
    : VizMessage_CelestialBody() {
    *this = ::std::move(from);
  }

  inline VizMessage_CelestialBody& operator=(VizMessage_CelestialBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VizMessage_CelestialBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VizMessage_CelestialBody* internal_default_instance() {
    return reinterpret_cast<const VizMessage_CelestialBody*>(
               &_VizMessage_CelestialBody_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(VizMessage_CelestialBody* other);
  friend void swap(VizMessage_CelestialBody& a, VizMessage_CelestialBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_CelestialBody* New() const PROTOBUF_FINAL { return New(NULL); }

  VizMessage_CelestialBody* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VizMessage_CelestialBody& from);
  void MergeFrom(const VizMessage_CelestialBody& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VizMessage_CelestialBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double position = 2;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::google::protobuf::RepeatedField< double >&
      position() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_position();

  // repeated double velocity = 3;
  int velocity_size() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 3;
  double velocity(int index) const;
  void set_velocity(int index, double value);
  void add_velocity(double value);
  const ::google::protobuf::RepeatedField< double >&
      velocity() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_velocity();

  // repeated double rotation = 4;
  int rotation_size() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 4;
  double rotation(int index) const;
  void set_rotation(int index, double value);
  void add_rotation(double value);
  const ::google::protobuf::RepeatedField< double >&
      rotation() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_rotation();

  // string bodyName = 1;
  void clear_bodyname();
  static const int kBodyNameFieldNumber = 1;
  const ::std::string& bodyname() const;
  void set_bodyname(const ::std::string& value);
  #if LANG_CXX11
  void set_bodyname(::std::string&& value);
  #endif
  void set_bodyname(const char* value);
  void set_bodyname(const char* value, size_t size);
  ::std::string* mutable_bodyname();
  ::std::string* release_bodyname();
  void set_allocated_bodyname(::std::string* bodyname);

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.CelestialBody)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > position_;
  mutable int _position_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > velocity_;
  mutable int _velocity_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > rotation_;
  mutable int _rotation_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr bodyname_;
  mutable int _cached_size_;
  friend struct ::protobuf_vizMessage_2eproto::TableStruct;
  friend void ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CelestialBodyImpl();
};
// -------------------------------------------------------------------

class VizMessage_Spacecraft : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.Spacecraft) */ {
 public:
  VizMessage_Spacecraft();
  virtual ~VizMessage_Spacecraft();

  VizMessage_Spacecraft(const VizMessage_Spacecraft& from);

  inline VizMessage_Spacecraft& operator=(const VizMessage_Spacecraft& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VizMessage_Spacecraft(VizMessage_Spacecraft&& from) noexcept
    : VizMessage_Spacecraft() {
    *this = ::std::move(from);
  }

  inline VizMessage_Spacecraft& operator=(VizMessage_Spacecraft&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VizMessage_Spacecraft& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VizMessage_Spacecraft* internal_default_instance() {
    return reinterpret_cast<const VizMessage_Spacecraft*>(
               &_VizMessage_Spacecraft_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(VizMessage_Spacecraft* other);
  friend void swap(VizMessage_Spacecraft& a, VizMessage_Spacecraft& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_Spacecraft* New() const PROTOBUF_FINAL { return New(NULL); }

  VizMessage_Spacecraft* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VizMessage_Spacecraft& from);
  void MergeFrom(const VizMessage_Spacecraft& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VizMessage_Spacecraft* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double position = 2;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::google::protobuf::RepeatedField< double >&
      position() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_position();

  // repeated double velocity = 3;
  int velocity_size() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 3;
  double velocity(int index) const;
  void set_velocity(int index, double value);
  void add_velocity(double value);
  const ::google::protobuf::RepeatedField< double >&
      velocity() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_velocity();

  // repeated double rotation = 4;
  int rotation_size() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 4;
  double rotation(int index) const;
  void set_rotation(int index, double value);
  void add_rotation(double value);
  const ::google::protobuf::RepeatedField< double >&
      rotation() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_rotation();

  // repeated .vizProtobufferMessage.VizMessage.ReactionWheel reactionWheels = 5;
  int reactionwheels_size() const;
  void clear_reactionwheels();
  static const int kReactionWheelsFieldNumber = 5;
  const ::vizProtobufferMessage::VizMessage_ReactionWheel& reactionwheels(int index) const;
  ::vizProtobufferMessage::VizMessage_ReactionWheel* mutable_reactionwheels(int index);
  ::vizProtobufferMessage::VizMessage_ReactionWheel* add_reactionwheels();
  ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_ReactionWheel >*
      mutable_reactionwheels();
  const ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_ReactionWheel >&
      reactionwheels() const;

  // repeated .vizProtobufferMessage.VizMessage.Thruster thrusters = 6;
  int thrusters_size() const;
  void clear_thrusters();
  static const int kThrustersFieldNumber = 6;
  const ::vizProtobufferMessage::VizMessage_Thruster& thrusters(int index) const;
  ::vizProtobufferMessage::VizMessage_Thruster* mutable_thrusters(int index);
  ::vizProtobufferMessage::VizMessage_Thruster* add_thrusters();
  ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Thruster >*
      mutable_thrusters();
  const ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Thruster >&
      thrusters() const;

  // repeated .vizProtobufferMessage.VizMessage.CoarseSunSensor CSS = 7;
  int css_size() const;
  void clear_css();
  static const int kCSSFieldNumber = 7;
  const ::vizProtobufferMessage::VizMessage_CoarseSunSensor& css(int index) const;
  ::vizProtobufferMessage::VizMessage_CoarseSunSensor* mutable_css(int index);
  ::vizProtobufferMessage::VizMessage_CoarseSunSensor* add_css();
  ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CoarseSunSensor >*
      mutable_css();
  const ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CoarseSunSensor >&
      css() const;

  // repeated .vizProtobufferMessage.VizMessage.StarTracker starTrackers = 8;
  int startrackers_size() const;
  void clear_startrackers();
  static const int kStarTrackersFieldNumber = 8;
  const ::vizProtobufferMessage::VizMessage_StarTracker& startrackers(int index) const;
  ::vizProtobufferMessage::VizMessage_StarTracker* mutable_startrackers(int index);
  ::vizProtobufferMessage::VizMessage_StarTracker* add_startrackers();
  ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_StarTracker >*
      mutable_startrackers();
  const ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_StarTracker >&
      startrackers() const;

  // string spacecraftName = 1;
  void clear_spacecraftname();
  static const int kSpacecraftNameFieldNumber = 1;
  const ::std::string& spacecraftname() const;
  void set_spacecraftname(const ::std::string& value);
  #if LANG_CXX11
  void set_spacecraftname(::std::string&& value);
  #endif
  void set_spacecraftname(const char* value);
  void set_spacecraftname(const char* value, size_t size);
  ::std::string* mutable_spacecraftname();
  ::std::string* release_spacecraftname();
  void set_allocated_spacecraftname(::std::string* spacecraftname);

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.Spacecraft)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > position_;
  mutable int _position_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > velocity_;
  mutable int _velocity_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > rotation_;
  mutable int _rotation_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_ReactionWheel > reactionwheels_;
  ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Thruster > thrusters_;
  ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CoarseSunSensor > css_;
  ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_StarTracker > startrackers_;
  ::google::protobuf::internal::ArenaStringPtr spacecraftname_;
  mutable int _cached_size_;
  friend struct ::protobuf_vizMessage_2eproto::TableStruct;
  friend void ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_SpacecraftImpl();
};
// -------------------------------------------------------------------

class VizMessage_ReactionWheel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.ReactionWheel) */ {
 public:
  VizMessage_ReactionWheel();
  virtual ~VizMessage_ReactionWheel();

  VizMessage_ReactionWheel(const VizMessage_ReactionWheel& from);

  inline VizMessage_ReactionWheel& operator=(const VizMessage_ReactionWheel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VizMessage_ReactionWheel(VizMessage_ReactionWheel&& from) noexcept
    : VizMessage_ReactionWheel() {
    *this = ::std::move(from);
  }

  inline VizMessage_ReactionWheel& operator=(VizMessage_ReactionWheel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VizMessage_ReactionWheel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VizMessage_ReactionWheel* internal_default_instance() {
    return reinterpret_cast<const VizMessage_ReactionWheel*>(
               &_VizMessage_ReactionWheel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(VizMessage_ReactionWheel* other);
  friend void swap(VizMessage_ReactionWheel& a, VizMessage_ReactionWheel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_ReactionWheel* New() const PROTOBUF_FINAL { return New(NULL); }

  VizMessage_ReactionWheel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VizMessage_ReactionWheel& from);
  void MergeFrom(const VizMessage_ReactionWheel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VizMessage_ReactionWheel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double position = 2;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::google::protobuf::RepeatedField< double >&
      position() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_position();

  // repeated double spinAxisVector = 4;
  int spinaxisvector_size() const;
  void clear_spinaxisvector();
  static const int kSpinAxisVectorFieldNumber = 4;
  double spinaxisvector(int index) const;
  void set_spinaxisvector(int index, double value);
  void add_spinaxisvector(double value);
  const ::google::protobuf::RepeatedField< double >&
      spinaxisvector() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_spinaxisvector();

  // double wheelSpeed = 5;
  void clear_wheelspeed();
  static const int kWheelSpeedFieldNumber = 5;
  double wheelspeed() const;
  void set_wheelspeed(double value);

  // double wheelTorque = 6;
  void clear_wheeltorque();
  static const int kWheelTorqueFieldNumber = 6;
  double wheeltorque() const;
  void set_wheeltorque(double value);

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.ReactionWheel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > position_;
  mutable int _position_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > spinaxisvector_;
  mutable int _spinaxisvector_cached_byte_size_;
  double wheelspeed_;
  double wheeltorque_;
  mutable int _cached_size_;
  friend struct ::protobuf_vizMessage_2eproto::TableStruct;
  friend void ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_ReactionWheelImpl();
};
// -------------------------------------------------------------------

class VizMessage_Thruster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.Thruster) */ {
 public:
  VizMessage_Thruster();
  virtual ~VizMessage_Thruster();

  VizMessage_Thruster(const VizMessage_Thruster& from);

  inline VizMessage_Thruster& operator=(const VizMessage_Thruster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VizMessage_Thruster(VizMessage_Thruster&& from) noexcept
    : VizMessage_Thruster() {
    *this = ::std::move(from);
  }

  inline VizMessage_Thruster& operator=(VizMessage_Thruster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VizMessage_Thruster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VizMessage_Thruster* internal_default_instance() {
    return reinterpret_cast<const VizMessage_Thruster*>(
               &_VizMessage_Thruster_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(VizMessage_Thruster* other);
  friend void swap(VizMessage_Thruster& a, VizMessage_Thruster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_Thruster* New() const PROTOBUF_FINAL { return New(NULL); }

  VizMessage_Thruster* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VizMessage_Thruster& from);
  void MergeFrom(const VizMessage_Thruster& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VizMessage_Thruster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double position = 2;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::google::protobuf::RepeatedField< double >&
      position() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_position();

  // repeated double thrustVector = 4;
  int thrustvector_size() const;
  void clear_thrustvector();
  static const int kThrustVectorFieldNumber = 4;
  double thrustvector(int index) const;
  void set_thrustvector(int index, double value);
  void add_thrustvector(double value);
  const ::google::protobuf::RepeatedField< double >&
      thrustvector() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_thrustvector();

  // double currentThrust = 5;
  void clear_currentthrust();
  static const int kCurrentThrustFieldNumber = 5;
  double currentthrust() const;
  void set_currentthrust(double value);

  // double maxThrust = 6;
  void clear_maxthrust();
  static const int kMaxThrustFieldNumber = 6;
  double maxthrust() const;
  void set_maxthrust(double value);

  // int32 thrusterGroupID = 7;
  void clear_thrustergroupid();
  static const int kThrusterGroupIDFieldNumber = 7;
  ::google::protobuf::int32 thrustergroupid() const;
  void set_thrustergroupid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.Thruster)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > position_;
  mutable int _position_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > thrustvector_;
  mutable int _thrustvector_cached_byte_size_;
  double currentthrust_;
  double maxthrust_;
  ::google::protobuf::int32 thrustergroupid_;
  mutable int _cached_size_;
  friend struct ::protobuf_vizMessage_2eproto::TableStruct;
  friend void ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_ThrusterImpl();
};
// -------------------------------------------------------------------

class VizMessage_CoarseSunSensor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.CoarseSunSensor) */ {
 public:
  VizMessage_CoarseSunSensor();
  virtual ~VizMessage_CoarseSunSensor();

  VizMessage_CoarseSunSensor(const VizMessage_CoarseSunSensor& from);

  inline VizMessage_CoarseSunSensor& operator=(const VizMessage_CoarseSunSensor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VizMessage_CoarseSunSensor(VizMessage_CoarseSunSensor&& from) noexcept
    : VizMessage_CoarseSunSensor() {
    *this = ::std::move(from);
  }

  inline VizMessage_CoarseSunSensor& operator=(VizMessage_CoarseSunSensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VizMessage_CoarseSunSensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VizMessage_CoarseSunSensor* internal_default_instance() {
    return reinterpret_cast<const VizMessage_CoarseSunSensor*>(
               &_VizMessage_CoarseSunSensor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(VizMessage_CoarseSunSensor* other);
  friend void swap(VizMessage_CoarseSunSensor& a, VizMessage_CoarseSunSensor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_CoarseSunSensor* New() const PROTOBUF_FINAL { return New(NULL); }

  VizMessage_CoarseSunSensor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VizMessage_CoarseSunSensor& from);
  void MergeFrom(const VizMessage_CoarseSunSensor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VizMessage_CoarseSunSensor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double position = 2;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::google::protobuf::RepeatedField< double >&
      position() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_position();

  // repeated double normalVector = 4;
  int normalvector_size() const;
  void clear_normalvector();
  static const int kNormalVectorFieldNumber = 4;
  double normalvector(int index) const;
  void set_normalvector(int index, double value);
  void add_normalvector(double value);
  const ::google::protobuf::RepeatedField< double >&
      normalvector() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_normalvector();

  // double currentMsmt = 5;
  void clear_currentmsmt();
  static const int kCurrentMsmtFieldNumber = 5;
  double currentmsmt() const;
  void set_currentmsmt(double value);

  // int32 CSSGroupID = 7;
  void clear_cssgroupid();
  static const int kCSSGroupIDFieldNumber = 7;
  ::google::protobuf::int32 cssgroupid() const;
  void set_cssgroupid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.CoarseSunSensor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > position_;
  mutable int _position_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > normalvector_;
  mutable int _normalvector_cached_byte_size_;
  double currentmsmt_;
  ::google::protobuf::int32 cssgroupid_;
  mutable int _cached_size_;
  friend struct ::protobuf_vizMessage_2eproto::TableStruct;
  friend void ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CoarseSunSensorImpl();
};
// -------------------------------------------------------------------

class VizMessage_StarTracker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.StarTracker) */ {
 public:
  VizMessage_StarTracker();
  virtual ~VizMessage_StarTracker();

  VizMessage_StarTracker(const VizMessage_StarTracker& from);

  inline VizMessage_StarTracker& operator=(const VizMessage_StarTracker& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VizMessage_StarTracker(VizMessage_StarTracker&& from) noexcept
    : VizMessage_StarTracker() {
    *this = ::std::move(from);
  }

  inline VizMessage_StarTracker& operator=(VizMessage_StarTracker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VizMessage_StarTracker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VizMessage_StarTracker* internal_default_instance() {
    return reinterpret_cast<const VizMessage_StarTracker*>(
               &_VizMessage_StarTracker_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(VizMessage_StarTracker* other);
  friend void swap(VizMessage_StarTracker& a, VizMessage_StarTracker& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_StarTracker* New() const PROTOBUF_FINAL { return New(NULL); }

  VizMessage_StarTracker* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VizMessage_StarTracker& from);
  void MergeFrom(const VizMessage_StarTracker& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VizMessage_StarTracker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double position = 2;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::google::protobuf::RepeatedField< double >&
      position() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_position();

  // repeated double rotation = 4;
  int rotation_size() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 4;
  double rotation(int index) const;
  void set_rotation(int index, double value);
  void add_rotation(double value);
  const ::google::protobuf::RepeatedField< double >&
      rotation() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_rotation();

  // double fieldOfViewHeight = 5;
  void clear_fieldofviewheight();
  static const int kFieldOfViewHeightFieldNumber = 5;
  double fieldofviewheight() const;
  void set_fieldofviewheight(double value);

  // double fieldOfViewWidth = 6;
  void clear_fieldofviewwidth();
  static const int kFieldOfViewWidthFieldNumber = 6;
  double fieldofviewwidth() const;
  void set_fieldofviewwidth(double value);

  // int32 starTrackerGroupID = 7;
  void clear_startrackergroupid();
  static const int kStarTrackerGroupIDFieldNumber = 7;
  ::google::protobuf::int32 startrackergroupid() const;
  void set_startrackergroupid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.StarTracker)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > position_;
  mutable int _position_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > rotation_;
  mutable int _rotation_cached_byte_size_;
  double fieldofviewheight_;
  double fieldofviewwidth_;
  ::google::protobuf::int32 startrackergroupid_;
  mutable int _cached_size_;
  friend struct ::protobuf_vizMessage_2eproto::TableStruct;
  friend void ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_StarTrackerImpl();
};
// -------------------------------------------------------------------

class VizMessage_CameraConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.CameraConfig) */ {
 public:
  VizMessage_CameraConfig();
  virtual ~VizMessage_CameraConfig();

  VizMessage_CameraConfig(const VizMessage_CameraConfig& from);

  inline VizMessage_CameraConfig& operator=(const VizMessage_CameraConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VizMessage_CameraConfig(VizMessage_CameraConfig&& from) noexcept
    : VizMessage_CameraConfig() {
    *this = ::std::move(from);
  }

  inline VizMessage_CameraConfig& operator=(VizMessage_CameraConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VizMessage_CameraConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VizMessage_CameraConfig* internal_default_instance() {
    return reinterpret_cast<const VizMessage_CameraConfig*>(
               &_VizMessage_CameraConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(VizMessage_CameraConfig* other);
  friend void swap(VizMessage_CameraConfig& a, VizMessage_CameraConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_CameraConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  VizMessage_CameraConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VizMessage_CameraConfig& from);
  void MergeFrom(const VizMessage_CameraConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VizMessage_CameraConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 resolution = 4;
  int resolution_size() const;
  void clear_resolution();
  static const int kResolutionFieldNumber = 4;
  ::google::protobuf::int64 resolution(int index) const;
  void set_resolution(int index, ::google::protobuf::int64 value);
  void add_resolution(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      resolution() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_resolution();

  // repeated double sensorSize = 6;
  int sensorsize_size() const;
  void clear_sensorsize();
  static const int kSensorSizeFieldNumber = 6;
  double sensorsize(int index) const;
  void set_sensorsize(int index, double value);
  void add_sensorsize(double value);
  const ::google::protobuf::RepeatedField< double >&
      sensorsize() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_sensorsize();

  // repeated double cameraPos_B = 7;
  int camerapos_b_size() const;
  void clear_camerapos_b();
  static const int kCameraPosBFieldNumber = 7;
  double camerapos_b(int index) const;
  void set_camerapos_b(int index, double value);
  void add_camerapos_b(double value);
  const ::google::protobuf::RepeatedField< double >&
      camerapos_b() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_camerapos_b();

  // repeated double cameraDir_B = 8;
  int cameradir_b_size() const;
  void clear_cameradir_b();
  static const int kCameraDirBFieldNumber = 8;
  double cameradir_b(int index) const;
  void set_cameradir_b(int index, double value);
  void add_cameradir_b(double value);
  const ::google::protobuf::RepeatedField< double >&
      cameradir_b() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_cameradir_b();

  // string parentName = 2;
  void clear_parentname();
  static const int kParentNameFieldNumber = 2;
  const ::std::string& parentname() const;
  void set_parentname(const ::std::string& value);
  #if LANG_CXX11
  void set_parentname(::std::string&& value);
  #endif
  void set_parentname(const char* value);
  void set_parentname(const char* value, size_t size);
  ::std::string* mutable_parentname();
  ::std::string* release_parentname();
  void set_allocated_parentname(::std::string* parentname);

  // int64 cameraID = 1;
  void clear_cameraid();
  static const int kCameraIDFieldNumber = 1;
  ::google::protobuf::int64 cameraid() const;
  void set_cameraid(::google::protobuf::int64 value);

  // double fieldOfView = 3;
  void clear_fieldofview();
  static const int kFieldOfViewFieldNumber = 3;
  double fieldofview() const;
  void set_fieldofview(double value);

  // double focalLength = 5;
  void clear_focallength();
  static const int kFocalLengthFieldNumber = 5;
  double focallength() const;
  void set_focallength(double value);

  // uint64 renderRate = 9;
  void clear_renderrate();
  static const int kRenderRateFieldNumber = 9;
  ::google::protobuf::uint64 renderrate() const;
  void set_renderrate(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.CameraConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > resolution_;
  mutable int _resolution_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > sensorsize_;
  mutable int _sensorsize_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > camerapos_b_;
  mutable int _camerapos_b_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > cameradir_b_;
  mutable int _cameradir_b_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr parentname_;
  ::google::protobuf::int64 cameraid_;
  double fieldofview_;
  double focallength_;
  ::google::protobuf::uint64 renderrate_;
  mutable int _cached_size_;
  friend struct ::protobuf_vizMessage_2eproto::TableStruct;
  friend void ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CameraConfigImpl();
};
// -------------------------------------------------------------------

class VizMessage_CameraImage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.CameraImage) */ {
 public:
  VizMessage_CameraImage();
  virtual ~VizMessage_CameraImage();

  VizMessage_CameraImage(const VizMessage_CameraImage& from);

  inline VizMessage_CameraImage& operator=(const VizMessage_CameraImage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VizMessage_CameraImage(VizMessage_CameraImage&& from) noexcept
    : VizMessage_CameraImage() {
    *this = ::std::move(from);
  }

  inline VizMessage_CameraImage& operator=(VizMessage_CameraImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VizMessage_CameraImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VizMessage_CameraImage* internal_default_instance() {
    return reinterpret_cast<const VizMessage_CameraImage*>(
               &_VizMessage_CameraImage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(VizMessage_CameraImage* other);
  friend void swap(VizMessage_CameraImage& a, VizMessage_CameraImage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_CameraImage* New() const PROTOBUF_FINAL { return New(NULL); }

  VizMessage_CameraImage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VizMessage_CameraImage& from);
  void MergeFrom(const VizMessage_CameraImage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VizMessage_CameraImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 imageFile = 4;
  int imagefile_size() const;
  void clear_imagefile();
  static const int kImageFileFieldNumber = 4;
  ::google::protobuf::uint32 imagefile(int index) const;
  void set_imagefile(int index, ::google::protobuf::uint32 value);
  void add_imagefile(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      imagefile() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_imagefile();

  // string imageFileName = 3;
  void clear_imagefilename();
  static const int kImageFileNameFieldNumber = 3;
  const ::std::string& imagefilename() const;
  void set_imagefilename(const ::std::string& value);
  #if LANG_CXX11
  void set_imagefilename(::std::string&& value);
  #endif
  void set_imagefilename(const char* value);
  void set_imagefilename(const char* value, size_t size);
  ::std::string* mutable_imagefilename();
  ::std::string* release_imagefilename();
  void set_allocated_imagefilename(::std::string* imagefilename);

  // int64 cameraID = 1;
  void clear_cameraid();
  static const int kCameraIDFieldNumber = 1;
  ::google::protobuf::int64 cameraid() const;
  void set_cameraid(::google::protobuf::int64 value);

  // double timeTag = 2;
  void clear_timetag();
  static const int kTimeTagFieldNumber = 2;
  double timetag() const;
  void set_timetag(double value);

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.CameraImage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > imagefile_;
  mutable int _imagefile_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr imagefilename_;
  ::google::protobuf::int64 cameraid_;
  double timetag_;
  mutable int _cached_size_;
  friend struct ::protobuf_vizMessage_2eproto::TableStruct;
  friend void ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_CameraImageImpl();
};
// -------------------------------------------------------------------

class VizMessage_ImageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.ImageRequest) */ {
 public:
  VizMessage_ImageRequest();
  virtual ~VizMessage_ImageRequest();

  VizMessage_ImageRequest(const VizMessage_ImageRequest& from);

  inline VizMessage_ImageRequest& operator=(const VizMessage_ImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VizMessage_ImageRequest(VizMessage_ImageRequest&& from) noexcept
    : VizMessage_ImageRequest() {
    *this = ::std::move(from);
  }

  inline VizMessage_ImageRequest& operator=(VizMessage_ImageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VizMessage_ImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VizMessage_ImageRequest* internal_default_instance() {
    return reinterpret_cast<const VizMessage_ImageRequest*>(
               &_VizMessage_ImageRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(VizMessage_ImageRequest* other);
  friend void swap(VizMessage_ImageRequest& a, VizMessage_ImageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_ImageRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  VizMessage_ImageRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VizMessage_ImageRequest& from);
  void MergeFrom(const VizMessage_ImageRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VizMessage_ImageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 cameraID = 1;
  void clear_cameraid();
  static const int kCameraIDFieldNumber = 1;
  ::google::protobuf::int64 cameraid() const;
  void set_cameraid(::google::protobuf::int64 value);

  // double timeTag = 2;
  void clear_timetag();
  static const int kTimeTagFieldNumber = 2;
  double timetag() const;
  void set_timetag(double value);

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.ImageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 cameraid_;
  double timetag_;
  mutable int _cached_size_;
  friend struct ::protobuf_vizMessage_2eproto::TableStruct;
  friend void ::protobuf_vizMessage_2eproto::InitDefaultsVizMessage_ImageRequestImpl();
};
// -------------------------------------------------------------------

class VizMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage) */ {
 public:
  VizMessage();
  virtual ~VizMessage();

  VizMessage(const VizMessage& from);

  inline VizMessage& operator=(const VizMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VizMessage(VizMessage&& from) noexcept
    : VizMessage() {
    *this = ::std::move(from);
  }

  inline VizMessage& operator=(VizMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VizMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VizMessage* internal_default_instance() {
    return reinterpret_cast<const VizMessage*>(
               &_VizMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(VizMessage* other);
  friend void swap(VizMessage& a, VizMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VizMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  VizMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VizMessage& from);
  void MergeFrom(const VizMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VizMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VizMessage_TimeStamp TimeStamp;
  typedef VizMessage_CelestialBody CelestialBody;
  typedef VizMessage_Spacecraft Spacecraft;
  typedef VizMessage_ReactionWheel ReactionWheel;
  typedef VizMessage_Thruster Thruster;
  typedef VizMessage_CoarseSunSensor CoarseSunSensor;
  typedef VizMessage_StarTracker StarTracker;
  typedef VizMessage_CameraConfig CameraConfig;
  typedef VizMessage_CameraImage CameraImage;
  typedef VizMessage_ImageRequest ImageRequest;

  // accessors -------------------------------------------------------

  // repeated .vizProtobufferMessage.VizMessage.CelestialBody celestialBodies = 2;
  int celestialbodies_size() const;
  void clear_celestialbodies();
  static const int kCelestialBodiesFieldNumber = 2;
  const ::vizProtobufferMessage::VizMessage_CelestialBody& celestialbodies(int index) const;
  ::vizProtobufferMessage::VizMessage_CelestialBody* mutable_celestialbodies(int index);
  ::vizProtobufferMessage::VizMessage_CelestialBody* add_celestialbodies();
  ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CelestialBody >*
      mutable_celestialbodies();
  const ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CelestialBody >&
      celestialbodies() const;

  // repeated .vizProtobufferMessage.VizMessage.Spacecraft spacecraft = 3;
  int spacecraft_size() const;
  void clear_spacecraft();
  static const int kSpacecraftFieldNumber = 3;
  const ::vizProtobufferMessage::VizMessage_Spacecraft& spacecraft(int index) const;
  ::vizProtobufferMessage::VizMessage_Spacecraft* mutable_spacecraft(int index);
  ::vizProtobufferMessage::VizMessage_Spacecraft* add_spacecraft();
  ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Spacecraft >*
      mutable_spacecraft();
  const ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Spacecraft >&
      spacecraft() const;

  // repeated .vizProtobufferMessage.VizMessage.CameraConfig cameras = 4;
  int cameras_size() const;
  void clear_cameras();
  static const int kCamerasFieldNumber = 4;
  const ::vizProtobufferMessage::VizMessage_CameraConfig& cameras(int index) const;
  ::vizProtobufferMessage::VizMessage_CameraConfig* mutable_cameras(int index);
  ::vizProtobufferMessage::VizMessage_CameraConfig* add_cameras();
  ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CameraConfig >*
      mutable_cameras();
  const ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CameraConfig >&
      cameras() const;

  // repeated .vizProtobufferMessage.VizMessage.CameraImage cameraImages = 5;
  int cameraimages_size() const;
  void clear_cameraimages();
  static const int kCameraImagesFieldNumber = 5;
  const ::vizProtobufferMessage::VizMessage_CameraImage& cameraimages(int index) const;
  ::vizProtobufferMessage::VizMessage_CameraImage* mutable_cameraimages(int index);
  ::vizProtobufferMessage::VizMessage_CameraImage* add_cameraimages();
  ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CameraImage >*
      mutable_cameraimages();
  const ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CameraImage >&
      cameraimages() const;

  // repeated .vizProtobufferMessage.VizMessage.ImageRequest imageRequests = 6;
  int imagerequests_size() const;
  void clear_imagerequests();
  static const int kImageRequestsFieldNumber = 6;
  const ::vizProtobufferMessage::VizMessage_ImageRequest& imagerequests(int index) const;
  ::vizProtobufferMessage::VizMessage_ImageRequest* mutable_imagerequests(int index);
  ::vizProtobufferMessage::VizMessage_ImageRequest* add_imagerequests();
  ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_ImageRequest >*
      mutable_imagerequests();
  const ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_ImageRequest >&
      imagerequests() const;

  // .vizProtobufferMessage.VizMessage.TimeStamp currentTime = 1;
  bool has_currenttime() const;
  void clear_currenttime();
  static const int kCurrentTimeFieldNumber = 1;
  const ::vizProtobufferMessage::VizMessage_TimeStamp& currenttime() const;
  ::vizProtobufferMessage::VizMessage_TimeStamp* release_currenttime();
  ::vizProtobufferMessage::VizMessage_TimeStamp* mutable_currenttime();
  void set_allocated_currenttime(::vizProtobufferMessage::VizMessage_TimeStamp* currenttime);

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CelestialBody > celestialbodies_;
  ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Spacecraft > spacecraft_;
  ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CameraConfig > cameras_;
  ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CameraImage > cameraimages_;
  ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_ImageRequest > imagerequests_;
  ::vizProtobufferMessage::VizMessage_TimeStamp* currenttime_;
  mutable int _cached_size_;
  friend struct ::protobuf_vizMessage_2eproto::TableStruct;
  friend void ::protobuf_vizMessage_2eproto::InitDefaultsVizMessageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VizMessage_TimeStamp

// int64 frameNumber = 1;
inline void VizMessage_TimeStamp::clear_framenumber() {
  framenumber_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VizMessage_TimeStamp::framenumber() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.TimeStamp.frameNumber)
  return framenumber_;
}
inline void VizMessage_TimeStamp::set_framenumber(::google::protobuf::int64 value) {
  
  framenumber_ = value;
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.TimeStamp.frameNumber)
}

// double simTimeElapsed = 2;
inline void VizMessage_TimeStamp::clear_simtimeelapsed() {
  simtimeelapsed_ = 0;
}
inline double VizMessage_TimeStamp::simtimeelapsed() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.TimeStamp.simTimeElapsed)
  return simtimeelapsed_;
}
inline void VizMessage_TimeStamp::set_simtimeelapsed(double value) {
  
  simtimeelapsed_ = value;
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.TimeStamp.simTimeElapsed)
}

// -------------------------------------------------------------------

// VizMessage_CelestialBody

// string bodyName = 1;
inline void VizMessage_CelestialBody::clear_bodyname() {
  bodyname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VizMessage_CelestialBody::bodyname() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CelestialBody.bodyName)
  return bodyname_.GetNoArena();
}
inline void VizMessage_CelestialBody::set_bodyname(const ::std::string& value) {
  
  bodyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CelestialBody.bodyName)
}
#if LANG_CXX11
inline void VizMessage_CelestialBody::set_bodyname(::std::string&& value) {
  
  bodyname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vizProtobufferMessage.VizMessage.CelestialBody.bodyName)
}
#endif
inline void VizMessage_CelestialBody::set_bodyname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bodyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vizProtobufferMessage.VizMessage.CelestialBody.bodyName)
}
inline void VizMessage_CelestialBody::set_bodyname(const char* value, size_t size) {
  
  bodyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vizProtobufferMessage.VizMessage.CelestialBody.bodyName)
}
inline ::std::string* VizMessage_CelestialBody::mutable_bodyname() {
  
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.CelestialBody.bodyName)
  return bodyname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VizMessage_CelestialBody::release_bodyname() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.CelestialBody.bodyName)
  
  return bodyname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VizMessage_CelestialBody::set_allocated_bodyname(::std::string* bodyname) {
  if (bodyname != NULL) {
    
  } else {
    
  }
  bodyname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bodyname);
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.CelestialBody.bodyName)
}

// repeated double position = 2;
inline int VizMessage_CelestialBody::position_size() const {
  return position_.size();
}
inline void VizMessage_CelestialBody::clear_position() {
  position_.Clear();
}
inline double VizMessage_CelestialBody::position(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CelestialBody.position)
  return position_.Get(index);
}
inline void VizMessage_CelestialBody::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CelestialBody.position)
}
inline void VizMessage_CelestialBody::add_position(double value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CelestialBody.position)
}
inline const ::google::protobuf::RepeatedField< double >&
VizMessage_CelestialBody::position() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CelestialBody.position)
  return position_;
}
inline ::google::protobuf::RepeatedField< double >*
VizMessage_CelestialBody::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CelestialBody.position)
  return &position_;
}

// repeated double velocity = 3;
inline int VizMessage_CelestialBody::velocity_size() const {
  return velocity_.size();
}
inline void VizMessage_CelestialBody::clear_velocity() {
  velocity_.Clear();
}
inline double VizMessage_CelestialBody::velocity(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CelestialBody.velocity)
  return velocity_.Get(index);
}
inline void VizMessage_CelestialBody::set_velocity(int index, double value) {
  velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CelestialBody.velocity)
}
inline void VizMessage_CelestialBody::add_velocity(double value) {
  velocity_.Add(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CelestialBody.velocity)
}
inline const ::google::protobuf::RepeatedField< double >&
VizMessage_CelestialBody::velocity() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CelestialBody.velocity)
  return velocity_;
}
inline ::google::protobuf::RepeatedField< double >*
VizMessage_CelestialBody::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CelestialBody.velocity)
  return &velocity_;
}

// repeated double rotation = 4;
inline int VizMessage_CelestialBody::rotation_size() const {
  return rotation_.size();
}
inline void VizMessage_CelestialBody::clear_rotation() {
  rotation_.Clear();
}
inline double VizMessage_CelestialBody::rotation(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CelestialBody.rotation)
  return rotation_.Get(index);
}
inline void VizMessage_CelestialBody::set_rotation(int index, double value) {
  rotation_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CelestialBody.rotation)
}
inline void VizMessage_CelestialBody::add_rotation(double value) {
  rotation_.Add(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CelestialBody.rotation)
}
inline const ::google::protobuf::RepeatedField< double >&
VizMessage_CelestialBody::rotation() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CelestialBody.rotation)
  return rotation_;
}
inline ::google::protobuf::RepeatedField< double >*
VizMessage_CelestialBody::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CelestialBody.rotation)
  return &rotation_;
}

// -------------------------------------------------------------------

// VizMessage_Spacecraft

// string spacecraftName = 1;
inline void VizMessage_Spacecraft::clear_spacecraftname() {
  spacecraftname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VizMessage_Spacecraft::spacecraftname() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName)
  return spacecraftname_.GetNoArena();
}
inline void VizMessage_Spacecraft::set_spacecraftname(const ::std::string& value) {
  
  spacecraftname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName)
}
#if LANG_CXX11
inline void VizMessage_Spacecraft::set_spacecraftname(::std::string&& value) {
  
  spacecraftname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName)
}
#endif
inline void VizMessage_Spacecraft::set_spacecraftname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  spacecraftname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName)
}
inline void VizMessage_Spacecraft::set_spacecraftname(const char* value, size_t size) {
  
  spacecraftname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName)
}
inline ::std::string* VizMessage_Spacecraft::mutable_spacecraftname() {
  
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName)
  return spacecraftname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VizMessage_Spacecraft::release_spacecraftname() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName)
  
  return spacecraftname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VizMessage_Spacecraft::set_allocated_spacecraftname(::std::string* spacecraftname) {
  if (spacecraftname != NULL) {
    
  } else {
    
  }
  spacecraftname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spacecraftname);
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName)
}

// repeated double position = 2;
inline int VizMessage_Spacecraft::position_size() const {
  return position_.size();
}
inline void VizMessage_Spacecraft::clear_position() {
  position_.Clear();
}
inline double VizMessage_Spacecraft::position(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.position)
  return position_.Get(index);
}
inline void VizMessage_Spacecraft::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Spacecraft.position)
}
inline void VizMessage_Spacecraft::add_position(double value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.position)
}
inline const ::google::protobuf::RepeatedField< double >&
VizMessage_Spacecraft::position() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.position)
  return position_;
}
inline ::google::protobuf::RepeatedField< double >*
VizMessage_Spacecraft::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.position)
  return &position_;
}

// repeated double velocity = 3;
inline int VizMessage_Spacecraft::velocity_size() const {
  return velocity_.size();
}
inline void VizMessage_Spacecraft::clear_velocity() {
  velocity_.Clear();
}
inline double VizMessage_Spacecraft::velocity(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.velocity)
  return velocity_.Get(index);
}
inline void VizMessage_Spacecraft::set_velocity(int index, double value) {
  velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Spacecraft.velocity)
}
inline void VizMessage_Spacecraft::add_velocity(double value) {
  velocity_.Add(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.velocity)
}
inline const ::google::protobuf::RepeatedField< double >&
VizMessage_Spacecraft::velocity() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.velocity)
  return velocity_;
}
inline ::google::protobuf::RepeatedField< double >*
VizMessage_Spacecraft::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.velocity)
  return &velocity_;
}

// repeated double rotation = 4;
inline int VizMessage_Spacecraft::rotation_size() const {
  return rotation_.size();
}
inline void VizMessage_Spacecraft::clear_rotation() {
  rotation_.Clear();
}
inline double VizMessage_Spacecraft::rotation(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.rotation)
  return rotation_.Get(index);
}
inline void VizMessage_Spacecraft::set_rotation(int index, double value) {
  rotation_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Spacecraft.rotation)
}
inline void VizMessage_Spacecraft::add_rotation(double value) {
  rotation_.Add(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.rotation)
}
inline const ::google::protobuf::RepeatedField< double >&
VizMessage_Spacecraft::rotation() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.rotation)
  return rotation_;
}
inline ::google::protobuf::RepeatedField< double >*
VizMessage_Spacecraft::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.rotation)
  return &rotation_;
}

// repeated .vizProtobufferMessage.VizMessage.ReactionWheel reactionWheels = 5;
inline int VizMessage_Spacecraft::reactionwheels_size() const {
  return reactionwheels_.size();
}
inline void VizMessage_Spacecraft::clear_reactionwheels() {
  reactionwheels_.Clear();
}
inline const ::vizProtobufferMessage::VizMessage_ReactionWheel& VizMessage_Spacecraft::reactionwheels(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.reactionWheels)
  return reactionwheels_.Get(index);
}
inline ::vizProtobufferMessage::VizMessage_ReactionWheel* VizMessage_Spacecraft::mutable_reactionwheels(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Spacecraft.reactionWheels)
  return reactionwheels_.Mutable(index);
}
inline ::vizProtobufferMessage::VizMessage_ReactionWheel* VizMessage_Spacecraft::add_reactionwheels() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.reactionWheels)
  return reactionwheels_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_ReactionWheel >*
VizMessage_Spacecraft::mutable_reactionwheels() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.reactionWheels)
  return &reactionwheels_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_ReactionWheel >&
VizMessage_Spacecraft::reactionwheels() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.reactionWheels)
  return reactionwheels_;
}

// repeated .vizProtobufferMessage.VizMessage.Thruster thrusters = 6;
inline int VizMessage_Spacecraft::thrusters_size() const {
  return thrusters_.size();
}
inline void VizMessage_Spacecraft::clear_thrusters() {
  thrusters_.Clear();
}
inline const ::vizProtobufferMessage::VizMessage_Thruster& VizMessage_Spacecraft::thrusters(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.thrusters)
  return thrusters_.Get(index);
}
inline ::vizProtobufferMessage::VizMessage_Thruster* VizMessage_Spacecraft::mutable_thrusters(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Spacecraft.thrusters)
  return thrusters_.Mutable(index);
}
inline ::vizProtobufferMessage::VizMessage_Thruster* VizMessage_Spacecraft::add_thrusters() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.thrusters)
  return thrusters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Thruster >*
VizMessage_Spacecraft::mutable_thrusters() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.thrusters)
  return &thrusters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Thruster >&
VizMessage_Spacecraft::thrusters() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.thrusters)
  return thrusters_;
}

// repeated .vizProtobufferMessage.VizMessage.CoarseSunSensor CSS = 7;
inline int VizMessage_Spacecraft::css_size() const {
  return css_.size();
}
inline void VizMessage_Spacecraft::clear_css() {
  css_.Clear();
}
inline const ::vizProtobufferMessage::VizMessage_CoarseSunSensor& VizMessage_Spacecraft::css(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.CSS)
  return css_.Get(index);
}
inline ::vizProtobufferMessage::VizMessage_CoarseSunSensor* VizMessage_Spacecraft::mutable_css(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Spacecraft.CSS)
  return css_.Mutable(index);
}
inline ::vizProtobufferMessage::VizMessage_CoarseSunSensor* VizMessage_Spacecraft::add_css() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.CSS)
  return css_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CoarseSunSensor >*
VizMessage_Spacecraft::mutable_css() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.CSS)
  return &css_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CoarseSunSensor >&
VizMessage_Spacecraft::css() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.CSS)
  return css_;
}

// repeated .vizProtobufferMessage.VizMessage.StarTracker starTrackers = 8;
inline int VizMessage_Spacecraft::startrackers_size() const {
  return startrackers_.size();
}
inline void VizMessage_Spacecraft::clear_startrackers() {
  startrackers_.Clear();
}
inline const ::vizProtobufferMessage::VizMessage_StarTracker& VizMessage_Spacecraft::startrackers(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.starTrackers)
  return startrackers_.Get(index);
}
inline ::vizProtobufferMessage::VizMessage_StarTracker* VizMessage_Spacecraft::mutable_startrackers(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Spacecraft.starTrackers)
  return startrackers_.Mutable(index);
}
inline ::vizProtobufferMessage::VizMessage_StarTracker* VizMessage_Spacecraft::add_startrackers() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.starTrackers)
  return startrackers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_StarTracker >*
VizMessage_Spacecraft::mutable_startrackers() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.starTrackers)
  return &startrackers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_StarTracker >&
VizMessage_Spacecraft::startrackers() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.starTrackers)
  return startrackers_;
}

// -------------------------------------------------------------------

// VizMessage_ReactionWheel

// repeated double position = 2;
inline int VizMessage_ReactionWheel::position_size() const {
  return position_.size();
}
inline void VizMessage_ReactionWheel::clear_position() {
  position_.Clear();
}
inline double VizMessage_ReactionWheel::position(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.ReactionWheel.position)
  return position_.Get(index);
}
inline void VizMessage_ReactionWheel::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.ReactionWheel.position)
}
inline void VizMessage_ReactionWheel::add_position(double value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.ReactionWheel.position)
}
inline const ::google::protobuf::RepeatedField< double >&
VizMessage_ReactionWheel::position() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.ReactionWheel.position)
  return position_;
}
inline ::google::protobuf::RepeatedField< double >*
VizMessage_ReactionWheel::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.ReactionWheel.position)
  return &position_;
}

// repeated double spinAxisVector = 4;
inline int VizMessage_ReactionWheel::spinaxisvector_size() const {
  return spinaxisvector_.size();
}
inline void VizMessage_ReactionWheel::clear_spinaxisvector() {
  spinaxisvector_.Clear();
}
inline double VizMessage_ReactionWheel::spinaxisvector(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.ReactionWheel.spinAxisVector)
  return spinaxisvector_.Get(index);
}
inline void VizMessage_ReactionWheel::set_spinaxisvector(int index, double value) {
  spinaxisvector_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.ReactionWheel.spinAxisVector)
}
inline void VizMessage_ReactionWheel::add_spinaxisvector(double value) {
  spinaxisvector_.Add(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.ReactionWheel.spinAxisVector)
}
inline const ::google::protobuf::RepeatedField< double >&
VizMessage_ReactionWheel::spinaxisvector() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.ReactionWheel.spinAxisVector)
  return spinaxisvector_;
}
inline ::google::protobuf::RepeatedField< double >*
VizMessage_ReactionWheel::mutable_spinaxisvector() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.ReactionWheel.spinAxisVector)
  return &spinaxisvector_;
}

// double wheelSpeed = 5;
inline void VizMessage_ReactionWheel::clear_wheelspeed() {
  wheelspeed_ = 0;
}
inline double VizMessage_ReactionWheel::wheelspeed() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.ReactionWheel.wheelSpeed)
  return wheelspeed_;
}
inline void VizMessage_ReactionWheel::set_wheelspeed(double value) {
  
  wheelspeed_ = value;
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.ReactionWheel.wheelSpeed)
}

// double wheelTorque = 6;
inline void VizMessage_ReactionWheel::clear_wheeltorque() {
  wheeltorque_ = 0;
}
inline double VizMessage_ReactionWheel::wheeltorque() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.ReactionWheel.wheelTorque)
  return wheeltorque_;
}
inline void VizMessage_ReactionWheel::set_wheeltorque(double value) {
  
  wheeltorque_ = value;
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.ReactionWheel.wheelTorque)
}

// -------------------------------------------------------------------

// VizMessage_Thruster

// repeated double position = 2;
inline int VizMessage_Thruster::position_size() const {
  return position_.size();
}
inline void VizMessage_Thruster::clear_position() {
  position_.Clear();
}
inline double VizMessage_Thruster::position(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Thruster.position)
  return position_.Get(index);
}
inline void VizMessage_Thruster::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Thruster.position)
}
inline void VizMessage_Thruster::add_position(double value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Thruster.position)
}
inline const ::google::protobuf::RepeatedField< double >&
VizMessage_Thruster::position() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Thruster.position)
  return position_;
}
inline ::google::protobuf::RepeatedField< double >*
VizMessage_Thruster::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Thruster.position)
  return &position_;
}

// repeated double thrustVector = 4;
inline int VizMessage_Thruster::thrustvector_size() const {
  return thrustvector_.size();
}
inline void VizMessage_Thruster::clear_thrustvector() {
  thrustvector_.Clear();
}
inline double VizMessage_Thruster::thrustvector(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Thruster.thrustVector)
  return thrustvector_.Get(index);
}
inline void VizMessage_Thruster::set_thrustvector(int index, double value) {
  thrustvector_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Thruster.thrustVector)
}
inline void VizMessage_Thruster::add_thrustvector(double value) {
  thrustvector_.Add(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Thruster.thrustVector)
}
inline const ::google::protobuf::RepeatedField< double >&
VizMessage_Thruster::thrustvector() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Thruster.thrustVector)
  return thrustvector_;
}
inline ::google::protobuf::RepeatedField< double >*
VizMessage_Thruster::mutable_thrustvector() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Thruster.thrustVector)
  return &thrustvector_;
}

// double currentThrust = 5;
inline void VizMessage_Thruster::clear_currentthrust() {
  currentthrust_ = 0;
}
inline double VizMessage_Thruster::currentthrust() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Thruster.currentThrust)
  return currentthrust_;
}
inline void VizMessage_Thruster::set_currentthrust(double value) {
  
  currentthrust_ = value;
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Thruster.currentThrust)
}

// double maxThrust = 6;
inline void VizMessage_Thruster::clear_maxthrust() {
  maxthrust_ = 0;
}
inline double VizMessage_Thruster::maxthrust() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Thruster.maxThrust)
  return maxthrust_;
}
inline void VizMessage_Thruster::set_maxthrust(double value) {
  
  maxthrust_ = value;
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Thruster.maxThrust)
}

// int32 thrusterGroupID = 7;
inline void VizMessage_Thruster::clear_thrustergroupid() {
  thrustergroupid_ = 0;
}
inline ::google::protobuf::int32 VizMessage_Thruster::thrustergroupid() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Thruster.thrusterGroupID)
  return thrustergroupid_;
}
inline void VizMessage_Thruster::set_thrustergroupid(::google::protobuf::int32 value) {
  
  thrustergroupid_ = value;
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Thruster.thrusterGroupID)
}

// -------------------------------------------------------------------

// VizMessage_CoarseSunSensor

// repeated double position = 2;
inline int VizMessage_CoarseSunSensor::position_size() const {
  return position_.size();
}
inline void VizMessage_CoarseSunSensor::clear_position() {
  position_.Clear();
}
inline double VizMessage_CoarseSunSensor::position(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CoarseSunSensor.position)
  return position_.Get(index);
}
inline void VizMessage_CoarseSunSensor::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CoarseSunSensor.position)
}
inline void VizMessage_CoarseSunSensor::add_position(double value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CoarseSunSensor.position)
}
inline const ::google::protobuf::RepeatedField< double >&
VizMessage_CoarseSunSensor::position() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CoarseSunSensor.position)
  return position_;
}
inline ::google::protobuf::RepeatedField< double >*
VizMessage_CoarseSunSensor::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CoarseSunSensor.position)
  return &position_;
}

// repeated double normalVector = 4;
inline int VizMessage_CoarseSunSensor::normalvector_size() const {
  return normalvector_.size();
}
inline void VizMessage_CoarseSunSensor::clear_normalvector() {
  normalvector_.Clear();
}
inline double VizMessage_CoarseSunSensor::normalvector(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CoarseSunSensor.normalVector)
  return normalvector_.Get(index);
}
inline void VizMessage_CoarseSunSensor::set_normalvector(int index, double value) {
  normalvector_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CoarseSunSensor.normalVector)
}
inline void VizMessage_CoarseSunSensor::add_normalvector(double value) {
  normalvector_.Add(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CoarseSunSensor.normalVector)
}
inline const ::google::protobuf::RepeatedField< double >&
VizMessage_CoarseSunSensor::normalvector() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CoarseSunSensor.normalVector)
  return normalvector_;
}
inline ::google::protobuf::RepeatedField< double >*
VizMessage_CoarseSunSensor::mutable_normalvector() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CoarseSunSensor.normalVector)
  return &normalvector_;
}

// double currentMsmt = 5;
inline void VizMessage_CoarseSunSensor::clear_currentmsmt() {
  currentmsmt_ = 0;
}
inline double VizMessage_CoarseSunSensor::currentmsmt() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CoarseSunSensor.currentMsmt)
  return currentmsmt_;
}
inline void VizMessage_CoarseSunSensor::set_currentmsmt(double value) {
  
  currentmsmt_ = value;
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CoarseSunSensor.currentMsmt)
}

// int32 CSSGroupID = 7;
inline void VizMessage_CoarseSunSensor::clear_cssgroupid() {
  cssgroupid_ = 0;
}
inline ::google::protobuf::int32 VizMessage_CoarseSunSensor::cssgroupid() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CoarseSunSensor.CSSGroupID)
  return cssgroupid_;
}
inline void VizMessage_CoarseSunSensor::set_cssgroupid(::google::protobuf::int32 value) {
  
  cssgroupid_ = value;
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CoarseSunSensor.CSSGroupID)
}

// -------------------------------------------------------------------

// VizMessage_StarTracker

// repeated double position = 2;
inline int VizMessage_StarTracker::position_size() const {
  return position_.size();
}
inline void VizMessage_StarTracker::clear_position() {
  position_.Clear();
}
inline double VizMessage_StarTracker::position(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.StarTracker.position)
  return position_.Get(index);
}
inline void VizMessage_StarTracker::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.StarTracker.position)
}
inline void VizMessage_StarTracker::add_position(double value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.StarTracker.position)
}
inline const ::google::protobuf::RepeatedField< double >&
VizMessage_StarTracker::position() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.StarTracker.position)
  return position_;
}
inline ::google::protobuf::RepeatedField< double >*
VizMessage_StarTracker::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.StarTracker.position)
  return &position_;
}

// repeated double rotation = 4;
inline int VizMessage_StarTracker::rotation_size() const {
  return rotation_.size();
}
inline void VizMessage_StarTracker::clear_rotation() {
  rotation_.Clear();
}
inline double VizMessage_StarTracker::rotation(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.StarTracker.rotation)
  return rotation_.Get(index);
}
inline void VizMessage_StarTracker::set_rotation(int index, double value) {
  rotation_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.StarTracker.rotation)
}
inline void VizMessage_StarTracker::add_rotation(double value) {
  rotation_.Add(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.StarTracker.rotation)
}
inline const ::google::protobuf::RepeatedField< double >&
VizMessage_StarTracker::rotation() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.StarTracker.rotation)
  return rotation_;
}
inline ::google::protobuf::RepeatedField< double >*
VizMessage_StarTracker::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.StarTracker.rotation)
  return &rotation_;
}

// double fieldOfViewHeight = 5;
inline void VizMessage_StarTracker::clear_fieldofviewheight() {
  fieldofviewheight_ = 0;
}
inline double VizMessage_StarTracker::fieldofviewheight() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.StarTracker.fieldOfViewHeight)
  return fieldofviewheight_;
}
inline void VizMessage_StarTracker::set_fieldofviewheight(double value) {
  
  fieldofviewheight_ = value;
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.StarTracker.fieldOfViewHeight)
}

// double fieldOfViewWidth = 6;
inline void VizMessage_StarTracker::clear_fieldofviewwidth() {
  fieldofviewwidth_ = 0;
}
inline double VizMessage_StarTracker::fieldofviewwidth() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.StarTracker.fieldOfViewWidth)
  return fieldofviewwidth_;
}
inline void VizMessage_StarTracker::set_fieldofviewwidth(double value) {
  
  fieldofviewwidth_ = value;
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.StarTracker.fieldOfViewWidth)
}

// int32 starTrackerGroupID = 7;
inline void VizMessage_StarTracker::clear_startrackergroupid() {
  startrackergroupid_ = 0;
}
inline ::google::protobuf::int32 VizMessage_StarTracker::startrackergroupid() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.StarTracker.starTrackerGroupID)
  return startrackergroupid_;
}
inline void VizMessage_StarTracker::set_startrackergroupid(::google::protobuf::int32 value) {
  
  startrackergroupid_ = value;
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.StarTracker.starTrackerGroupID)
}

// -------------------------------------------------------------------

// VizMessage_CameraConfig

// int64 cameraID = 1;
inline void VizMessage_CameraConfig::clear_cameraid() {
  cameraid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VizMessage_CameraConfig::cameraid() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.cameraID)
  return cameraid_;
}
inline void VizMessage_CameraConfig::set_cameraid(::google::protobuf::int64 value) {
  
  cameraid_ = value;
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.cameraID)
}

// string parentName = 2;
inline void VizMessage_CameraConfig::clear_parentname() {
  parentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VizMessage_CameraConfig::parentname() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.parentName)
  return parentname_.GetNoArena();
}
inline void VizMessage_CameraConfig::set_parentname(const ::std::string& value) {
  
  parentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.parentName)
}
#if LANG_CXX11
inline void VizMessage_CameraConfig::set_parentname(::std::string&& value) {
  
  parentname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vizProtobufferMessage.VizMessage.CameraConfig.parentName)
}
#endif
inline void VizMessage_CameraConfig::set_parentname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vizProtobufferMessage.VizMessage.CameraConfig.parentName)
}
inline void VizMessage_CameraConfig::set_parentname(const char* value, size_t size) {
  
  parentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vizProtobufferMessage.VizMessage.CameraConfig.parentName)
}
inline ::std::string* VizMessage_CameraConfig::mutable_parentname() {
  
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.CameraConfig.parentName)
  return parentname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VizMessage_CameraConfig::release_parentname() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.CameraConfig.parentName)
  
  return parentname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VizMessage_CameraConfig::set_allocated_parentname(::std::string* parentname) {
  if (parentname != NULL) {
    
  } else {
    
  }
  parentname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parentname);
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.CameraConfig.parentName)
}

// double fieldOfView = 3;
inline void VizMessage_CameraConfig::clear_fieldofview() {
  fieldofview_ = 0;
}
inline double VizMessage_CameraConfig::fieldofview() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.fieldOfView)
  return fieldofview_;
}
inline void VizMessage_CameraConfig::set_fieldofview(double value) {
  
  fieldofview_ = value;
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.fieldOfView)
}

// repeated int64 resolution = 4;
inline int VizMessage_CameraConfig::resolution_size() const {
  return resolution_.size();
}
inline void VizMessage_CameraConfig::clear_resolution() {
  resolution_.Clear();
}
inline ::google::protobuf::int64 VizMessage_CameraConfig::resolution(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.resolution)
  return resolution_.Get(index);
}
inline void VizMessage_CameraConfig::set_resolution(int index, ::google::protobuf::int64 value) {
  resolution_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.resolution)
}
inline void VizMessage_CameraConfig::add_resolution(::google::protobuf::int64 value) {
  resolution_.Add(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CameraConfig.resolution)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
VizMessage_CameraConfig::resolution() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CameraConfig.resolution)
  return resolution_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
VizMessage_CameraConfig::mutable_resolution() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CameraConfig.resolution)
  return &resolution_;
}

// double focalLength = 5;
inline void VizMessage_CameraConfig::clear_focallength() {
  focallength_ = 0;
}
inline double VizMessage_CameraConfig::focallength() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.focalLength)
  return focallength_;
}
inline void VizMessage_CameraConfig::set_focallength(double value) {
  
  focallength_ = value;
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.focalLength)
}

// repeated double sensorSize = 6;
inline int VizMessage_CameraConfig::sensorsize_size() const {
  return sensorsize_.size();
}
inline void VizMessage_CameraConfig::clear_sensorsize() {
  sensorsize_.Clear();
}
inline double VizMessage_CameraConfig::sensorsize(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.sensorSize)
  return sensorsize_.Get(index);
}
inline void VizMessage_CameraConfig::set_sensorsize(int index, double value) {
  sensorsize_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.sensorSize)
}
inline void VizMessage_CameraConfig::add_sensorsize(double value) {
  sensorsize_.Add(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CameraConfig.sensorSize)
}
inline const ::google::protobuf::RepeatedField< double >&
VizMessage_CameraConfig::sensorsize() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CameraConfig.sensorSize)
  return sensorsize_;
}
inline ::google::protobuf::RepeatedField< double >*
VizMessage_CameraConfig::mutable_sensorsize() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CameraConfig.sensorSize)
  return &sensorsize_;
}

// repeated double cameraPos_B = 7;
inline int VizMessage_CameraConfig::camerapos_b_size() const {
  return camerapos_b_.size();
}
inline void VizMessage_CameraConfig::clear_camerapos_b() {
  camerapos_b_.Clear();
}
inline double VizMessage_CameraConfig::camerapos_b(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.cameraPos_B)
  return camerapos_b_.Get(index);
}
inline void VizMessage_CameraConfig::set_camerapos_b(int index, double value) {
  camerapos_b_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.cameraPos_B)
}
inline void VizMessage_CameraConfig::add_camerapos_b(double value) {
  camerapos_b_.Add(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CameraConfig.cameraPos_B)
}
inline const ::google::protobuf::RepeatedField< double >&
VizMessage_CameraConfig::camerapos_b() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CameraConfig.cameraPos_B)
  return camerapos_b_;
}
inline ::google::protobuf::RepeatedField< double >*
VizMessage_CameraConfig::mutable_camerapos_b() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CameraConfig.cameraPos_B)
  return &camerapos_b_;
}

// repeated double cameraDir_B = 8;
inline int VizMessage_CameraConfig::cameradir_b_size() const {
  return cameradir_b_.size();
}
inline void VizMessage_CameraConfig::clear_cameradir_b() {
  cameradir_b_.Clear();
}
inline double VizMessage_CameraConfig::cameradir_b(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.cameraDir_B)
  return cameradir_b_.Get(index);
}
inline void VizMessage_CameraConfig::set_cameradir_b(int index, double value) {
  cameradir_b_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.cameraDir_B)
}
inline void VizMessage_CameraConfig::add_cameradir_b(double value) {
  cameradir_b_.Add(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CameraConfig.cameraDir_B)
}
inline const ::google::protobuf::RepeatedField< double >&
VizMessage_CameraConfig::cameradir_b() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CameraConfig.cameraDir_B)
  return cameradir_b_;
}
inline ::google::protobuf::RepeatedField< double >*
VizMessage_CameraConfig::mutable_cameradir_b() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CameraConfig.cameraDir_B)
  return &cameradir_b_;
}

// uint64 renderRate = 9;
inline void VizMessage_CameraConfig::clear_renderrate() {
  renderrate_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VizMessage_CameraConfig::renderrate() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.renderRate)
  return renderrate_;
}
inline void VizMessage_CameraConfig::set_renderrate(::google::protobuf::uint64 value) {
  
  renderrate_ = value;
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.renderRate)
}

// -------------------------------------------------------------------

// VizMessage_CameraImage

// int64 cameraID = 1;
inline void VizMessage_CameraImage::clear_cameraid() {
  cameraid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VizMessage_CameraImage::cameraid() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraImage.cameraID)
  return cameraid_;
}
inline void VizMessage_CameraImage::set_cameraid(::google::protobuf::int64 value) {
  
  cameraid_ = value;
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraImage.cameraID)
}

// double timeTag = 2;
inline void VizMessage_CameraImage::clear_timetag() {
  timetag_ = 0;
}
inline double VizMessage_CameraImage::timetag() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraImage.timeTag)
  return timetag_;
}
inline void VizMessage_CameraImage::set_timetag(double value) {
  
  timetag_ = value;
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraImage.timeTag)
}

// string imageFileName = 3;
inline void VizMessage_CameraImage::clear_imagefilename() {
  imagefilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VizMessage_CameraImage::imagefilename() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraImage.imageFileName)
  return imagefilename_.GetNoArena();
}
inline void VizMessage_CameraImage::set_imagefilename(const ::std::string& value) {
  
  imagefilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraImage.imageFileName)
}
#if LANG_CXX11
inline void VizMessage_CameraImage::set_imagefilename(::std::string&& value) {
  
  imagefilename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vizProtobufferMessage.VizMessage.CameraImage.imageFileName)
}
#endif
inline void VizMessage_CameraImage::set_imagefilename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imagefilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vizProtobufferMessage.VizMessage.CameraImage.imageFileName)
}
inline void VizMessage_CameraImage::set_imagefilename(const char* value, size_t size) {
  
  imagefilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vizProtobufferMessage.VizMessage.CameraImage.imageFileName)
}
inline ::std::string* VizMessage_CameraImage::mutable_imagefilename() {
  
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.CameraImage.imageFileName)
  return imagefilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VizMessage_CameraImage::release_imagefilename() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.CameraImage.imageFileName)
  
  return imagefilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VizMessage_CameraImage::set_allocated_imagefilename(::std::string* imagefilename) {
  if (imagefilename != NULL) {
    
  } else {
    
  }
  imagefilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagefilename);
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.CameraImage.imageFileName)
}

// repeated uint32 imageFile = 4;
inline int VizMessage_CameraImage::imagefile_size() const {
  return imagefile_.size();
}
inline void VizMessage_CameraImage::clear_imagefile() {
  imagefile_.Clear();
}
inline ::google::protobuf::uint32 VizMessage_CameraImage::imagefile(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraImage.imageFile)
  return imagefile_.Get(index);
}
inline void VizMessage_CameraImage::set_imagefile(int index, ::google::protobuf::uint32 value) {
  imagefile_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraImage.imageFile)
}
inline void VizMessage_CameraImage::add_imagefile(::google::protobuf::uint32 value) {
  imagefile_.Add(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CameraImage.imageFile)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VizMessage_CameraImage::imagefile() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CameraImage.imageFile)
  return imagefile_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VizMessage_CameraImage::mutable_imagefile() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CameraImage.imageFile)
  return &imagefile_;
}

// -------------------------------------------------------------------

// VizMessage_ImageRequest

// int64 cameraID = 1;
inline void VizMessage_ImageRequest::clear_cameraid() {
  cameraid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VizMessage_ImageRequest::cameraid() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.ImageRequest.cameraID)
  return cameraid_;
}
inline void VizMessage_ImageRequest::set_cameraid(::google::protobuf::int64 value) {
  
  cameraid_ = value;
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.ImageRequest.cameraID)
}

// double timeTag = 2;
inline void VizMessage_ImageRequest::clear_timetag() {
  timetag_ = 0;
}
inline double VizMessage_ImageRequest::timetag() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.ImageRequest.timeTag)
  return timetag_;
}
inline void VizMessage_ImageRequest::set_timetag(double value) {
  
  timetag_ = value;
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.ImageRequest.timeTag)
}

// -------------------------------------------------------------------

// VizMessage

// .vizProtobufferMessage.VizMessage.TimeStamp currentTime = 1;
inline bool VizMessage::has_currenttime() const {
  return this != internal_default_instance() && currenttime_ != NULL;
}
inline void VizMessage::clear_currenttime() {
  if (GetArenaNoVirtual() == NULL && currenttime_ != NULL) {
    delete currenttime_;
  }
  currenttime_ = NULL;
}
inline const ::vizProtobufferMessage::VizMessage_TimeStamp& VizMessage::currenttime() const {
  const ::vizProtobufferMessage::VizMessage_TimeStamp* p = currenttime_;
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.currentTime)
  return p != NULL ? *p : *reinterpret_cast<const ::vizProtobufferMessage::VizMessage_TimeStamp*>(
      &::vizProtobufferMessage::_VizMessage_TimeStamp_default_instance_);
}
inline ::vizProtobufferMessage::VizMessage_TimeStamp* VizMessage::release_currenttime() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.currentTime)
  
  ::vizProtobufferMessage::VizMessage_TimeStamp* temp = currenttime_;
  currenttime_ = NULL;
  return temp;
}
inline ::vizProtobufferMessage::VizMessage_TimeStamp* VizMessage::mutable_currenttime() {
  
  if (currenttime_ == NULL) {
    currenttime_ = new ::vizProtobufferMessage::VizMessage_TimeStamp;
  }
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.currentTime)
  return currenttime_;
}
inline void VizMessage::set_allocated_currenttime(::vizProtobufferMessage::VizMessage_TimeStamp* currenttime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete currenttime_;
  }
  if (currenttime) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      currenttime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, currenttime, submessage_arena);
    }
    
  } else {
    
  }
  currenttime_ = currenttime;
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.currentTime)
}

// repeated .vizProtobufferMessage.VizMessage.CelestialBody celestialBodies = 2;
inline int VizMessage::celestialbodies_size() const {
  return celestialbodies_.size();
}
inline void VizMessage::clear_celestialbodies() {
  celestialbodies_.Clear();
}
inline const ::vizProtobufferMessage::VizMessage_CelestialBody& VizMessage::celestialbodies(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.celestialBodies)
  return celestialbodies_.Get(index);
}
inline ::vizProtobufferMessage::VizMessage_CelestialBody* VizMessage::mutable_celestialbodies(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.celestialBodies)
  return celestialbodies_.Mutable(index);
}
inline ::vizProtobufferMessage::VizMessage_CelestialBody* VizMessage::add_celestialbodies() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.celestialBodies)
  return celestialbodies_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CelestialBody >*
VizMessage::mutable_celestialbodies() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.celestialBodies)
  return &celestialbodies_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CelestialBody >&
VizMessage::celestialbodies() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.celestialBodies)
  return celestialbodies_;
}

// repeated .vizProtobufferMessage.VizMessage.Spacecraft spacecraft = 3;
inline int VizMessage::spacecraft_size() const {
  return spacecraft_.size();
}
inline void VizMessage::clear_spacecraft() {
  spacecraft_.Clear();
}
inline const ::vizProtobufferMessage::VizMessage_Spacecraft& VizMessage::spacecraft(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.spacecraft)
  return spacecraft_.Get(index);
}
inline ::vizProtobufferMessage::VizMessage_Spacecraft* VizMessage::mutable_spacecraft(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.spacecraft)
  return spacecraft_.Mutable(index);
}
inline ::vizProtobufferMessage::VizMessage_Spacecraft* VizMessage::add_spacecraft() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.spacecraft)
  return spacecraft_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Spacecraft >*
VizMessage::mutable_spacecraft() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.spacecraft)
  return &spacecraft_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Spacecraft >&
VizMessage::spacecraft() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.spacecraft)
  return spacecraft_;
}

// repeated .vizProtobufferMessage.VizMessage.CameraConfig cameras = 4;
inline int VizMessage::cameras_size() const {
  return cameras_.size();
}
inline void VizMessage::clear_cameras() {
  cameras_.Clear();
}
inline const ::vizProtobufferMessage::VizMessage_CameraConfig& VizMessage::cameras(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.cameras)
  return cameras_.Get(index);
}
inline ::vizProtobufferMessage::VizMessage_CameraConfig* VizMessage::mutable_cameras(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.cameras)
  return cameras_.Mutable(index);
}
inline ::vizProtobufferMessage::VizMessage_CameraConfig* VizMessage::add_cameras() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.cameras)
  return cameras_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CameraConfig >*
VizMessage::mutable_cameras() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.cameras)
  return &cameras_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CameraConfig >&
VizMessage::cameras() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.cameras)
  return cameras_;
}

// repeated .vizProtobufferMessage.VizMessage.CameraImage cameraImages = 5;
inline int VizMessage::cameraimages_size() const {
  return cameraimages_.size();
}
inline void VizMessage::clear_cameraimages() {
  cameraimages_.Clear();
}
inline const ::vizProtobufferMessage::VizMessage_CameraImage& VizMessage::cameraimages(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.cameraImages)
  return cameraimages_.Get(index);
}
inline ::vizProtobufferMessage::VizMessage_CameraImage* VizMessage::mutable_cameraimages(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.cameraImages)
  return cameraimages_.Mutable(index);
}
inline ::vizProtobufferMessage::VizMessage_CameraImage* VizMessage::add_cameraimages() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.cameraImages)
  return cameraimages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CameraImage >*
VizMessage::mutable_cameraimages() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.cameraImages)
  return &cameraimages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CameraImage >&
VizMessage::cameraimages() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.cameraImages)
  return cameraimages_;
}

// repeated .vizProtobufferMessage.VizMessage.ImageRequest imageRequests = 6;
inline int VizMessage::imagerequests_size() const {
  return imagerequests_.size();
}
inline void VizMessage::clear_imagerequests() {
  imagerequests_.Clear();
}
inline const ::vizProtobufferMessage::VizMessage_ImageRequest& VizMessage::imagerequests(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.imageRequests)
  return imagerequests_.Get(index);
}
inline ::vizProtobufferMessage::VizMessage_ImageRequest* VizMessage::mutable_imagerequests(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.imageRequests)
  return imagerequests_.Mutable(index);
}
inline ::vizProtobufferMessage::VizMessage_ImageRequest* VizMessage::add_imagerequests() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.imageRequests)
  return imagerequests_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_ImageRequest >*
VizMessage::mutable_imagerequests() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.imageRequests)
  return &imagerequests_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_ImageRequest >&
VizMessage::imagerequests() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.imageRequests)
  return imagerequests_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vizProtobufferMessage

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vizMessage_2eproto__INCLUDED
