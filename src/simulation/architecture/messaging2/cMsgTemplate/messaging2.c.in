#include "{type}_C.h"
#include "simulation/architecture/messaging2/messaging2.h"
#include "utilities/bsk_Print.h"

//! C interface to subscribe to a message
void {type}_C_subscribe({type}_C *subscriber, {type}_C *source) {{
    subscriber->payloadPointer = &(source->payload);
    subscriber->headerPointer = &(source->header);
    subscriber->header.isLinked = 1;
}};

//! C interface to claim authorship to a message
void {type}_C_addAuthor({type}_C *coowner, {type}_C *data) {{
    coowner->payloadPointer = &(data->payload);
    coowner->headerPointer = &(data->header);
}};

//! C interface to write to a message
void {type}_C_write({type} *data, {type}_C *destination, uint64_t callTime) {{
    *destination->payloadPointer = *data;
    destination->headerPointer->isWritten = 1;
    destination->headerPointer->timeWritten = callTime;
    return;
}};

//! C interface to read to a message
{type} {type}_C_read({type}_C *source) {{
    return *source->payloadPointer;
}};

//! C interface to to see if this message container has been subscribed to
int {type}_C_isLinked({type}_C *data) {{
    return data->header.isLinked;
}};

//! C interface to to see if this message container ever been written to
int {type}_C_isWritten({type}_C *data) {{
    if (data->header.isLinked) {{
        return data->headerPointer->isWritten;
    }}
    BSK_PRINT(MSG_ERROR,"In C input msg, you are checking if an unconnected msg is written.");
    return 0;
}};

//! C interface to to see if this message container ever been written to
uint64_t {type}_C_timeWritten({type}_C *data) {{
    if (data->header.isLinked) {{
        return data->headerPointer->timeWritten;
    }}
    BSK_PRINT(MSG_ERROR,"In C input msg, you are requesting the write time of an unconnected msg.");
    return 0;
}};

//! method description
void {type}_cpp_subscribe({type}_C *subscriber, void* source){{
    SimMessage<{type}>* source_t = (SimMessage<{type}>*) source;
    Msg2Header *msgPtr;
    subscriber->payloadPointer = source_t->subscribeRaw(&(msgPtr));
    subscriber->headerPointer = msgPtr;
    subscriber->header.isLinked = 1;
}};