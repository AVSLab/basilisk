/*
 ISC License

 Copyright (c) 2021, Autonomous Vehicle Systems Lab, University of Colorado at Boulder

 Permission to use, copy, modify, and/or distribute this software for any
 purpose with or without fee is hereby granted, provided that the above
 copyright notice and this permission notice appear in all copies.

 THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 */
#include "simulation/thermal/motorThermal/motorThermal.h"
#include <iostream>
#include <cstring>
#include "architecture/utilities/avsEigenSupport.h"
#include "architecture/utilities/linearAlgebra.h"
#include <math.h>

/*! This is the constructor for the module class.  It sets default variable
    values and initializes the various parts of the model */
MotorThermal::MotorThermal()
{
    this->currentTemperature = -273.15;     //!< current temperature defaults to absolute zero
    this->ambientTemperature = 0.0;         //!< ambient temperature defaults to 0 Celsius
    this->ambientThermalResistance = -1.0;  //!< ambient thermal resistance  
    this->motorHeatCapacity = -1.0;         //!< motor heat capacity
    this->efficiency = 1.0;                 //!< default efficiency is 1.0
}

/*! Module Destructor.  */
MotorThermal::~MotorThermal()
{
    return;
}


/*! This method is used to reset the module.
 @return void
 */
void MotorThermal::Reset(uint64_t CurrentSimNanos)
{
    // check if input message is linked
    if (!this->rwStateInMsg.isLinked())
    {
        bskLogger.bskLog(BSK_ERROR, "motorThermal.rwStateInMsg is not linked.");
    }

    // if the current temperature is at or below absolute zero, it means either the temperature wasn't set properly or some error occurred
    if (this->currentTemperature <= -273.15)
    {
        bskLogger.bskLog(BSK_ERROR, "motorThermal: current temperature is at or below absolute zero.");
    }

    // throw an error if the efficiency is not between 0.0 and 1.0
    if (this->efficiency <= 0.0 || this->efficiency >= 1.0)
    {
        bskLogger.bskLog(BSK_ERROR, "motorThermal: efficiency is %f, must be a value greater than 0.0 and smaller than 1.0.",
            this->efficiency);
    }

    // if the ambient heat capacity is at or below zero, it means either the value wasn't set properly
    if (this->ambientThermalResistance <= 0)
    {
        bskLogger.bskLog(BSK_ERROR, "motorThermal: current ambient thermal resistance is at or below zero, must be a positive number. The value has either not been set, or has not been set properly.");
    }

    // if the motor heat capacity is at or below zero, it means either the value wasn't set properly
    if (this->motorHeatCapacity <= 0)
    {
        bskLogger.bskLog(BSK_ERROR, "Current ambient heat capacity is at or below zero, must be a positive number. The value has either not been set, or has not been set properly.");
    }

    // reset the previous time
    this->prevTime = CurrentSimNanos;

    // zero the incoming message buffer
    this->rwStateBuffer = this->rwStateInMsg.zeroMsgPayload;

    return;
}

/*! This method reads the reaction wheel state input message
 */
void MotorThermal::readInputMessages()
{
    // read the incoming power message
    this->rwStateBuffer = this->rwStateInMsg();

    return;
}

/*! This method writes the motor temperature output state message.
 @return void
 @param CurrentClock The clock time associated with the model call
 */
void MotorThermal::writeOutputMessages(uint64_t CurrentClock)
{
    this->temperatureOutMsg.write(&this->temperatureBuffer, this->moduleID, CurrentClock);

    return;
}

/*! This method computes the reaction wheel temperature
 */
void MotorThermal::computeTemperature(uint64_t CurrentSimNanos)
{
    double wheelPower;
    double frictionHeat;
    double heatGeneration;
    double heatDissipation;
    double timeStep;

    // set the time step for conversion from power to heat
    timeStep = (CurrentSimNanos - this->prevTime) * 1.0E-9;

    // compute the mechanical power needed
    wheelPower = this->rwStateBuffer.Omega * this->rwStateBuffer.u_current;

    // compute the heat generated by friction
    frictionHeat = this->rwStateBuffer.Omega * this->rwStateBuffer.frictionTorque;

    // compute heat generation
    heatGeneration = timeStep * (fabs(wheelPower) / this->efficiency * (1.0 - this->efficiency) + fabs(frictionHeat));

    // compute heat dissipation
    heatDissipation = timeStep * (this->currentTemperature - this->ambientTemperature) / this->ambientThermalResistance;

    // compute the new temperature value
    this->currentTemperature = this->currentTemperature + (heatGeneration - heatDissipation) / this->motorHeatCapacity;

    // transfer the temperature to the message buffer
    this->temperatureBuffer.temperature = this->currentTemperature;

    return;
}

/*! This method is used to update the module.
*/
void MotorThermal::UpdateState(uint64_t CurrentSimNanos)
{
    readInputMessages();
    computeTemperature(CurrentSimNanos);
    writeOutputMessages(CurrentSimNanos);

    this->prevTime = CurrentSimNanos;

    return;
}
