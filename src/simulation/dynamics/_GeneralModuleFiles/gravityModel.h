/*
 ISC License

 Copyright (c) 2023, Autonomous Vehicle Systems Lab, University of Colorado at Boulder

 Permission to use, copy, modify, and/or distribute this software for any
 purpose with or without fee is hereby granted, provided that the above
 copyright notice and this permission notice appear in all copies.

 THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 */

#ifndef GRAVITY_MODEL_H
#define GRAVITY_MODEL_H

#include <Eigen/Dense>
#include <optional>
#include <stdint.h>
#include <string>

#include "architecture/utilities/bskLogging.h"

class GravBodyData;

/*! GravityModel is a purely abstract class the represents a mathematical body
 * for computing the gravity field generated by a body at some arbitrary
 * point in space.
 */
class GravityModel {
  public:
    // Core Guidelines C.67 and C.127
    virtual ~GravityModel() = default;
    GravityModel() = default;
    GravityModel(const GravityModel&) = delete;
    GravityModel& operator=(const GravityModel&) = delete;
    GravityModel(GravityModel&&) = delete;
    GravityModel& operator=(GravityModel&&) = delete;

    /** Initializes any parameters necessary for the computation of gravity.
     *
     * This method can be called to generate all dependent parameters assuming
     * that all independent parameters have been set.
     *
     * This method returns an empty string whenever initialization was
     * succesful. Otherwise, the returned string will be used as the error
     * message.
     */
    virtual std::optional<std::string> initializeParameters() = 0;

    /** Initialize any parameters necessary for the computation of gravity.
     *
     * See GravityModel::initializeParameters().
     *
     * Unlike GravityModel::initializeParameters(), this method is passed a
     * GravBodyData, which can be used to initialize parameters, such as the
     * gravitational constant or the radius.
     *
     * This method is called by GravityEffector::Reset on all GravBodyData. If
     * the returned optional is set, GravityEffector::Reset will log an error
     * with the value in the optional.
     */
    virtual std::optional<std::string> initializeParameters(const GravBodyData&) = 0;

    /** Returns the gravity acceleration at a position around this body.
     *
     * The position is given in the body-fixed reference frame.
     * Likewise, the resulting acceleration should be given in the
     * body-fixed reference frame.
     */
    virtual Eigen::Vector3d computeField(const Eigen::Vector3d& position_planetFixed) const = 0;

    /** Returns the gravitational potential energy at a position around this body.
     *
     * The position is given relative to the body and in the inertial
     * reference frame.
     */
    virtual double computePotentialEnergy(const Eigen::Vector3d& positionWrtPlanet_N) const = 0;

  public:
    BSKLogger *bskLogger;  /*!< pointer to bsk logging instance */
};

#endif /* GRAVITY_MODEL_H */
